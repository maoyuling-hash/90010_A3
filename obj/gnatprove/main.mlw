(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 63 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 62 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 129 0 0][@model_trace:12508] [@name:Default_Priority] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 63 63 >
 
 val constant first 
   : int
  ensures { result =  (63 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__mystring__T13s.t13s) : int =
  (Calculatorcommands__lines__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__mystring__T13s.t13s, 
 predicate in_range = Calculatorcommands__lines__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__TmystringstrD1.tmystringstrD1) : int =
  (Calculatorcommands__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Calculatorcommands__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystringstr as Calculatorcommands__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__calculatorcommands__lines__mystring__length [@model_trace:.26865] [@name:Length] : Calculatorcommands__lines__mystring__T13s.t13s; rec__calculatorcommands__lines__mystring__str [@name:Str] [@model_trace:.26880] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__calculatorcommands__lines__mystring__length__projection [@model_trace:.26865] [@name:Length] 
   (a : __split_fields) : Calculatorcommands__lines__mystring__T13s.t13s =
  a.rec__calculatorcommands__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 function __split_fields_rec__calculatorcommands__lines__mystring__str__projection [@name:Str] [@model_trace:.26880] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__calculatorcommands__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate calculatorcommands__lines__mystring__length__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__length__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__length_ 
   (a : __rep) : Calculatorcommands__lines__mystring__T13s.t13s
  requires {  (calculatorcommands__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__length) }
 
 predicate calculatorcommands__lines__mystring__str__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__str__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (calculatorcommands__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep a.__split_fields.rec__calculatorcommands__lines__mystring__length) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep b.__split_fields.rec__calculatorcommands__lines__mystring__length)) /\ (Calculatorcommands__lines__mystringstr.bool_eq a.__split_fields.rec__calculatorcommands__lines__mystring__str b.__split_fields.rec__calculatorcommands__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring
 use export Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__length__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__position 
   : int

 
 axiom calculatorcommands__lines__mystring__length__first__bit_axiom :
  ((calculatorcommands__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__length__last__bit_axiom :
  ((calculatorcommands__lines__mystring__length__last__bit ) > (calculatorcommands__lines__mystring__length__first__bit ))
 
 axiom calculatorcommands__lines__mystring__length__position_axiom :
  ((calculatorcommands__lines__mystring__length__position ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__str__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__position 
   : int

 
 axiom calculatorcommands__lines__mystring__str__first__bit_axiom :
  ((calculatorcommands__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__str__last__bit_axiom :
  ((calculatorcommands__lines__mystring__str__last__bit ) > (calculatorcommands__lines__mystring__str__first__bit ))
 
 axiom calculatorcommands__lines__mystring__str__position_axiom :
  ((calculatorcommands__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.3393] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@name:Length] [@model_trace:.3403] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.3393] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@name:Length] [@model_trace:.3403] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_156) (get b ((b__first - a__first) + temp___idx_156)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1__rep
 use        Main__TTtSP1 as Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTtSP1.tTtSP1) : int =
  (Main__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTtSP1.tTtSP1, 
 predicate in_range = Main__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type location_index =
  < range 1 256 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = location_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type location_index__ref =
  { mutable location_index__content : location_index }
 
 function location_index__ref_location_index__content__projection 
   (a : location_index__ref) : location_index =
  a.location_index__content
 
 meta "model_projection" function location_index__ref_location_index__content__projection
 
 meta "inline:no" function location_index__ref_location_index__content__projection
 
 val location_index__havoc 
   (x : location_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__location_index.location_index) : int =
  (Memorystore__location_index.location_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__location_index.location_index, 
 predicate in_range = Memorystore__location_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content : tinteger_32B }
 
 function tinteger_32B__ref_tinteger_32B__content__projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref_tinteger_32B__content__projection
 
 meta "inline:no" function tinteger_32B__ref_tinteger_32B__content__projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B as Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__2__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32 as Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__projection
 
 meta "inline:no" function int32__ref_int32__content__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32__rep
 use        Memorystore__int32 as Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__int32.int32) : int =
  (Memorystore__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__int32.int32, 
 predicate in_range = Memorystore__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "cell_opt" defined at memorystore.ads:41, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep

 type __split_fields =
  { rec__memorystore__cell_opt__valid [@name:Valid] [@model_trace:.6814] : bool; rec__memorystore__cell_opt__val [@model_trace:.6825] [@name:Val] : Memorystore__int32.int32 }
 
 function __split_fields_rec__memorystore__cell_opt__valid__projection [@name:Valid] [@model_trace:.6814] 
   (a : __split_fields) : bool =
  a.rec__memorystore__cell_opt__valid
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 function __split_fields_rec__memorystore__cell_opt__val__projection [@model_trace:.6825] [@name:Val] 
   (a : __split_fields) : Memorystore__int32.int32 =
  a.rec__memorystore__cell_opt__val
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__cell_opt__valid__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__valid__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__valid__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__valid_ 
   (a : __rep) : bool
  requires {  (memorystore__cell_opt__valid__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__valid) }
 
 predicate memorystore__cell_opt__val__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__val__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__val__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__val_ 
   (a : __rep) : Memorystore__int32.int32
  requires {  (memorystore__cell_opt__val__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__val) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__memorystore__cell_opt__valid = b.__split_fields.rec__memorystore__cell_opt__valid) /\ ((Memorystore__int32__rep.to_rep a.__split_fields.rec__memorystore__cell_opt__val) = (Memorystore__int32__rep.to_rep b.__split_fields.rec__memorystore__cell_opt__val)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__cell_opt
 use export Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type cell_opt =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__cell_opt__valid__first__bit 
   : int

 
 val constant memorystore__cell_opt__valid__last__bit 
   : int

 
 val constant memorystore__cell_opt__valid__position 
   : int

 
 axiom memorystore__cell_opt__valid__first__bit_axiom :
  ((memorystore__cell_opt__valid__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__valid__last__bit_axiom :
  ((memorystore__cell_opt__valid__last__bit ) > (memorystore__cell_opt__valid__first__bit ))
 
 axiom memorystore__cell_opt__valid__position_axiom :
  ((memorystore__cell_opt__valid__position ) >= (0 : int))
 
 val constant memorystore__cell_opt__val__first__bit 
   : int

 
 val constant memorystore__cell_opt__val__last__bit 
   : int

 
 val constant memorystore__cell_opt__val__position 
   : int

 
 axiom memorystore__cell_opt__val__first__bit_axiom :
  ((memorystore__cell_opt__val__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__val__last__bit_axiom :
  ((memorystore__cell_opt__val__last__bit ) > (memorystore__cell_opt__val__first__bit ))
 
 axiom memorystore__cell_opt__val__position_axiom :
  ((memorystore__cell_opt__val__position ) >= (0 : int))
 
 val function user_eq 
   (a : cell_opt) (b : cell_opt) : bool
 
 val constant dummy 
   : cell_opt

 
 type cell_opt__ref =
  { mutable cell_opt__content : cell_opt }
 
 function cell_opt__ref_cell_opt__content__projection 
   (a : cell_opt__ref) : cell_opt =
  a.cell_opt__content
 
 meta "model_projection" function cell_opt__ref_cell_opt__content__projection
 
 meta "inline:no" function cell_opt__ref_cell_opt__content__projection
 
 val cell_opt__havoc 
   (x : cell_opt__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Memorystore__cell_opt
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Memorystore__cell_opt.cell_opt
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_157   : int.
   (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
    (Memorystore__cell_opt.bool_eq (get a temp___idx_157) (get b ((b__first - a__first) + temp___idx_157)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_157   : int.
    (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
     (Memorystore__cell_opt.bool_eq (get a temp___idx_157) (get b ((b__first - a__first) + temp___idx_157)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Memorystore__cell_opt__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Memorystore__cell_opt.component_type, 
 type map = Array__Int__Memorystore__cell_opt.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Memorystore__cell_opt.get

end

(* Module for axiomatizing type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__Tmem_arrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Memorystore__location_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmem_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmem_arrayB__ref =
  { mutable tmem_arrayB__content : tmem_arrayB }
 
 function tmem_arrayB__ref_tmem_arrayB__content__projection 
   (a : tmem_arrayB__ref) : tmem_arrayB =
  a.tmem_arrayB__content
 
 meta "model_projection" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 meta "inline:no" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 val tmem_arrayB__havoc 
   (x : tmem_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__mem_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "database" defined at memorystore.ads:48, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__mem_array as Memorystore__mem_array
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type __split_fields =
  { rec__memorystore__database__mem [@name:Mem] [@model_trace:.6860] : Array__Int__Memorystore__cell_opt.map; rec__memorystore__database__cnt [@name:Cnt] [@model_trace:.6870] : Standard__natural.natural }
 
 function __split_fields_rec__memorystore__database__mem__projection [@name:Mem] [@model_trace:.6860] 
   (a : __split_fields) : Array__Int__Memorystore__cell_opt.map =
  a.rec__memorystore__database__mem
 
 meta "model_projection" function __split_fields_rec__memorystore__database__mem__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__mem__projection
 
 function __split_fields_rec__memorystore__database__cnt__projection [@name:Cnt] [@model_trace:.6870] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__memorystore__database__cnt
 
 meta "model_projection" function __split_fields_rec__memorystore__database__cnt__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__cnt__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__database__mem__pred 
   (a : __rep) =
  true
 val memorystore__database__mem__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__mem__pred (a : __rep) }
 
 val rec__memorystore__database__mem_ 
   (a : __rep) : Array__Int__Memorystore__cell_opt.map
  requires {  (memorystore__database__mem__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__mem) }
 
 predicate memorystore__database__cnt__pred 
   (a : __rep) =
  true
 val memorystore__database__cnt__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__cnt__pred (a : __rep) }
 
 val rec__memorystore__database__cnt_ 
   (a : __rep) : Standard__natural.natural
  requires {  (memorystore__database__cnt__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__cnt) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (Memorystore__mem_array.bool_eq a.__split_fields.rec__memorystore__database__mem b.__split_fields.rec__memorystore__database__mem) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__memorystore__database__cnt) = (Standard__natural__rep.to_rep b.__split_fields.rec__memorystore__database__cnt)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__database
 use export Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__database__mem__first__bit 
   : int

 
 val constant memorystore__database__mem__last__bit 
   : int

 
 val constant memorystore__database__mem__position 
   : int

 
 axiom memorystore__database__mem__first__bit_axiom :
  ((memorystore__database__mem__first__bit ) >= (0 : int))
 
 axiom memorystore__database__mem__last__bit_axiom :
  ((memorystore__database__mem__last__bit ) > (memorystore__database__mem__first__bit ))
 
 axiom memorystore__database__mem__position_axiom :
  ((memorystore__database__mem__position ) >= (0 : int))
 
 val constant memorystore__database__cnt__first__bit 
   : int

 
 val constant memorystore__database__cnt__last__bit 
   : int

 
 val constant memorystore__database__cnt__position 
   : int

 
 axiom memorystore__database__cnt__first__bit_axiom :
  ((memorystore__database__cnt__first__bit ) >= (0 : int))
 
 axiom memorystore__database__cnt__last__bit_axiom :
  ((memorystore__database__cnt__last__bit ) > (memorystore__database__cnt__first__bit ))
 
 axiom memorystore__database__cnt__position_axiom :
  ((memorystore__database__cnt__position ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type toperand_stackD1 =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = toperand_stackD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toperand_stackD1__ref =
  { mutable toperand_stackD1__content : toperand_stackD1 }
 
 function toperand_stackD1__ref_toperand_stackD1__content__projection 
   (a : toperand_stackD1__ref) : toperand_stackD1 =
  a.toperand_stackD1__content
 
 meta "model_projection" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 meta "inline:no" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 val toperand_stackD1__havoc 
   (x : toperand_stackD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__Toperand_stackD1.toperand_stackD1) : int =
  (Calculatorcommands__Toperand_stackD1.toperand_stackD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__Toperand_stackD1.toperand_stackD1, 
 predicate in_range = Calculatorcommands__Toperand_stackD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_158   : int.
   (if (( (a__first <= temp___idx_158) /\ (temp___idx_158 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_158)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_158))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_158   : int.
    (if (( (a__first <= temp___idx_158) /\ (temp___idx_158 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_158)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_158))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__Toperand_stackD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type toperand_stackB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type toperand_stackB__ref =
  { mutable toperand_stackB__content : toperand_stackB }
 
 function toperand_stackB__ref_toperand_stackB__content__projection 
   (a : toperand_stackB__ref) : toperand_stackB =
  a.toperand_stackB__content
 
 meta "model_projection" function toperand_stackB__ref_toperand_stackB__content__projection
 
 meta "inline:no" function toperand_stackB__ref_toperand_stackB__content__projection
 
 val toperand_stackB__havoc 
   (x : toperand_stackB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "operand_stack" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__operand_stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T1b" defined at main.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Main__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t1b =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content : t1b }
 
 function t1b__ref_t1b__content__projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref_t1b__content__projection
 
 meta "inline:no" function t1b__ref_t1b__content__projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at main.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Main__T1b__rep
 use        Main__T1b as Main__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T1b.t1b) : int =
  (Main__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T1b.t1b, 
 predicate in_range = Main__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at main.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Main__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_159 : int) (__void_param : unit)

end

(* Module for axiomatizing type "T3b" defined at main.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Main__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_trace:11049] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at mycommandline.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 14 0 0][@name:Number] [@model_trace:2863] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_160 : Standard__string.string) (number : int)

end

(* Module for defining the constant "arg" defined at main.adb:45, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_1__arg
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant arg [#"main.adb" 45 0 0][@model_projected] [@name:Arg] [@model_trace:2456] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "c" defined at main.adb:47, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_1__L5b__c
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant c [#"main.adb" 47 0 0][@model_trace:2479] [@name:C] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at main.adb:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_1__L5b__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_projected] [@model_trace:6498] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_162 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "T6b" defined at main.adb:50, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (53 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at main.adb:59, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_trace:10737] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T9b" defined at main.adb:61, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 35 0 0][@model_trace:26715] [@model_projected] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 14 0 0][@model_trace:26956] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_163 : int) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for axiomatizing type "T10b" defined at main.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T12b" defined at main.adb:69, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t12b =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t12b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t12b__ref =
  { mutable t12b__content : t12b }
 
 function t12b__ref_t12b__content__projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref_t12b__content__projection
 
 meta "inline:no" function t12b__ref_t12b__content__projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T12b" defined at main.adb:69, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T12b__rep
 use        Main__L_2__T12b as Main__L_2__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__L_2__T12b.t12b) : int =
  (Main__L_2__T12b.t12b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__L_2__T12b.t12b, 
 predicate in_range = Main__L_2__T12b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T13b" defined at main.adb:69, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 20 0 0][@model_projected] [@name:M] [@model_trace:26564] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_164 : Standard__string.string) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@model_trace:3476] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 96 0 0][@model_trace:17792] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "tok" defined at calculatorcommands.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__tok
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val constant tok [#"calculatorcommands.ads" 96 0 0][@model_trace:17803] [@name:Tok] [@model_projected] 
   : Mystringtokeniser__tokenextent.tokenextent

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tok" defined at calculatorcommands.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__tok___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_token_string" defined at calculatorcommands.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__get_token_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val function get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
 
 val predicate get_token_string__function_guard 
   (temp___result_165 : Standard__string.string) (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent)

end

(* Module for defining the constant "cmd" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_3__cmd
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant cmd [#"main.adb" 73 0 0][@model_trace:2567] [@name:Cmd] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T14b" defined at main.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T15b" defined at main.adb:77, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 17 0 0][@model_projected] [@model_trace:17165] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 18 0 0][@model_trace:17176] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "masterpin" defined at calculatorcommands.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant masterpin [#"calculatorcommands.ads" 19 0 0][@name:MasterPIN] [@model_trace:17187] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 21 0 0][@name:Numtokens] [@model_trace:17207] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T16b" defined at main.adb:81, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at main.adb:84, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 24 0 0][@model_trace:17225] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 25 0 0][@model_projected] [@model_trace:17236] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 28 0 0][@name:Numtokens] [@model_trace:17267] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T18b" defined at main.adb:88, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19b" defined at main.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at main.adb:93, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 31 0 0][@model_trace:17285] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 32 0 0][@model_trace:17296] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 35 0 0][@model_trace:17325] [@name:Numtokens] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T21b" defined at main.adb:98, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T22b" defined at main.adb:100, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 38 0 0][@model_projected] [@name:S] [@model_trace:17343] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 39 0 0][@model_projected] [@model_trace:17354] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 42 0 0][@name:NumTokens] [@model_trace:17383] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T23b" defined at main.adb:115, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at main.adb:117, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_pop__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 47 0 0][@model_trace:17419] [@name:NumTokens] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T25b" defined at main.adb:122, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T26b" defined at main.adb:124, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_add__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 52 0 0][@model_trace:17455] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T27b" defined at main.adb:129, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at main.adb:131, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_subtract__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 57 0 0][@model_trace:17496] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T29b" defined at main.adb:136, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T30b" defined at main.adb:138, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_multiply__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 63 0 0][@model_trace:17537] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T31b" defined at main.adb:143, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32b" defined at main.adb:145, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_divide__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 69 0 0][@model_trace:17578] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:69, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T33b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T34b" defined at main.adb:152, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T34b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 73 0 0][@model_trace:17601] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 74 0 0][@model_trace:17612] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 77 0 0][@model_trace:17641] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 78 0 0][@name:NumTokens] [@model_trace:17650] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T35b" defined at main.adb:158, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T36b" defined at main.adb:160, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 83 0 0][@model_trace:17684] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:84, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 84 0 0][@name:NumTokens] [@model_trace:17693] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mem" defined at calculatorcommands.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant mem [#"calculatorcommands.ads" 85 0 0][@name:Mem] [@model_projected] [@model_trace:17702] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T37b" defined at main.adb:165, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T38b" defined at main.adb:167, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 89 0 0][@model_trace:17727] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 90 0 0][@model_trace:17738] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 91 0 0][@name:Unlocked] [@model_trace:17749] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 92 0 0][@name:NumTokens] [@model_trace:17758] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:92, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T39b" defined at main.adb:172, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at main.adb:177, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "s" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val s__split_fields [#"main.adb" 19 0 0][@model_projected] [@model_trace:2349] [@name:S]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 22 0 0][@model_projected] [@name:T] [@model_trace:2360]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Main__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 24 0 0][@model_projected] [@name:NumTokens] [@model_trace:2376]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mem" defined at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val mem__split_fields [#"main.adb" 27 0 0][@name:Mem] [@model_projected] [@model_trace:2385]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "masterpin" defined at main.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Main__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val masterpin [#"main.adb" 28 0 0][@model_trace:2396] [@model_projected] [@name:MasterPIN]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at main.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at main.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Main__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"main.adb" 29 0 0][@model_trace:2407] [@model_projected] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at main.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at main.adb:32, created in Gnat2Why.Decls.Translate_Variable *)
module Main__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"main.adb" 32 0 0][@model_projected] [@name:Stack] [@model_trace:2417]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at main.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at main.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Main__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"main.adb" 34 0 0][@model_trace:2432] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at main.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at memorystore.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Memorystore__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"memorystore.ads" 18 0 0][@model_trace:6629] [@model_projected] [@name:D]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val m__split_fields [#"mystring.ads" 45 0 0][@model_projected] [@model_trace:26829] [@name:M]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:3485] [@model_projected]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:3485'First] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:3485'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 16 0 0][@model_trace:3494] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_unlock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 20 0 0][@model_projected] [@name:Unlocked] [@model_trace:17198]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "masterpin" defined at calculatorcommands.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val masterpin [#"calculatorcommands.ads" 26 0 0][@model_projected] [@model_trace:17247] [@name:MasterPIN]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 27 0 0][@model_trace:17258] [@model_projected] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 33 0 0][@model_trace:17307] [@model_projected] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 34 0 0][@name:Stack_Top] [@model_projected] [@model_trace:17316]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push2__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 40 0 0][@model_projected] [@model_trace:17365] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:41, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push2__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 41 0 0][@model_trace:17374] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_pop__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 45 0 0][@model_projected] [@model_trace:17401] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:46, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_pop__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 46 0 0][@model_trace:17410] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:50, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 50 0 0][@model_projected] [@name:Stack] [@model_trace:17437]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:51, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 51 0 0][@name:Stack_Top] [@model_projected] [@model_trace:17446]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:55, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 55 0 0][@model_projected] [@name:Stack] [@model_trace:17478]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:56, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 56 0 0][@model_trace:17487] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 61 0 0][@model_projected] [@name:Stack] [@model_trace:17519]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:62, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 62 0 0][@name:Stack_Top] [@model_projected] [@model_trace:17528]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:67, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 67 0 0][@model_trace:17560] [@model_projected] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:68, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 68 0 0][@name:Stack_Top] [@model_trace:17569] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:75, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 75 0 0][@model_projected] [@name:Stack] [@model_trace:17623]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:76, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 76 0 0][@name:Stack_Top] [@model_projected] [@model_trace:17632]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mem" defined at calculatorcommands.ads:79, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val mem__split_fields [#"calculatorcommands.ads" 79 0 0][@name:Mem] [@model_trace:17659] [@model_projected]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mem" defined at calculatorcommands.ads:93, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_remove__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val mem__split_fields [#"calculatorcommands.ads" 93 0 0][@name:Mem] [@model_trace:17767] [@model_projected]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at memorystore.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:57, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_unlock" defined at calculatorcommands.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_lock" defined at calculatorcommands.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_push1" defined at calculatorcommands.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_push1
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_push2" defined at calculatorcommands.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_push2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_pop" defined at calculatorcommands.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_pop
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_add" defined at calculatorcommands.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_add
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_subtract" defined at calculatorcommands.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_subtract
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_multiply" defined at calculatorcommands.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_multiply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_divide" defined at calculatorcommands.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_divide
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_storeto" defined at calculatorcommands.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_storeto
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_list" defined at calculatorcommands.ads:82, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_list
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_remove" defined at calculatorcommands.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) =
  (if (( temp___is_init_167 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_171)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_172 : int) (temp___skip_top_level_173 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_172 : int) (temp___skip_top_level_173 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_172 : int) (temp___skip_top_level_173 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) =
  (if (( temp___is_init_174 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_178)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_179 : int) (temp___skip_top_level_180 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_179 : int) (temp___skip_top_level_180 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_179 : int) (temp___skip_top_level_180 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) =
  (if (( temp___is_init_181 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_185)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_186 : int) (temp___skip_top_level_187 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_192 : int) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) =
  (if (( temp___is_init_188 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_192)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_192 : int) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_192 : int) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_193 : int) (temp___skip_top_level_194 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_193 : int) (temp___skip_top_level_194 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_193 : int) (temp___skip_top_level_194 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_199 : Array__Int__Standard__character.map) (temp___is_init_195 : bool) (temp___skip_constant_196 : bool) (temp___do_toplevel_197 : bool) (temp___do_typ_inv_198 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_199 : Array__Int__Standard__character.map) (temp___is_init_195 : bool) (temp___skip_constant_196 : bool) (temp___do_toplevel_197 : bool) (temp___do_typ_inv_198 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_199 : Array__Int__Standard__character.map) (temp___is_init_195 : bool) (temp___skip_constant_196 : bool) (temp___do_toplevel_197 : bool) (temp___do_typ_inv_198 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_201 : Array__Int__Standard__character.map) (temp___skip_top_level_202 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_201 : Array__Int__Standard__character.map) (temp___skip_top_level_202 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_201 : Array__Int__Standard__character.map) (temp___skip_top_level_202 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_209 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_212 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_211 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_221 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_221 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_221 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_222 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_223 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_222 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_223 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_222 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_223 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_230 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) =
  (if (temp___skip_constant_227) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_230) (Mystringtokeniser__tokenarray.last temp___expr_230))))
 val dynamic_invariant [@inline] 
   (temp___expr_230 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_230 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) }

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_236 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_236 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_236 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_238 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_239 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_238 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_239 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_238 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_239 : bool) }

end

(* Module giving axioms for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__location_index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__location_index as Memorystore__location_index

 predicate dynamic_invariant [@inline] 
   (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) =
  (if (( temp___is_init_244 \/ (Memorystore__location_index.first <= Memorystore__location_index.last) )) then (
   (Memorystore__location_index.dynamic_property Memorystore__location_index.first Memorystore__location_index.last temp___expr_248)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_248 : int) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_249 : int) (temp___skip_top_level_250 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_249 : int) (temp___skip_top_level_250 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_249 : int) (temp___skip_top_level_250 : bool) }

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__integer_32 as Interfaces__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_255 : int) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) =
  (if (( temp___is_init_251 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_255)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_255 : int) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_255 : int) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_256 : int) (temp___skip_top_level_257 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_256 : int) (temp___skip_top_level_257 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_256 : int) (temp___skip_top_level_257 : bool) }

end

(* Module giving axioms for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) =
  (if (( temp___is_init_258 \/ (Memorystore__int32.first <= Memorystore__int32.last) )) then (
   (Memorystore__int32.dynamic_property Memorystore__int32.first Memorystore__int32.last temp___expr_262)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_262 : int) (temp___is_init_258 : bool) (temp___skip_constant_259 : bool) (temp___do_toplevel_260 : bool) (temp___do_typ_inv_261 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_263 : int) (temp___skip_top_level_264 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_263 : int) (temp___skip_top_level_264 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_263 : int) (temp___skip_top_level_264 : bool) }

end

(* Module giving axioms for type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__cell_opt___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_269 : Memorystore__cell_opt.cell_opt) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_269 : Memorystore__cell_opt.cell_opt) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_269 : Memorystore__cell_opt.cell_opt) (temp___is_init_265 : bool) (temp___skip_constant_266 : bool) (temp___do_toplevel_267 : bool) (temp___do_typ_inv_268 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_270 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_271 : bool) =
  ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred temp___expr_270)) then (
   (temp___expr_270.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred temp___expr_270)) then (
   ((Memorystore__int32__rep.to_rep temp___expr_270.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_270 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_271 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_270 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_271 : bool) }

end

(* Module giving axioms for type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__Tmem_arrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__mem_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_276 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_276 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_276 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_272 : bool) (temp___skip_constant_273 : bool) (temp___do_toplevel_274 : bool) (temp___do_typ_inv_275 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_278 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_279 : bool) =
  (forall temp___280   : int.
   (if (( (Memorystore__location_index.first <= temp___280) /\ (temp___280 <= Memorystore__location_index.last) )) then (
    (let temp___281 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_278 temp___280) in (
     ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_278 temp___280))) then (
      ((Array__Int__Memorystore__cell_opt.get temp___expr_278 temp___280).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_278 temp___280))) then (
      ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_278 temp___280).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
   ) else true))
 val default_initial_assumption [@inline] 
   (temp___expr_278 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_279 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_278 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_279 : bool) }

end

(* Module giving axioms for type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__database as Memorystore__database
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_286 : Memorystore__database.database) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_286 : Memorystore__database.database) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_286 : Memorystore__database.database) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_288 : Memorystore__database.database) (temp___skip_top_level_289 : bool) =
  ( (if ((Memorystore__database.memorystore__database__mem__pred temp___expr_288)) then (
   (let temp___290 [@mlw:proxy_symbol] [@introduced] = temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem in (
    (forall temp___291   : int.
     (if (( (Memorystore__location_index.first <= temp___291) /\ (temp___291 <= Memorystore__location_index.last) )) then (
      (let temp___292 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___291) in (
       ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___291))) then (
        ((Array__Int__Memorystore__cell_opt.get temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___291).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___291))) then (
        ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___291).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
     ) else true))))
  ) else true) /\ (if ((Memorystore__database.memorystore__database__cnt__pred temp___expr_288)) then (
   ((Standard__natural__rep.to_rep temp___expr_288.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__cnt) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_288 : Memorystore__database.database) (temp___skip_top_level_289 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_288 : Memorystore__database.database) (temp___skip_top_level_289 : bool) }

end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_297 : int) (temp___is_init_293 : bool) (temp___skip_constant_294 : bool) (temp___do_toplevel_295 : bool) (temp___do_typ_inv_296 : bool) =
  (if (( temp___is_init_293 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_297)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_297 : int) (temp___is_init_293 : bool) (temp___skip_constant_294 : bool) (temp___do_toplevel_295 : bool) (temp___do_typ_inv_296 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_297 : int) (temp___is_init_293 : bool) (temp___skip_constant_294 : bool) (temp___do_toplevel_295 : bool) (temp___do_typ_inv_296 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_298 : int) (temp___skip_top_level_299 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_298 : int) (temp___skip_top_level_299 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_298 : int) (temp___skip_top_level_299 : bool) }

end

(* Module giving axioms for type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "operand_stack" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__operand_stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_304 : Array__Int__Standard__integer.map) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_304 : Array__Int__Standard__integer.map) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_304 : Array__Int__Standard__integer.map) (temp___is_init_300 : bool) (temp___skip_constant_301 : bool) (temp___do_toplevel_302 : bool) (temp___do_typ_inv_303 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_306 : Array__Int__Standard__integer.map) (temp___skip_top_level_307 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_306 : Array__Int__Standard__integer.map) (temp___skip_top_level_307 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_306 : Array__Int__Standard__integer.map) (temp___skip_top_level_307 : bool) }

end

(* Module giving axioms for type "T1b" defined at main.adb:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at main.adb:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at main.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at main.adb:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at main.adb:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at main.adb:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at main.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at main.adb:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at main.adb:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at main.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15b" defined at main.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at main.adb:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at main.adb:84, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at main.adb:88, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at main.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at main.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21b" defined at main.adb:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at main.adb:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at main.adb:115, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at main.adb:117, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at main.adb:122, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at main.adb:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at main.adb:129, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at main.adb:131, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at main.adb:136, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at main.adb:138, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at main.adb:143, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at main.adb:145, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at main.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T34b" defined at main.adb:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T34b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at main.adb:158, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at main.adb:160, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at main.adb:165, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at main.adb:167, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at main.adb:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40b" defined at main.adb:177, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at main.adb:32, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__stack__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val function main__stack__aggregate_def 
   (temp___375 : int) : Array__Int__Standard__integer.map

end

(* Module for defining a value for string literal  defined at main.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_377
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_377 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_377__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_377 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (6 : int))) = (58 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (8 : int))) = (78 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (9 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (11 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (12 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (13 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (14 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (15 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (16 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (18 : int))) = (80 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (19 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (20 : int))) = (78 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (22 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (23 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (25 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (26 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (27 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (29 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_377 __void_param) (30 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:50, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_378
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_378 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_378__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_378 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (9 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (10 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (11 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (12 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (16 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (17 : int))) = (73 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (18 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (19 : int))) = (58 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (21 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (22 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (24 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (25 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (26 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (27 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (28 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (29 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (30 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (31 : int))) = (52 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (32 : int))) = (45 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (33 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (34 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (35 : int))) = (103 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (36 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (37 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (38 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (39 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (40 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (41 : int))) = (109 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (42 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (43 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (44 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (45 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (46 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (47 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (48 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (49 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (50 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (51 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (52 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_378 __void_param) (53 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:59, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_381
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_381 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_381__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_381 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (6 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (8 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (9 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_381 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:61, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_382
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_382 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_382__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_382 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (7 : int))) = (62 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_382 __void_param) (8 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:66, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_383
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_383 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_383__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_383 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (8 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (10 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (11 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (12 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (14 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (15 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (17 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (18 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (20 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (21 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_383 __void_param) (22 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at main.adb:69, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_385
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function temp_____aggregate_def_385 
   (temp___387 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:76, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_390
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_390 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_390__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_390 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (4 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (6 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (9 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (10 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (13 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (14 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (15 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (16 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_390 __void_param) (17 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:172, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_391
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_391 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_391__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_391 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (3 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (5 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (6 : int))) = (119 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (9 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (10 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (11 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (12 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (15 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (16 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_391 __void_param) (17 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:167, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_393
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_393 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_393__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_393 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_393 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:165, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_394
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_394 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_394__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_394 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (2 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (5 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_394 __void_param) (6 : int))) = (101 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:160, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_398
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_398 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_398__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_398 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_398 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:158, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_399
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_399 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_399__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_399 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_399 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_399 __void_param) (2 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_399 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_399 __void_param) (4 : int))) = (116 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:152, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_403
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_403 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_403__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_403 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_403 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:150, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_404
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_404 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_404__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_404 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (1 : int))) = (115 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (2 : int))) = (116 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (6 : int))) = (84 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (7 : int))) = (111 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:145, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_408
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_408 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_408__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_408 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_408 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:143, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_409
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_409 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_409__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_409 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (1 : int))) = (47 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:138, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_413
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_413 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_413__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_413 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:136, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_414
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_414 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_414__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_414 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_414 __void_param) (1 : int))) = (42 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:131, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_418
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_418 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_418__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_418 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_418 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:129, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_419
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_419 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_419__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_419 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_419 __void_param) (1 : int))) = (45 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:124, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_423
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_423 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_423__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_423 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:122, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_424
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_424 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_424__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_424 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_424 __void_param) (1 : int))) = (43 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:117, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_428
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_428 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_428__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_428 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_428 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:115, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_429
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_429 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_429__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_429 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (2 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (3 : int))) = (112 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:100, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_433
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_433 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_433__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_433 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:98, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_434
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_434 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_434__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_434 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_434 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_434 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_434 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_434 __void_param) (4 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_434 __void_param) (5 : int))) = (50 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_438
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_438 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_438__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_438 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:91, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_439
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_439 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_439__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_439 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (4 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (5 : int))) = (49 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:88, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_443
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_443 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_443__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_443 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (9 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (11 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (12 : int))) = (107 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (14 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_443 __void_param) (15 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:84, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_444
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_444 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_444__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_444 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_444 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:81, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_448
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_448 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_448__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_448 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (9 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (11 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (13 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (14 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (16 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (17 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:77, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_449
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_449 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_449__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_449 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:177, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_453
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_453 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_453__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_453 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (5 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (6 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (9 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (10 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (11 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (13 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (14 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (15 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (16 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (17 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (18 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_453 __void_param) (19 : int))) = (46 : int)) ) ) ) ) ))

end
(* Module for defining the value of constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (31 : int))

end

(* Module for defining the value of constant "arg" defined at main.adb:45, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_1__arg___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mycommandline__argument as Mycommandline__argument
 use        Main__B_1__arg as Main__B_1__arg

 axiom arg__def_axiom :
  ((Main__B_1__arg.arg ) = (epsilon temp___result_161 : Standard__string.string.
   ( (temp___result_161 = (Mycommandline__argument.argument (1 : int))) /\ (Mycommandline__argument.argument__function_guard temp___result_161 (1 : int)) )))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__max_mystring_length as Calculatorcommands__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Calculatorcommands__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "cmd" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_3__cmd___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:11068] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:11074] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:17828] (number <= (epsilon temp___result_311 : int.
   ( (temp___result_311 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_311 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:6518] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:6521]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:6535] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:6541] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:6518] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:6521]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:6535] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:6541] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at memorystore.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom

 val init 
   (d__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:10756] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:10762] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Calculatorcommands__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Calculatorcommands__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep

 val length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:27103] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__length.length m) in (
    (if ((Calculatorcommands__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:27103] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Calculatorcommands__lines__length.length m) in (
    (Calculatorcommands__lines__length.length__function_guard result m)))
    ) -> ((Calculatorcommands__lines__length.length m) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__to_string as Calculatorcommands__lines__to_string

 val to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__to_string.to_string m)) /\ (Calculatorcommands__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:26536] ((Standard__string.length result) = (epsilon temp___result_320 : int.
   ( (temp___result_320 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_320 m) ))) ) /\ ( [@GP_Pretty_Ada:26543] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:26548] ((Standard__string.last result) = (epsilon temp___result_321 : int.
   ( (temp___result_321 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_321 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__to_string.to_string m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__to_string.to_string m) in (
    (if ((Calculatorcommands__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:26536] ((Standard__string.length result) = (epsilon temp___result_324 : int.
      ( (temp___result_324 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_324 m) ))) ) /\ ( [@GP_Pretty_Ada:26543] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:26548] ((Standard__string.last result) = (epsilon temp___result_325 : int.
      ( (temp___result_325 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_325 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:3518] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:19224] true ))) /\ ( [@GP_Pretty_Ada:3527] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:3535] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@name:Index] [@model_trace:3540]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:3565] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first s)) ) /\ ( [@GP_Pretty_Ada:3575] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3585] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___329   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___329) /\ (temp___329 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___329) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "get_token_string" defined at calculatorcommands.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__get_token_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom

 val get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__get_token_string.get_token_string s tok)) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard result s tok) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_token_string__post_axiom :
  (forall s   : Calculatorcommands__lines__mystring.mystring.
  (forall tok   : Mystringtokeniser__tokenextent.tokenextent [(Calculatorcommands__get_token_string.get_token_string s tok)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant s True True True True) /\ (Mystringtokeniser__tokenextent___axiom.dynamic_invariant tok True True True True) ) -> (let result = (Calculatorcommands__get_token_string.get_token_string s tok) in (
    (if ((Calculatorcommands__get_token_string.get_token_string__function_guard result s tok)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "handle_unlock" defined at calculatorcommands.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_unlock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int) (unlocked : bool__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_lock" defined at calculatorcommands.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_lock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int__ref) (unlocked : bool__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  (Pin__pin___axiom.dynamic_invariant masterpin.int__content True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, masterpin, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_push1" defined at calculatorcommands.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_push1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_push1 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_push2" defined at calculatorcommands.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_push2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_push2 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_pop" defined at calculatorcommands.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_pop___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_pop 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_add" defined at calculatorcommands.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_add___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_add 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:27418] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_subtract" defined at calculatorcommands.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_subtract___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_subtract 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:27434] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_multiply" defined at calculatorcommands.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_multiply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_multiply 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:27450] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_divide" defined at calculatorcommands.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_divide___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_divide 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:27466] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_storeto" defined at calculatorcommands.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_storeto___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_storeto 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) (numtokens : int) (mem__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  ( [@GP_Pretty_Ada:27482] (unlocked = True) ) }
  ensures {  ( ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) /\ (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = mem__split_fields.Memorystore__database.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, stack, stack_top, mem__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_list" defined at calculatorcommands.ads:82, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_list___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_list 
   (unlocked : bool) (numtokens : int) (mem : Memorystore__database.database) : unit
  requires {  ( [@GP_Pretty_Ada:27498] (unlocked = True) ) }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_remove" defined at calculatorcommands.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val handle_remove 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (unlocked : bool) (numtokens : int) (mem__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  ( [@GP_Pretty_Ada:27514] (unlocked = True) ) }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = mem__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, mem__split_fields}

end

(* Module for defining the value of the aggregate at main.adb:32, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__stack__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Main__stack__aggregate_def as Main__stack__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___375   : int.
   (let temp___374 [@mlw:proxy_symbol] [@introduced] = (Main__stack__aggregate_def.main__stack__aggregate_def temp___375) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___375 True True True True)) then (
     (forall temp___376   : int.
      ((Array__Int__Standard__integer.get temp___374 temp___376) = ( 0 : Standard__integer.integer )))) else true)))
  )

end

(* Module for defining the value of the aggregate at main.adb:69, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_385___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp_____aggregate_def_385 as Temp_____aggregate_def_385
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___387   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___386 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_385.temp_____aggregate_def_385 temp___387) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___387 True True True True)) then (
     (forall temp___388   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___386 temp___388) = temp___387))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__s as Main__s
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t as Main__t
 use        Main__numtokens as Main__numtokens
 use        Main__mem as Main__mem
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Main__masterpin as Main__masterpin
 use        Main__unlocked as Main__unlocked
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Main__stack as Main__stack
 use        Main__stack_top as Main__stack_top
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Main__B_1__arg as Main__B_1__arg
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Memorystore__init___axiom as Memorystore__init___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Calculatorcommands__lines__get_line___axiom as Calculatorcommands__lines__get_line___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__to_string___axiom as Calculatorcommands__lines__to_string___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Main__B_3__cmd as Main__B_3__cmd
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock___axiom as Calculatorcommands__handle_unlock___axiom
 use        Calculatorcommands__handle_lock___axiom as Calculatorcommands__handle_lock___axiom
 use        Calculatorcommands__handle_push1___axiom as Calculatorcommands__handle_push1___axiom
 use        Calculatorcommands__handle_push2___axiom as Calculatorcommands__handle_push2___axiom
 use        Calculatorcommands__handle_pop___axiom as Calculatorcommands__handle_pop___axiom
 use        Calculatorcommands__handle_add___axiom as Calculatorcommands__handle_add___axiom
 use        Calculatorcommands__handle_subtract___axiom as Calculatorcommands__handle_subtract___axiom
 use        Calculatorcommands__handle_multiply___axiom as Calculatorcommands__handle_multiply___axiom
 use        Calculatorcommands__handle_divide___axiom as Calculatorcommands__handle_divide___axiom
 use        Calculatorcommands__handle_storeto___axiom as Calculatorcommands__handle_storeto___axiom
 use        Calculatorcommands__handle_list___axiom as Calculatorcommands__handle_list___axiom
 use        Calculatorcommands__handle_remove___axiom as Calculatorcommands__handle_remove___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__TTtSP1 as Main__TTtSP1
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Main__L_2 as Main__L_2
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Main__stack__aggregate_def as Main__stack__aggregate_def
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Temp___String_Literal_377 as Temp___String_Literal_377
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_378 as Temp___String_Literal_378
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_381 as Temp___String_Literal_381
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_382 as Temp___String_Literal_382
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_383 as Temp___String_Literal_383
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp_____aggregate_def_385 as Temp_____aggregate_def_385
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_390 as Temp___String_Literal_390
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_391 as Temp___String_Literal_391
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_393 as Temp___String_Literal_393
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_394 as Temp___String_Literal_394
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_398 as Temp___String_Literal_398
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_399 as Temp___String_Literal_399
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_403 as Temp___String_Literal_403
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_404 as Temp___String_Literal_404
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_408 as Temp___String_Literal_408
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_409 as Temp___String_Literal_409
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_413 as Temp___String_Literal_413
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_414 as Temp___String_Literal_414
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_418 as Temp___String_Literal_418
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_419 as Temp___String_Literal_419
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_423 as Temp___String_Literal_423
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_424 as Temp___String_Literal_424
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_428 as Temp___String_Literal_428
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_429 as Temp___String_Literal_429
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_433 as Temp___String_Literal_433
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_434 as Temp___String_Literal_434
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_438 as Temp___String_Literal_438
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_439 as Temp___String_Literal_439
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_443 as Temp___String_Literal_443
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_444 as Temp___String_Literal_444
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_448 as Temp___String_Literal_448
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_449 as Temp___String_Literal_449
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_453 as Temp___String_Literal_453
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__s___axiom as Main__s___axiom
 use        Main__t___axiom as Main__t___axiom
 use        Main__numtokens___axiom as Main__numtokens___axiom
 use        Main__mem___axiom as Main__mem___axiom
 use        Main__masterpin___axiom as Main__masterpin___axiom
 use        Main__unlocked___axiom as Main__unlocked___axiom
 use        Main__stack___axiom as Main__stack___axiom
 use        Main__stack__aggregate_def___axiom as Main__stack__aggregate_def___axiom
 use        Main__stack_top___axiom as Main__stack_top___axiom
 use        Main__B_1__arg___axiom as Main__B_1__arg___axiom
 use        Temp_____aggregate_def_385___axiom as Temp_____aggregate_def_385___axiom
 use        Main__B_3__cmd___axiom as Main__B_3__cmd___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Memorystore__location_index___axiom as Memorystore__location_index___axiom
 use        Memorystore__int32___axiom as Memorystore__int32___axiom
 use        Memorystore__init___axiom as Memorystore__init___axiom
 use        Memorystore__cell_opt___axiom as Memorystore__cell_opt___axiom
 use        Memorystore__mem_array___axiom as Memorystore__mem_array___axiom
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Calculatorcommands__handle_unlock___axiom as Calculatorcommands__handle_unlock___axiom
 use        Calculatorcommands__handle_lock___axiom as Calculatorcommands__handle_lock___axiom
 use        Calculatorcommands__handle_push1___axiom as Calculatorcommands__handle_push1___axiom
 use        Calculatorcommands__handle_push2___axiom as Calculatorcommands__handle_push2___axiom
 use        Calculatorcommands__handle_pop___axiom as Calculatorcommands__handle_pop___axiom
 use        Calculatorcommands__handle_add___axiom as Calculatorcommands__handle_add___axiom
 use        Calculatorcommands__handle_subtract___axiom as Calculatorcommands__handle_subtract___axiom
 use        Calculatorcommands__handle_multiply___axiom as Calculatorcommands__handle_multiply___axiom
 use        Calculatorcommands__handle_divide___axiom as Calculatorcommands__handle_divide___axiom
 use        Calculatorcommands__handle_storeto___axiom as Calculatorcommands__handle_storeto___axiom
 use        Calculatorcommands__handle_list___axiom as Calculatorcommands__handle_list___axiom
 use        Calculatorcommands__handle_remove___axiom as Calculatorcommands__handle_remove___axiom
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Calculatorcommands__lines__to_string___axiom as Calculatorcommands__lines__to_string___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__get_line___axiom as Calculatorcommands__lines__get_line___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Main__TTtSP1___axiom as Main__TTtSP1___axiom

 exception Temp___exception_384
 
 let def [#"main.adb" 16 0 0][@GP_Subp:main.adb:16] 
   (__void_param : unit)
  requires { [#"main.adb" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:16 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:16 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:16 *)
  ;
  [#"main.adb" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:16 *)
  ;
  [#"main.adb" 16 0 0] try
   ( ();
   ([#"main.adb" 19 0 0] ( [#"main.adb" 19 0 0] begin ensures {true} let _ = (let _ = (let temp___369 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 19 0 0] (val _f : Calculatorcommands__lines__mystring.mystring
   ensures {[#"main.adb" 19 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Calculatorcommands__lines__mystring___axiom.default_initial_assumption { Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 22 0 0] ());
   ([#"main.adb" 22 0 0] ( [#"main.adb" 22 0 0] begin ensures {true} let _ = (let _ = (if (((Integer.length(Main__TTtSP1.first) (Main__TTtSP1.last)) > (0 : int))) then (
    [#"main.adb" 22 0 0] begin ensures {true} let _ = (let _ = (let temp___371 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 22 0 0] (val _f : Mystringtokeniser__tokenextent.tokenextent
    ensures {[#"main.adb" 22 0 0] true} 
    in _f) in (
     ( () )))
     in (
     ()))
     in () end )) in (
    ()))
    in () end ;
   [#"main.adb" 22 0 0] assume { [#"main.adb" 22 0 0] (Main__TtS___axiom.default_initial_assumption Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content False) };
   [#"main.adb" 22 0 0] assume { [#"main.adb" 22 0 0] (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content False False True True) } ));
   ([#"main.adb" 24 0 0] ( [#"main.adb" 24 0 0] assume { [#"main.adb" 24 0 0] (Standard__natural___axiom.default_initial_assumption Main__numtokens.numtokens.int__content False) };
   [#"main.adb" 24 0 0] assume { [#"main.adb" 24 0 0] (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False False True True) } ));
   ([#"main.adb" 27 0 0] ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = (let temp___372 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 27 0 0] (val _f : Memorystore__database.database
   ensures {[#"main.adb" 27 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] (Memorystore__database___axiom.default_initial_assumption { Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content } False) };
   [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content } False False True True) } ));
   ([#"main.adb" 28 0 0] ( [#"main.adb" 28 0 0] assume { [#"main.adb" 28 0 0] (Pin__pin___axiom.default_initial_assumption Main__masterpin.masterpin.int__content False) };
   [#"main.adb" 28 0 0] assume { [#"main.adb" 28 0 0] (Pin__pin___axiom.dynamic_invariant Main__masterpin.masterpin.int__content False False True True) } ));
   ([#"main.adb" 29 0 0] [#"main.adb" 29 0 0] (Main__unlocked.unlocked.bool__content <- ( (Boolean.of_int((0 : int))) )));
   ([#"main.adb" 32 0 0] ( [#"main.adb" 32 0 0] (Main__stack.stack.Array__Int__Standard__integer.map__content <- ( (Main__stack__aggregate_def.main__stack__aggregate_def((0 : int))) ));
   [#"main.adb" 32 0 0] assume { [#"main.adb" 32 0 0] (Calculatorcommands__operand_stack___axiom.dynamic_invariant Main__stack.stack.Array__Int__Standard__integer.map__content True False True True) } ));
   ([#"main.adb" 34 0 0] ( [#"main.adb" 34 0 0] (Main__stack_top.stack_top.int__content <- ( (0 : int) ));
   [#"main.adb" 34 0 0] assume { [#"main.adb" 34 0 0] (Standard__natural___axiom.dynamic_invariant Main__stack_top.stack_top.int__content True False True True) } ));
   ([#"main.adb" 44 0 0] ());
   ([#"main.adb" 57 0 0] ());
   ([#"main.adb" 72 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:38:20] ([#"main.adb" 38 0 0] ()) );
   ( [@GP_Sloc:main.adb:38:4] ([#"main.adb" 38 0 0] (if (( ([#"main.adb" 38 0 0] [#"main.adb" 38 0 0] (([@branch_id=2443] Main.spark__branch).bool__content <- ( ((Mycommandline__argument_count___axiom.argument_count(())) < (1 : int)) )));
   ( [@branch_id=2443] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:39:7] ([#"main.adb" 39 0 0] ()) );
    ( [@GP_Sloc:main.adb:39:7] ([#"main.adb" 39 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_377.temp___String_Literal_377(()))) ((1 : int)) ((30 : int))))) )) );
    ( [@GP_Sloc:main.adb:40:7] ([#"main.adb" 40 0 0] [#"main.adb" 40 0 0] raise Return__exc) ) )) else (
    ()))) );
   ( [@GP_Sloc:main.adb:44:4] ([#"main.adb" 44 0 0] ( ();
   ([#"main.adb" 45 0 0] ());
   ([#"main.adb" 45 0 0] ( (let main__B_1__arg__assume = ([#"main.adb" 45 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:B_1_declblk__arg_decl__call_argument] [@GP_Sloc:main.adb:45:45] [@vc:annotation] [@GP_Id:1] [@comment:      Arg : constant String := MyCommandLine.Argument (1);                                             ^ main.adb:45:45:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     assume {  (main__B_1__arg__assume = Main__B_1__arg.arg) }))
   ;
    assume {  (Standard__string___axiom.dynamic_invariant Main__B_1__arg.arg True False True True) } ));
   ();
   ( [@GP_Sloc:main.adb:47:7] ([#"main.adb" 47 0 0] (if (( ([#"main.adb" 47 0 0] [#"main.adb" 47 0 0] (([@branch_id=2471] Main.spark__branch).bool__content <- ( ( (( [#"main.adb" 47 0 0] begin ensures {true} let _ = (let _ = Main__B_1__arg.arg in (
    ()))
    in () end ;
   (Standard__string.length(Main__B_1__arg.arg)) ) = (4 : int)) && ( (let temp___379 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 47 0 0] (val _f : int
   in _f) in (
    (if ((Boolean.andb(((Standard__string.first(Main__B_1__arg.arg)) <= temp___379)) ((temp___379 <= (Standard__string.last(Main__B_1__arg.arg)))))) then (
     [#"main.adb" 47 0 0] begin ensures {true} let _ = (let _ = (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__B_1__arg.arg) temp___379)) in (
      (Boolean.andb(((48 : int) <= c)) ((c <= (57 : int))))))
      in (
      ()))
      in () end ))))
   ;
   [#"main.adb" 47 0 0] (val _f : bool
   ensures {[#"main.adb" 47 0 0] ( (result = True) <-> (forall temp___380 [#"main.adb" 47 0 0]  [@model_trace:2479'Index] [@name:C]  : int.
    ( ( ((Standard__string.first Main__B_1__arg.arg) <= temp___380) /\ (temp___380 <= (Standard__string.last Main__B_1__arg.arg)) ) -> (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__B_1__arg.arg) temp___380)) in (
     ( ((48 : int) <= c) /\ (c <= (57 : int)) )))
     )) )} 
   in _f) ) ) )));
   ( [@branch_id=2471] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:48:10] ([#"main.adb" 48 0 0] ()) );
    ( [@GP_Sloc:main.adb:48:26] ([#"main.adb" 48 0 0] ()) );
    ( [@GP_Sloc:main.adb:48:20] ([#"main.adb" 48 0 0] [#"main.adb" 48 0 0] (Main__masterpin.masterpin.int__content <- ( ([#"main.adb" 48 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:48:26] [@GP_Shape:B_1_declblk__if__masterpin_assign__call_from_string] [@comment:         MasterPIN := PIN.From_String (Arg);                          ^ main.adb:48:26:VC_PRECONDITION] [@vc:annotation] [@GP_Id:0] (Pin__from_string___axiom.from_string(Main__B_1__arg.arg)) )) ))) ) )) else (
    ( ();
    ( [@GP_Sloc:main.adb:50:10] ([#"main.adb" 50 0 0] ()) );
    ( [@GP_Sloc:main.adb:50:10] ([#"main.adb" 50 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_378.temp___String_Literal_378(()))) ((1 : int)) ((53 : int))))) )) );
    ( [@GP_Sloc:main.adb:51:10] ([#"main.adb" 51 0 0] [#"main.adb" 51 0 0] raise Return__exc) ) )))) ) )) );
   ( [@GP_Sloc:main.adb:56:22] ([#"main.adb" 56 0 0] ()) );
   ( [@GP_Sloc:main.adb:56:15] ([#"main.adb" 56 0 0] ()) );
   ( [@GP_Sloc:main.adb:56:15] ([#"main.adb" 56 0 0] ( (Memorystore__init___axiom.init(Main__mem.mem__split_fields)) )) );
   ( [@GP_Sloc:main.adb:57:4] ([#"main.adb" 57 0 0] ( () (* Translation of an Ada loop from main.adb:57 *)
   ;
   (if (True) then (
    [#"main.adb" 57 0 0] try
     [#"main.adb" 57 0 0] try
      ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__stack_top.stack_top.int__content in (
       ()))
       in () end ;
      (let temp___461 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : int
      ensures {[#"main.adb" 57 0 0] (result = Main__stack_top.stack_top.int__content)} 
      in _f) in (
       ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__numtokens.numtokens.int__content in (
        ()))
        in () end ;
       (let temp___460 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : int
       ensures {[#"main.adb" 57 0 0] (result = Main__numtokens.numtokens.int__content)} 
       in _f) in (
        ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__stack.stack.Array__Int__Standard__integer.map__content in (
         ()))
         in () end ;
        (let temp___459 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : Array__Int__Standard__integer.map
        ensures {[#"main.adb" 57 0 0] (result = Main__stack.stack.Array__Int__Standard__integer.map__content)} 
        in _f) in (
         ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
          ()))
          in () end ;
         (let temp___458 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : Array__Int__Mystringtokeniser__tokenextent.map
         ensures {[#"main.adb" 57 0 0] (result = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content)} 
         in _f) in (
          ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__unlocked.unlocked.bool__content in (
           ()))
           in () end ;
          (let temp___457 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : bool
          ensures {[#"main.adb" 57 0 0] (result = Main__unlocked.unlocked.bool__content)} 
          in _f) in (
           ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = { Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
            ()))
            in () end ;
           (let temp___456 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : Calculatorcommands__lines__mystring.mystring
           ensures {[#"main.adb" 57 0 0] (result = { Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content })} 
           in _f) in (
            ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = Main__masterpin.masterpin.int__content in (
             ()))
             in () end ;
            (let temp___455 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : int
            ensures {[#"main.adb" 57 0 0] (result = Main__masterpin.masterpin.int__content)} 
            in _f) in (
             ( [#"main.adb" 57 0 0] begin ensures {true} let _ = (let _ = { Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content } in (
              ()))
              in () end ;
             (let temp___454 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 57 0 0] (val _f : Memorystore__database.database
             ensures {[#"main.adb" 57 0 0] (result = { Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content })} 
             in _f) in (
              ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:57 *)
              ;
              () (* While loop translating the Ada loop from main.adb:57 *)
              ;
              [#"main.adb" 57 0 0] while True do
               ( () (* Assume implicit invariants from the loop main.adb:57 *)
               ;
               [#"main.adb" 57 0 0] assume { [#"main.adb" 57 0 0] ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content } False True True True) )/\true ) /\ (Pin__pin___axiom.dynamic_invariant Main__masterpin.masterpin.int__content False True True True) )/\true ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ true )/\true ) /\ (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content False True True True) )/\true ) /\ (Calculatorcommands__operand_stack___axiom.dynamic_invariant Main__stack.stack.Array__Int__Standard__integer.map__content True True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Main__stack_top.stack_top.int__content True True True True) )/\true ) };
               () (* Check for absence of RTE in the invariant of loop main.adb:57 *)
               ;
               () (* Loop statements appearing after the loop invariant of loop main.adb:57 *)
               ;
               ();
               ( [@GP_Sloc:main.adb:58:10] ([#"main.adb" 58 0 0] ()) );
               ( [@GP_Sloc:main.adb:58:7] ([#"main.adb" 58 0 0] (if (( ([#"main.adb" 58 0 0] [#"main.adb" 58 0 0] (([@branch_id=2512] Main.spark__branch).bool__content <- ( Main__unlocked.unlocked.bool__content )));
               ( [@branch_id=2512] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:59:10] ([#"main.adb" 59 0 0] ()) );
                ( [@GP_Sloc:main.adb:59:10] ([#"main.adb" 59 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_381.temp___String_Literal_381(()))) ((1 : int)) ((10 : int))))) )) ) )) else (
                ( ();
                ( [@GP_Sloc:main.adb:61:10] ([#"main.adb" 61 0 0] ()) );
                ( [@GP_Sloc:main.adb:61:10] ([#"main.adb" 61 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_382.temp___String_Literal_382(()))) ((1 : int)) ((8 : int))))) )) ) )))) );
               ( [@GP_Sloc:main.adb:64:23] ([#"main.adb" 64 0 0] ()) );
               ( [@GP_Sloc:main.adb:64:12] ([#"main.adb" 64 0 0] ()) );
               ( [@GP_Sloc:main.adb:64:12] ([#"main.adb" 64 0 0] ( (Calculatorcommands__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) );
               ( [@GP_Sloc:main.adb:65:24] ([#"main.adb" 65 0 0] ()) );
               ( [@GP_Sloc:main.adb:65:15] ([#"main.adb" 65 0 0] ()) );
               ( [@GP_Sloc:main.adb:65:7] ([#"main.adb" 65 0 0] (if (( ([#"main.adb" 65 0 0] [#"main.adb" 65 0 0] (([@branch_id=2525] Main.spark__branch).bool__content <- ( ((Calculatorcommands__lines__length___axiom.length({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content })) > (2048 : int)) )));
               ( [@branch_id=2525] Main.spark__branch ).bool__content )) then (
                 raise Temp___exception_384) else (
                ()))) );
               ( [@GP_Sloc:main.adb:69:7] ([#"main.adb" 69 0 0] ()) );
               ( [@GP_Sloc:main.adb:69:9] ([#"main.adb" 69 0 0] [#"main.adb" 69 0 0] (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Temp_____aggregate_def_385.temp_____aggregate_def_385({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ))) );
               ( [@GP_Sloc:main.adb:70:52] ([#"main.adb" 70 0 0] ()) );
               ( [@GP_Sloc:main.adb:70:40] ([#"main.adb" 70 0 0] ()) );
               ( [@GP_Sloc:main.adb:70:56] ([#"main.adb" 70 0 0] ()) );
               ( [@GP_Sloc:main.adb:70:59] ([#"main.adb" 70 0 0] ()) );
               ( [@GP_Sloc:main.adb:70:24] ([#"main.adb" 70 0 0] ()) );
               ( [@GP_Sloc:main.adb:70:24] ([#"main.adb" 70 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
                [#"main.adb" 70 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
                 ( ([#"main.adb" 70 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__call_tokenise] [@comment:      MyStringTokeniser.Tokenise (Lines.To_String (S), T, NumTokens);                        ^ main.adb:70:24:VC_PRECONDITION] [@GP_Id:2] [@GP_Sloc:main.adb:70:24] (Mystringtokeniser__tokenise___axiom.tokenise((Calculatorcommands__lines__to_string___axiom.to_string({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__TTtSP1.last))) (Main__numtokens.numtokens)) ));
                  (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___389 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last)) in (
                  (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___389) (Mystringtokeniser__tokenarray.first temp___389) Main__TTtSP1.first)))
                  )) )))
               ) );
               ( [@GP_Sloc:main.adb:71:10] ([#"main.adb" 71 0 0] ()) );
               ( [@GP_Sloc:main.adb:71:7] ([#"main.adb" 71 0 0] (if (( ([#"main.adb" 71 0 0] [#"main.adb" 71 0 0] (([@branch_id=2560] Main.spark__branch).bool__content <- ( (Main__numtokens.numtokens.int__content <> (0 : int)) )));
               ( [@branch_id=2560] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:72:10] ([#"main.adb" 72 0 0] ( ();
                ([#"main.adb" 73 0 0] ());
                ([#"main.adb" 73 0 0] ());
                ([#"main.adb" 73 0 0] ( (let main__B_3__cmd__assume = (Calculatorcommands__get_token_string___axiom.get_token_string({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))))) in (
                 [#"main.adb" 73 0 0] assume { [#"main.adb" 73 0 0] (main__B_3__cmd__assume = Main__B_3__cmd.cmd) }))
                ;
                [#"main.adb" 73 0 0] assume { [#"main.adb" 73 0 0] (Standard__string___axiom.dynamic_invariant Main__B_3__cmd.cmd True False True True) } ));
                ();
                ( [@GP_Sloc:main.adb:75:13] ([#"main.adb" 75 0 0] (if (( ([#"main.adb" 75 0 0] [#"main.adb" 75 0 0] (([@branch_id=2583] Main.spark__branch).bool__content <- ( (( [#"main.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__B_3__cmd.cmd in (
                 ()))
                 in () end ;
                (Standard__string.length(Main__B_3__cmd.cmd)) ) > (20 : int)) )));
                ( [@branch_id=2583] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:76:16] ([#"main.adb" 76 0 0] ()) );
                 ( [@GP_Sloc:main.adb:76:16] ([#"main.adb" 76 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_390.temp___String_Literal_390(()))) ((1 : int)) ((17 : int))))) )) ) )) else (
                 ( [@GP_Sloc:main.adb:77:13] (if (( ([#"main.adb" 77 0 0] [#"main.adb" 77 0 0] (([@branch_id=2593] Main.spark__branch).bool__content <- ( (let temp___452 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_449.temp___String_Literal_449(())) in (
                  (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___452) ((1 : int)) ((6 : int)))))
                  )));
                 ( [@branch_id=2593] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:78:23] ([#"main.adb" 78 0 0] ()) );
                  ( [@GP_Sloc:main.adb:78:16] ([#"main.adb" 78 0 0] (if (( ([#"main.adb" 78 0 0] [#"main.adb" 78 0 0] (([@branch_id=2596] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                  ( [@branch_id=2596] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:79:34] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:37] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:40] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:51] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:61] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:19] ([#"main.adb" 79 0 0] ()) );
                   ( [@GP_Sloc:main.adb:79:19] ([#"main.adb" 79 0 0] ( (Calculatorcommands__handle_unlock___axiom.handle_unlock({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__masterpin.masterpin.int__content) (Main__unlocked.unlocked) (Main__numtokens.numtokens.int__content)) )) ) )) else (
                   ( ();
                   ( [@GP_Sloc:main.adb:81:19] ([#"main.adb" 81 0 0] ()) );
                   ( [@GP_Sloc:main.adb:81:19] ([#"main.adb" 81 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_448.temp___String_Literal_448(()))) ((1 : int)) ((17 : int))))) )) ) )))) ) )) else (
                  ( [@GP_Sloc:main.adb:84:13] (if (( ([#"main.adb" 84 0 0] [#"main.adb" 84 0 0] (([@branch_id=2610] Main.spark__branch).bool__content <- ( (let temp___447 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_444.temp___String_Literal_444(())) in (
                   (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___447) ((1 : int)) ((4 : int)))))
                   )));
                  ( [@branch_id=2610] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:85:19] ([#"main.adb" 85 0 0] ()) );
                   ( [@GP_Sloc:main.adb:85:16] ([#"main.adb" 85 0 0] (if (( ([#"main.adb" 85 0 0] [#"main.adb" 85 0 0] (([@branch_id=2613] Main.spark__branch).bool__content <- ( Main__unlocked.unlocked.bool__content )));
                   ( [@branch_id=2613] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:86:32] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:35] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:38] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:49] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:59] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:19] ([#"main.adb" 86 0 0] ()) );
                    ( [@GP_Sloc:main.adb:86:19] ([#"main.adb" 86 0 0] ( (Calculatorcommands__handle_lock___axiom.handle_lock({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__masterpin.masterpin) (Main__unlocked.unlocked) (Main__numtokens.numtokens.int__content)) )) ) )) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:88:19] ([#"main.adb" 88 0 0] ()) );
                    ( [@GP_Sloc:main.adb:88:19] ([#"main.adb" 88 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_443.temp___String_Literal_443(()))) ((1 : int)) ((15 : int))))) )) ) )))) ) )) else (
                   ( [@GP_Sloc:main.adb:91:13] (if (( ([#"main.adb" 91 0 0] [#"main.adb" 91 0 0] (([@branch_id=2626] Main.spark__branch).bool__content <- ( (let temp___442 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_439.temp___String_Literal_439(())) in (
                    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___442) ((1 : int)) ((5 : int)))))
                    )));
                   ( [@branch_id=2626] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:92:23] ([#"main.adb" 92 0 0] ()) );
                    ( [@GP_Sloc:main.adb:92:16] ([#"main.adb" 92 0 0] (if (( ([#"main.adb" 92 0 0] [#"main.adb" 92 0 0] (([@branch_id=2629] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                    ( [@branch_id=2629] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:93:19] ([#"main.adb" 93 0 0] ()) );
                     ( [@GP_Sloc:main.adb:93:19] ([#"main.adb" 93 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_438.temp___String_Literal_438(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                     ( ();
                     ( [@GP_Sloc:main.adb:95:33] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:36] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:39] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:46] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:57] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:19] ([#"main.adb" 95 0 0] ()) );
                     ( [@GP_Sloc:main.adb:95:19] ([#"main.adb" 95 0 0] ( (Calculatorcommands__handle_push1___axiom.handle_push1({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__stack.stack) (Main__stack_top.stack_top) (Main__numtokens.numtokens.int__content)) )) ) )))) ) )) else (
                    ( [@GP_Sloc:main.adb:98:13] (if (( ([#"main.adb" 98 0 0] [#"main.adb" 98 0 0] (([@branch_id=2643] Main.spark__branch).bool__content <- ( (let temp___437 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_434.temp___String_Literal_434(())) in (
                     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___437) ((1 : int)) ((5 : int)))))
                     )));
                    ( [@branch_id=2643] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:99:23] ([#"main.adb" 99 0 0] ()) );
                     ( [@GP_Sloc:main.adb:99:16] ([#"main.adb" 99 0 0] (if (( ([#"main.adb" 99 0 0] [#"main.adb" 99 0 0] (([@branch_id=2646] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                     ( [@branch_id=2646] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:main.adb:100:19] ([#"main.adb" 100 0 0] ()) );
                      ( [@GP_Sloc:main.adb:100:19] ([#"main.adb" 100 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_433.temp___String_Literal_433(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                      ( ();
                      ( [@GP_Sloc:main.adb:102:33] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:36] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:39] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:46] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:57] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:19] ([#"main.adb" 102 0 0] ()) );
                      ( [@GP_Sloc:main.adb:102:19] ([#"main.adb" 102 0 0] ( (Calculatorcommands__handle_push2___axiom.handle_push2({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__stack.stack) (Main__stack_top.stack_top) (Main__numtokens.numtokens.int__content)) )) ) )))) ) )) else (
                     ( [@GP_Sloc:main.adb:115:13] (if (( ([#"main.adb" 115 0 0] [#"main.adb" 115 0 0] (([@branch_id=2660] Main.spark__branch).bool__content <- ( (let temp___432 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_429.temp___String_Literal_429(())) in (
                      (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___432) ((1 : int)) ((3 : int)))))
                      )));
                     ( [@branch_id=2660] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:main.adb:116:23] ([#"main.adb" 116 0 0] ()) );
                      ( [@GP_Sloc:main.adb:116:16] ([#"main.adb" 116 0 0] (if (( ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (([@branch_id=2663] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                      ( [@branch_id=2663] Main.spark__branch ).bool__content )) then (
                       ( ();
                       ( [@GP_Sloc:main.adb:117:19] ([#"main.adb" 117 0 0] ()) );
                       ( [@GP_Sloc:main.adb:117:19] ([#"main.adb" 117 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_428.temp___String_Literal_428(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                       ( ();
                       ( [@GP_Sloc:main.adb:119:31] ([#"main.adb" 119 0 0] ()) );
                       ( [@GP_Sloc:main.adb:119:38] ([#"main.adb" 119 0 0] ()) );
                       ( [@GP_Sloc:main.adb:119:49] ([#"main.adb" 119 0 0] ()) );
                       ( [@GP_Sloc:main.adb:119:19] ([#"main.adb" 119 0 0] ()) );
                       ( [@GP_Sloc:main.adb:119:19] ([#"main.adb" 119 0 0] ( (Calculatorcommands__handle_pop___axiom.handle_pop(Main__stack.stack) (Main__stack_top.stack_top) (Main__numtokens.numtokens.int__content)) )) ) )))) ) )) else (
                      ( [@GP_Sloc:main.adb:122:13] (if (( ([#"main.adb" 122 0 0] [#"main.adb" 122 0 0] (([@branch_id=2675] Main.spark__branch).bool__content <- ( (let temp___427 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_424.temp___String_Literal_424(())) in (
                       (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___427) ((1 : int)) ((1 : int)))))
                       )));
                      ( [@branch_id=2675] Main.spark__branch ).bool__content )) then (
                       ( ();
                       ( [@GP_Sloc:main.adb:123:23] ([#"main.adb" 123 0 0] ()) );
                       ( [@GP_Sloc:main.adb:123:16] ([#"main.adb" 123 0 0] (if (( ([#"main.adb" 123 0 0] [#"main.adb" 123 0 0] (([@branch_id=2678] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                       ( [@branch_id=2678] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:124:19] ([#"main.adb" 124 0 0] ()) );
                        ( [@GP_Sloc:main.adb:124:19] ([#"main.adb" 124 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_423.temp___String_Literal_423(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                        ( ();
                        ( [@GP_Sloc:main.adb:126:31] ([#"main.adb" 126 0 0] ()) );
                        ( [@GP_Sloc:main.adb:126:38] ([#"main.adb" 126 0 0] ()) );
                        ( [@GP_Sloc:main.adb:126:49] ([#"main.adb" 126 0 0] ()) );
                        ( [@GP_Sloc:main.adb:126:19] ([#"main.adb" 126 0 0] ()) );
                        ( [@GP_Sloc:main.adb:126:19] ([#"main.adb" 126 0 0] ( ([#"main.adb" 126 0 0] ( [@GP_Id:10] [@GP_Reason:VC_PRECONDITION] [@comment:                  Handle_Add (Stack, Stack_Top, Unlocked);                   ^ main.adb:126:19:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_add] [@GP_Sloc:main.adb:126:19] (Calculatorcommands__handle_add___axiom.handle_add(Main__stack.stack) (Main__stack_top.stack_top) (Main__unlocked.unlocked.bool__content)) )) )) ) )))) ) )) else (
                       ( [@GP_Sloc:main.adb:129:13] (if (( ([#"main.adb" 129 0 0] [#"main.adb" 129 0 0] (([@branch_id=2690] Main.spark__branch).bool__content <- ( (let temp___422 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_419.temp___String_Literal_419(())) in (
                        (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___422) ((1 : int)) ((1 : int)))))
                        )));
                       ( [@branch_id=2690] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:130:23] ([#"main.adb" 130 0 0] ()) );
                        ( [@GP_Sloc:main.adb:130:16] ([#"main.adb" 130 0 0] (if (( ([#"main.adb" 130 0 0] [#"main.adb" 130 0 0] (([@branch_id=2693] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                        ( [@branch_id=2693] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:main.adb:131:19] ([#"main.adb" 131 0 0] ()) );
                         ( [@GP_Sloc:main.adb:131:19] ([#"main.adb" 131 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_418.temp___String_Literal_418(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                         ( ();
                         ( [@GP_Sloc:main.adb:133:36] ([#"main.adb" 133 0 0] ()) );
                         ( [@GP_Sloc:main.adb:133:43] ([#"main.adb" 133 0 0] ()) );
                         ( [@GP_Sloc:main.adb:133:54] ([#"main.adb" 133 0 0] ()) );
                         ( [@GP_Sloc:main.adb:133:19] ([#"main.adb" 133 0 0] ()) );
                         ( [@GP_Sloc:main.adb:133:19] ([#"main.adb" 133 0 0] ( ([#"main.adb" 133 0 0] ( [@comment:                  Handle_Subtract (Stack, Stack_Top, Unlocked);                   ^ main.adb:133:19:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:133:19] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_subtract] [@GP_Id:9] (Calculatorcommands__handle_subtract___axiom.handle_subtract(Main__stack.stack) (Main__stack_top.stack_top) (Main__unlocked.unlocked.bool__content)) )) )) ) )))) ) )) else (
                        ( [@GP_Sloc:main.adb:136:13] (if (( ([#"main.adb" 136 0 0] [#"main.adb" 136 0 0] (([@branch_id=2705] Main.spark__branch).bool__content <- ( (let temp___417 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_414.temp___String_Literal_414(())) in (
                         (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___417) ((1 : int)) ((1 : int)))))
                         )));
                        ( [@branch_id=2705] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:main.adb:137:23] ([#"main.adb" 137 0 0] ()) );
                         ( [@GP_Sloc:main.adb:137:16] ([#"main.adb" 137 0 0] (if (( ([#"main.adb" 137 0 0] [#"main.adb" 137 0 0] (([@branch_id=2708] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                         ( [@branch_id=2708] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:138:19] ([#"main.adb" 138 0 0] ()) );
                          ( [@GP_Sloc:main.adb:138:19] ([#"main.adb" 138 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_413.temp___String_Literal_413(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                          ( ();
                          ( [@GP_Sloc:main.adb:140:36] ([#"main.adb" 140 0 0] ()) );
                          ( [@GP_Sloc:main.adb:140:43] ([#"main.adb" 140 0 0] ()) );
                          ( [@GP_Sloc:main.adb:140:54] ([#"main.adb" 140 0 0] ()) );
                          ( [@GP_Sloc:main.adb:140:19] ([#"main.adb" 140 0 0] ()) );
                          ( [@GP_Sloc:main.adb:140:19] ([#"main.adb" 140 0 0] ( ([#"main.adb" 140 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_multiply] [@GP_Sloc:main.adb:140:19] [@GP_Id:8] [@comment:                  Handle_Multiply (Stack, Stack_Top, Unlocked);                   ^ main.adb:140:19:VC_PRECONDITION] (Calculatorcommands__handle_multiply___axiom.handle_multiply(Main__stack.stack) (Main__stack_top.stack_top) (Main__unlocked.unlocked.bool__content)) )) )) ) )))) ) )) else (
                         ( [@GP_Sloc:main.adb:143:13] (if (( ([#"main.adb" 143 0 0] [#"main.adb" 143 0 0] (([@branch_id=2720] Main.spark__branch).bool__content <- ( (let temp___412 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_409.temp___String_Literal_409(())) in (
                          (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___412) ((1 : int)) ((1 : int)))))
                          )));
                         ( [@branch_id=2720] Main.spark__branch ).bool__content )) then (
                          ( ();
                          ( [@GP_Sloc:main.adb:144:23] ([#"main.adb" 144 0 0] ()) );
                          ( [@GP_Sloc:main.adb:144:16] ([#"main.adb" 144 0 0] (if (( ([#"main.adb" 144 0 0] [#"main.adb" 144 0 0] (([@branch_id=2723] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                          ( [@branch_id=2723] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:145:19] ([#"main.adb" 145 0 0] ()) );
                           ( [@GP_Sloc:main.adb:145:19] ([#"main.adb" 145 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_408.temp___String_Literal_408(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                           ( ();
                           ( [@GP_Sloc:main.adb:147:34] ([#"main.adb" 147 0 0] ()) );
                           ( [@GP_Sloc:main.adb:147:41] ([#"main.adb" 147 0 0] ()) );
                           ( [@GP_Sloc:main.adb:147:52] ([#"main.adb" 147 0 0] ()) );
                           ( [@GP_Sloc:main.adb:147:19] ([#"main.adb" 147 0 0] ()) );
                           ( [@GP_Sloc:main.adb:147:19] ([#"main.adb" 147 0 0] ( ([#"main.adb" 147 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:147:19] [@comment:                  Handle_Divide (Stack, Stack_Top, Unlocked);                   ^ main.adb:147:19:VC_PRECONDITION] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_divide] [@GP_Id:7] (Calculatorcommands__handle_divide___axiom.handle_divide(Main__stack.stack) (Main__stack_top.stack_top) (Main__unlocked.unlocked.bool__content)) )) )) ) )))) ) )) else (
                          ( [@GP_Sloc:main.adb:150:13] (if (( ([#"main.adb" 150 0 0] [#"main.adb" 150 0 0] (([@branch_id=2735] Main.spark__branch).bool__content <- ( (let temp___407 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_404.temp___String_Literal_404(())) in (
                           (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___407) ((1 : int)) ((7 : int)))))
                           )));
                          ( [@branch_id=2735] Main.spark__branch ).bool__content )) then (
                           ( ();
                           ( [@GP_Sloc:main.adb:151:23] ([#"main.adb" 151 0 0] ()) );
                           ( [@GP_Sloc:main.adb:151:16] ([#"main.adb" 151 0 0] (if (( ([#"main.adb" 151 0 0] [#"main.adb" 151 0 0] (([@branch_id=2738] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                           ( [@branch_id=2738] Main.spark__branch ).bool__content )) then (
                            ( ();
                            ( [@GP_Sloc:main.adb:152:19] ([#"main.adb" 152 0 0] ()) );
                            ( [@GP_Sloc:main.adb:152:19] ([#"main.adb" 152 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_403.temp___String_Literal_403(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                            ( ();
                            ( [@GP_Sloc:main.adb:155:22] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:25] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:28] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:35] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:46] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:56] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:155:67] ([#"main.adb" 155 0 0] ()) );
                            ( [@GP_Sloc:main.adb:154:19] ([#"main.adb" 154 0 0] ()) );
                            ( [@GP_Sloc:main.adb:154:19] ([#"main.adb" 154 0 0] ( ([#"main.adb" 154 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:154:19] [@comment:                  Handle_StoreTo                   ^ main.adb:154:19:VC_PRECONDITION] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_storeto] [@GP_Id:6] (Calculatorcommands__handle_storeto___axiom.handle_storeto({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__stack.stack) (Main__stack_top.stack_top) (Main__unlocked.unlocked.bool__content) (Main__numtokens.numtokens.int__content) (Main__mem.mem__split_fields)) )) )) ) )))) ) )) else (
                           ( [@GP_Sloc:main.adb:158:13] (if (( ([#"main.adb" 158 0 0] [#"main.adb" 158 0 0] (([@branch_id=2754] Main.spark__branch).bool__content <- ( (let temp___402 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_399.temp___String_Literal_399(())) in (
                            (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___402) ((1 : int)) ((4 : int)))))
                            )));
                           ( [@branch_id=2754] Main.spark__branch ).bool__content )) then (
                            ( ();
                            ( [@GP_Sloc:main.adb:159:23] ([#"main.adb" 159 0 0] ()) );
                            ( [@GP_Sloc:main.adb:159:16] ([#"main.adb" 159 0 0] (if (( ([#"main.adb" 159 0 0] [#"main.adb" 159 0 0] (([@branch_id=2757] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                            ( [@branch_id=2757] Main.spark__branch ).bool__content )) then (
                             ( ();
                             ( [@GP_Sloc:main.adb:160:19] ([#"main.adb" 160 0 0] ()) );
                             ( [@GP_Sloc:main.adb:160:19] ([#"main.adb" 160 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_398.temp___String_Literal_398(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                             ( ();
                             ( [@GP_Sloc:main.adb:162:32] ([#"main.adb" 162 0 0] ()) );
                             ( [@GP_Sloc:main.adb:162:42] ([#"main.adb" 162 0 0] ()) );
                             ( [@GP_Sloc:main.adb:162:53] ([#"main.adb" 162 0 0] ()) );
                             ( [@GP_Sloc:main.adb:162:19] ([#"main.adb" 162 0 0] ()) );
                             ( [@GP_Sloc:main.adb:162:19] ([#"main.adb" 162 0 0] ( ([#"main.adb" 162 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:162:19] [@comment:                  Handle_List (Unlocked, NumTokens, Mem);                   ^ main.adb:162:19:VC_PRECONDITION] [@GP_Id:5] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_list] (Calculatorcommands__handle_list___axiom.handle_list(Main__unlocked.unlocked.bool__content) (Main__numtokens.numtokens.int__content) ({ Memorystore__database.__split_fields = Main__mem.mem__split_fields.Memorystore__database.__split_fields__content })) )) )) ) )))) ) )) else (
                            ( [@GP_Sloc:main.adb:165:13] (if (( ([#"main.adb" 165 0 0] [#"main.adb" 165 0 0] (([@branch_id=2769] Main.spark__branch).bool__content <- ( (let temp___397 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_394.temp___String_Literal_394(())) in (
                             (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))) (temp___397) ((1 : int)) ((6 : int)))))
                             )));
                            ( [@branch_id=2769] Main.spark__branch ).bool__content )) then (
                             ( ();
                             ( [@GP_Sloc:main.adb:166:23] ([#"main.adb" 166 0 0] ()) );
                             ( [@GP_Sloc:main.adb:166:16] ([#"main.adb" 166 0 0] (if (( ([#"main.adb" 166 0 0] [#"main.adb" 166 0 0] (([@branch_id=2772] Main.spark__branch).bool__content <- ( not ( Main__unlocked.unlocked.bool__content ) )));
                             ( [@branch_id=2772] Main.spark__branch ).bool__content )) then (
                              ( ();
                              ( [@GP_Sloc:main.adb:167:19] ([#"main.adb" 167 0 0] ()) );
                              ( [@GP_Sloc:main.adb:167:19] ([#"main.adb" 167 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_393.temp___String_Literal_393(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
                              ( ();
                              ( [@GP_Sloc:main.adb:169:34] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:37] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:40] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:50] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:61] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:19] ([#"main.adb" 169 0 0] ()) );
                              ( [@GP_Sloc:main.adb:169:19] ([#"main.adb" 169 0 0] ( ([#"main.adb" 169 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:169:19] [@comment:                  Handle_Remove (S, T, Unlocked, NumTokens, Mem);                   ^ main.adb:169:19:VC_PRECONDITION] [@GP_Id:4] [@GP_Shape:L_2_loop__if__B_3_declblk__if__if__call_handle_remove] (Calculatorcommands__handle_remove___axiom.handle_remove({ Calculatorcommands__lines__mystring.__split_fields = Main__s.s__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }) ((Mystringtokeniser__tokenarray.of_array(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last))) (Main__unlocked.unlocked.bool__content) (Main__numtokens.numtokens.int__content) (Main__mem.mem__split_fields)) )) )) ) )))) ) )) else (
                             ( ();
                             ( [@GP_Sloc:main.adb:172:16] ([#"main.adb" 172 0 0] ()) );
                             ( [@GP_Sloc:main.adb:172:16] ([#"main.adb" 172 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___392 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_391.temp___String_Literal_391(())) in (
                              (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___392) ((1 : int)) ((17 : int)) ((Standard__string.to_array(Main__B_3__cmd.cmd))) ((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd))))) ((1 : int)) (([#"main.adb" 172 0 0] ( [@GP_Shape:L_2_loop__if__B_3_declblk__if__call_put_line__2__concat] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:172:46] [@comment:               Put_Line ("Unknown command: " & Cmd);                                              ^ main.adb:172:46:VC_RANGE_CHECK] [@GP_Id:3] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((17 : int))) + (Integer.length((Standard__string.first(Main__B_3__cmd.cmd))) ((Standard__string.last(Main__B_3__cmd.cmd)))))) - (1 : int)))) ))))))
                             )) )) ) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) )))) ) )) ) )) else (
                ( ();
                ( [@GP_Sloc:main.adb:177:10] ([#"main.adb" 177 0 0] ()) );
                ( [@GP_Sloc:main.adb:177:10] ([#"main.adb" 177 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_453.temp___String_Literal_453(()))) ((1 : int)) ((19 : int))))) )) ) )))) );
               () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:57 *)
               ;
               (if (False) then (
                 raise Main__L_2.L_2)) )
              done )))
              )))
             )))
            )))
           )))
          )))
         )))
        )))
       )
     with
      Temp___exception_384 -> ( ();
      ( [@GP_Sloc:main.adb:66:10] ([#"main.adb" 66 0 0] ()) );
      ( [@GP_Sloc:main.adb:66:10] ([#"main.adb" 66 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_383.temp___String_Literal_383(()))) ((1 : int)) ((22 : int))))) )) );
      ( [@GP_Sloc:main.adb:67:10] ([#"main.adb" 67 0 0] [#"main.adb" 67 0 0] raise Return__exc) ) )
     end
    with
     Main__L_2.L_2 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
