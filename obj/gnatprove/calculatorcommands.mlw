(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 14 0 0][@model_trace:26160] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__mystring__T13s.t13s) : int =
  (Calculatorcommands__lines__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__mystring__T13s.t13s, 
 predicate in_range = Calculatorcommands__lines__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__TmystringstrD1.tmystringstrD1) : int =
  (Calculatorcommands__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Calculatorcommands__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:12, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystringstr as Calculatorcommands__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__calculatorcommands__lines__mystring__length [@name:Length] [@model_trace:.26069] : Calculatorcommands__lines__mystring__T13s.t13s; rec__calculatorcommands__lines__mystring__str [@model_trace:.26084] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__calculatorcommands__lines__mystring__length__projection [@name:Length] [@model_trace:.26069] 
   (a : __split_fields) : Calculatorcommands__lines__mystring__T13s.t13s =
  a.rec__calculatorcommands__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 function __split_fields_rec__calculatorcommands__lines__mystring__str__projection [@model_trace:.26084] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__calculatorcommands__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate calculatorcommands__lines__mystring__length__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__length__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__length_ 
   (a : __rep) : Calculatorcommands__lines__mystring__T13s.t13s
  requires {  (calculatorcommands__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__length) }
 
 predicate calculatorcommands__lines__mystring__str__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__str__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (calculatorcommands__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep a.__split_fields.rec__calculatorcommands__lines__mystring__length) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep b.__split_fields.rec__calculatorcommands__lines__mystring__length)) /\ (Calculatorcommands__lines__mystringstr.bool_eq a.__split_fields.rec__calculatorcommands__lines__mystring__str b.__split_fields.rec__calculatorcommands__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring
 use export Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__length__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__position 
   : int

 
 axiom calculatorcommands__lines__mystring__length__first__bit_axiom :
  ((calculatorcommands__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__length__last__bit_axiom :
  ((calculatorcommands__lines__mystring__length__last__bit ) > (calculatorcommands__lines__mystring__length__first__bit ))
 
 axiom calculatorcommands__lines__mystring__length__position_axiom :
  ((calculatorcommands__lines__mystring__length__position ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__str__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__position 
   : int

 
 axiom calculatorcommands__lines__mystring__str__first__bit_axiom :
  ((calculatorcommands__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__str__last__bit_axiom :
  ((calculatorcommands__lines__mystring__str__last__bit ) > (calculatorcommands__lines__mystring__str__first__bit ))
 
 axiom calculatorcommands__lines__mystring__str__position_axiom :
  ((calculatorcommands__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 20 0 0][@model_projected] [@model_trace:25768] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 35 0 0][@model_projected] [@name:M] [@model_trace:25919] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:24 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 24 0 0][@model_projected] [@model_trace:25802] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:24 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:24 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Calculatorcommands__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Calculatorcommands__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m1 [#"mystring.ads" 28 0 0][@model_projected] [@name:M1] [@model_trace:25821] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m2 [#"mystring.ads" 28 0 0][@model_projected] [@model_trace:25830] [@name:M2] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function less 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m1 [#"mystring.ads" 30 0 0][@model_trace:25885] [@model_projected] [@name:M1] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m2 [#"mystring.ads" 30 0 0][@model_trace:25894] [@model_projected] [@name:M2] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at mystring.ads:33 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 42 0 0][@model_trace:26005] [@model_projected] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 42 0 0][@model_trace:26014] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function get 
   (m : Calculatorcommands__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Calculatorcommands__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function equal 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 38 0 0][@model_trace:25961] [@model_projected] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 38 0 0][@model_trace:25970] [@name:From] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 38 0 0][@model_trace:25979] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function substring 
   (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int) : Calculatorcommands__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Calculatorcommands__lines__mystring.mystring) (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__T18s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content : t18s }
 
 function t18s__ref_t18s__content__projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref_t18s__content__projection
 
 meta "inline:no" function t18s__ref_t18s__content__projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__T19s
 use export Calculatorcommands__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t19s =
  tmystringstrB
 
 type t19s__ref =
  { mutable t19s__content : t19s }
 
 function t19s__ref_t19s__content__projection 
   (a : t19s__ref) : t19s =
  a.t19s__content
 
 meta "model_projection" function t19s__ref_t19s__content__projection
 
 meta "inline:no" function t19s__ref_t19s__content__projection
 
 val t19s__havoc 
   (x : t19s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS21sP1" defined at mystring.adb:27 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__TS21sP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS21sP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS21sP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS21sP1__ref =
  { mutable tS21sP1__content : tS21sP1 }
 
 function tS21sP1__ref_tS21sP1__content__projection 
   (a : tS21sP1__ref) : tS21sP1 =
  a.tS21sP1__content
 
 meta "model_projection" function tS21sP1__ref_tS21sP1__content__projection
 
 meta "inline:no" function tS21sP1__ref_tS21sP1__content__projection
 
 val tS21sP1__havoc 
   (x : tS21sP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S21s" defined at mystring.adb:27 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__S21s
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s21s =
  string
 
 type s21s__ref =
  { mutable s21s__content : s21s }
 
 function s21s__ref_s21s__content__projection 
   (a : s21s__ref) : s21s =
  a.s21s__content
 
 meta "model_projection" function s21s__ref_s21s__content__projection
 
 meta "inline:no" function s21s__ref_s21s__content__projection
 
 val s21s__havoc 
   (x : s21s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T22s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T22s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t22s =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t22s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t22s__ref =
  { mutable t22s__content : t22s }
 
 function t22s__ref_t22s__content__projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref_t22s__content__projection
 
 meta "inline:no" function t22s__ref_t22s__content__projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T22s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T22s__rep
 use        Calculatorcommands__lines__from_string__T22s as Calculatorcommands__lines__from_string__T22s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__from_string__T22s.t22s) : int =
  (Calculatorcommands__lines__from_string__T22s.t22s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__from_string__T22s.t22s, 
 predicate in_range = Calculatorcommands__lines__from_string__T22s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T23s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T23s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24s" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__L_1__T24s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t24s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t24s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24s__ref =
  { mutable t24s__content : t24s }
 
 function t24s__ref_t24s__content__projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref_t24s__content__projection
 
 meta "inline:no" function t24s__ref_t24s__content__projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T35s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L_3__L34s__T35s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t35s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t35s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t35s__ref =
  { mutable t35s__content : t35s }
 
 function t35s__ref_t35s__content__projection 
   (a : t35s__ref) : t35s =
  a.t35s__content
 
 meta "model_projection" function t35s__ref_t35s__content__projection
 
 meta "inline:no" function t35s__ref_t35s__content__projection
 
 val t35s__havoc 
   (x : t35s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T33s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L_3__L32s__T33s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t33s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t33s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t33s__ref =
  { mutable t33s__content : t33s }
 
 function t33s__ref_t33s__content__projection 
   (a : t33s__ref) : t33s =
  a.t33s__content
 
 meta "model_projection" function t33s__ref_t33s__content__projection
 
 meta "inline:no" function t33s__ref_t33s__content__projection
 
 val t33s__havoc 
   (x : t33s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T38s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T38s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t38s =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t38s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t38s__ref =
  { mutable t38s__content : t38s }
 
 function t38s__ref_t38s__content__projection 
   (a : t38s__ref) : t38s =
  a.t38s__content
 
 meta "model_projection" function t38s__ref_t38s__content__projection
 
 meta "inline:no" function t38s__ref_t38s__content__projection
 
 val t38s__havoc 
   (x : t38s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T38s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T38s__rep
 use        Calculatorcommands__lines__substring__T38s as Calculatorcommands__lines__substring__T38s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__substring__T38s.t38s) : int =
  (Calculatorcommands__lines__substring__T38s.t38s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__substring__T38s.t38s, 
 predicate in_range = Calculatorcommands__lines__substring__T38s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T39s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T39s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40s" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__L_4__T40s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t40s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t40s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t40s__ref =
  { mutable t40s__content : t40s }
 
 function t40s__ref_t40s__content__projection 
   (a : t40s__ref) : t40s =
  a.t40s__content
 
 meta "model_projection" function t40s__ref_t40s__content__projection
 
 meta "inline:no" function t40s__ref_t40s__content__projection
 
 val t40s__havoc 
   (x : t40s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Toperand_stackD1" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type toperand_stackD1 =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = toperand_stackD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toperand_stackD1__ref =
  { mutable toperand_stackD1__content : toperand_stackD1 }
 
 function toperand_stackD1__ref_toperand_stackD1__content__projection 
   (a : toperand_stackD1__ref) : toperand_stackD1 =
  a.toperand_stackD1__content
 
 meta "model_projection" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 meta "inline:no" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 val toperand_stackD1__havoc 
   (x : toperand_stackD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Toperand_stackD1" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__Toperand_stackD1.toperand_stackD1) : int =
  (Calculatorcommands__Toperand_stackD1.toperand_stackD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__Toperand_stackD1.toperand_stackD1, 
 predicate in_range = Calculatorcommands__Toperand_stackD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:14, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_163   : int.
   (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_163)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_163   : int.
    (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_163)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:14, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:14, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Toperand_stackB" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__Toperand_stackD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type toperand_stackB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type toperand_stackB__ref =
  { mutable toperand_stackB__content : toperand_stackB }
 
 function toperand_stackB__ref_toperand_stackB__content__projection 
   (a : toperand_stackB__ref) : toperand_stackB =
  a.toperand_stackB__content
 
 meta "model_projection" function toperand_stackB__ref_toperand_stackB__content__projection
 
 meta "inline:no" function toperand_stackB__ref_toperand_stackB__content__projection
 
 val toperand_stackB__havoc 
   (x : toperand_stackB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "operand_stack" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__operand_stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 16 0 0][@model_projected] [@name:S] [@model_trace:3060] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@model_trace:.3373] [@name:Start] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@name:Length] [@model_trace:.3383] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@model_trace:.3373] [@name:Start] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@name:Length] [@model_trace:.3383] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_164   : int.
   (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_164   : int.
    (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for defining the constant "t" defined at calculatorcommands.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 17 0 0][@model_projected] [@model_trace:3071] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "masterpin" defined at calculatorcommands.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant masterpin [#"calculatorcommands.ads" 18 0 0][@model_trace:3082] [@name:MasterPIN] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 22 0 0][@model_projected] [@name:S] [@model_trace:3111] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 23 0 0][@model_projected] [@model_trace:3122] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 28 0 0][@model_projected] [@model_trace:3162] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 29 0 0][@model_trace:3173] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 30 0 0][@name:Unlocked] [@model_trace:3184] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 35 0 0][@model_trace:3220] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "tok" defined at calculatorcommands.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__tok
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val constant tok [#"calculatorcommands.ads" 35 0 0][@name:Tok] [@model_projected] [@model_trace:3231] 
   : Mystringtokeniser__tokenextent.tokenextent

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tok" defined at calculatorcommands.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__tok___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_token_string" defined at calculatorcommands.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__get_token_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val function get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
 
 val predicate get_token_string__function_guard 
   (temp___result_165 : Standard__string.string) (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent)

end

(* Module for axiomatizing type "TS1bP1" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__S1b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  tokenarray
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at calculatorcommands.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:10236] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "rawpin" defined at calculatorcommands.adb:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__B_1__rawpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawpin [#"calculatorcommands.adb" 21 0 0][@model_trace:2407] [@model_projected] [@name:RawPIN] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "c" defined at calculatorcommands.adb:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__B_1__L3b__c
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant c [#"calculatorcommands.adb" 24 0 0][@model_trace:2431] [@name:C] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at calculatorcommands.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__B_1__L3b__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T4b" defined at calculatorcommands.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (46 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at calculatorcommands.adb:28, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_projected] [@model_trace:3279] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_167 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "T6b" defined at calculatorcommands.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7b" defined at calculatorcommands.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS8bP1" defined at calculatorcommands.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__TS8bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS8bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS8bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS8bP1__ref =
  { mutable tS8bP1__content : tS8bP1 }
 
 function tS8bP1__ref_tS8bP1__content__projection 
   (a : tS8bP1__ref) : tS8bP1 =
  a.tS8bP1__content
 
 meta "model_projection" function tS8bP1__ref_tS8bP1__content__projection
 
 meta "inline:no" function tS8bP1__ref_tS8bP1__content__projection
 
 val tS8bP1__havoc 
   (x : tS8bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S8b" defined at calculatorcommands.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__S8b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s8b =
  tokenarray
 
 type s8b__ref =
  { mutable s8b__content : s8b }
 
 function s8b__ref_s8b__content__projection 
   (a : s8b__ref) : s8b =
  a.s8b__content
 
 meta "model_projection" function s8b__ref_s8b__content__projection
 
 meta "inline:no" function s8b__ref_s8b__content__projection
 
 val s8b__havoc 
   (x : s8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at calculatorcommands.adb:46, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawpin" defined at calculatorcommands.adb:49, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__B_2__rawpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawpin [#"calculatorcommands.adb" 49 0 0][@model_trace:2553] [@model_projected] [@name:RawPIN] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "c" defined at calculatorcommands.adb:52, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__B_2__L10b__c
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant c [#"calculatorcommands.adb" 52 0 0][@name:C] [@model_trace:2577] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at calculatorcommands.adb:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__B_2__L10b__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T11b" defined at calculatorcommands.adb:54, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__B_2__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (46 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T12b" defined at calculatorcommands.adb:56, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__B_2__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at calculatorcommands.adb:60, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__B_2__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS14bP1" defined at calculatorcommands.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__TS14bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS14bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS14bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS14bP1__ref =
  { mutable tS14bP1__content : tS14bP1 }
 
 function tS14bP1__ref_tS14bP1__content__projection 
   (a : tS14bP1__ref) : tS14bP1 =
  a.tS14bP1__content
 
 meta "model_projection" function tS14bP1__ref_tS14bP1__content__projection
 
 meta "inline:no" function tS14bP1__ref_tS14bP1__content__projection
 
 val tS14bP1__havoc 
   (x : tS14bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S14b" defined at calculatorcommands.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__S14b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s14b =
  tokenarray
 
 type s14b__ref =
  { mutable s14b__content : s14b }
 
 function s14b__ref_s14b__content__projection 
   (a : s14b__ref) : s14b =
  a.s14b__content
 
 meta "model_projection" function s14b__ref_s14b__content__projection
 
 meta "inline:no" function s14b__ref_s14b__content__projection
 
 val s14b__havoc 
   (x : s14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at calculatorcommands.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at calculatorcommands.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (21 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at calculatorcommands.adb:80, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawval" defined at calculatorcommands.adb:83, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__B_3__rawval
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawval [#"calculatorcommands.adb" 83 0 0][@model_projected] [@name:RawVal] [@model_trace:2723] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T18b" defined at calculatorcommands.adb:86, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at stringtointeger.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stringtointeger__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"stringtointeger.ads" 6 0 0][@model_trace:17069] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stringtointeger.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringtointeger__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_170 : int) (s : Standard__string.string)

end

(* Module for defining the constant "val" defined at calculatorcommands.adb:89, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__B_3__B_4__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val__ [#"calculatorcommands.adb" 89 0 0][@model_trace:2757] [@name:Val] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T19b" defined at calculatorcommands.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__B_4__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at calculatorcommands.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__B_4__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "start_pos" defined at calculatorcommands.adb:105, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__start_pos
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant start_pos [#"calculatorcommands.adb" 105 0 0][@model_trace:2828] [@name:Start_Pos] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "token_len" defined at calculatorcommands.adb:106, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__token_len
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant token_len [#"calculatorcommands.adb" 106 0 0][@model_trace:2840] [@name:Token_Len] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T22b" defined at calculatorcommands.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__get_token_string__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at calculatorcommands.adb:121, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__get_token_string__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val m__split_fields [#"mystring.ads" 45 0 0][@model_projected] [@model_trace:26033] [@name:M]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 21 0 0][@model_projected] [@name:Result] [@model_trace:28913]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 21 0 0][@model_projected] [@model_trace:28913'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 21 0 0][@model_projected] [@name:Result] [@model_trace:28913'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val m__split_fields [#"mystring.adb" 28 0 0][@model_projected] [@model_trace:28968] [@name:M]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:29 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 29 0 0][@model_projected] [@name:J] [@model_trace:28987]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:29 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 35 0 0][@model_projected] [@name:I] [@model_trace:29064]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:44 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 44 0 0][@model_projected] [@name:I] [@model_trace:29131]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:44 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:68 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 68 0 0][@model_projected] [@name:I] [@model_trace:29308]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:68 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val r__split_fields [#"mystring.adb" 87 0 0][@model_projected] [@model_trace:29508] [@name:R]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:88 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 88 0 0][@model_projected] [@name:J] [@model_trace:29531]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:88 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 90 0 0][@model_trace:29597] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:10046]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@model_trace:10046'First] [@name:Item] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:10046'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_projected] [@model_trace:10055] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:19, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_unlock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 19 0 0][@model_trace:3093] [@model_projected] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "masterpin" defined at calculatorcommands.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val masterpin [#"calculatorcommands.ads" 24 0 0][@model_trace:3133] [@model_projected] [@name:MasterPIN]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 25 0 0][@model_trace:3144] [@model_projected] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 31 0 0][@model_projected] [@name:Stack] [@model_trace:3193]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:32, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 32 0 0][@name:Stack_Top] [@model_projected] [@model_trace:3202]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp_end" defined at calculatorcommands.adb:107, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__get_token_string__temp_end
 use        "_gnatprove_standard".Main
 use        "int".Int

 val temp_end [#"calculatorcommands.adb" 107 0 0][@model_projected] [@model_trace:2852] [@name:Temp_End]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp_end" defined at calculatorcommands.adb:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__temp_end___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "end_pos" defined at calculatorcommands.adb:108, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__get_token_string__end_pos
 use        "_gnatprove_standard".Main
 use        "int".Int

 val end_pos [#"calculatorcommands.adb" 108 0 0][@model_trace:2861] [@name:End_Pos] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "end_pos" defined at calculatorcommands.adb:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__end_pos___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:51 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:51 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:73 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:73 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_unlock" defined at calculatorcommands.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_lock" defined at calculatorcommands.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_push1" defined at calculatorcommands.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_push1
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) =
  (if (( temp___is_init_172 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_176)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_177 : int) (temp___skip_top_level_178 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_177 : int) (temp___skip_top_level_178 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_177 : int) (temp___skip_top_level_178 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_183 : Array__Int__Standard__character.map) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_183 : Array__Int__Standard__character.map) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_183 : Array__Int__Standard__character.map) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_185 : Array__Int__Standard__character.map) (temp___skip_top_level_186 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_185 : Array__Int__Standard__character.map) (temp___skip_top_level_186 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_185 : Array__Int__Standard__character.map) (temp___skip_top_level_186 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_193 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_196 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_195 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "T10s" defined at mystring.ads:33 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:21 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__to_string__m as Calculatorcommands__lines__to_string__m
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__to_string__TresultS as Calculatorcommands__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_245 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) =
  (if (temp___skip_constant_242) then (
   true) else (
   ( (Calculatorcommands__lines__to_string__TresultS.dynamic_property (1 : int) (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) (Calculatorcommands__lines__to_string__TresultS.first temp___expr_245) (Calculatorcommands__lines__to_string__TresultS.last temp___expr_245)) /\ ( ((Calculatorcommands__lines__to_string__TresultS.first temp___expr_245) = (1 : int)) /\ ((Calculatorcommands__lines__to_string__TresultS.last temp___expr_245) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_245 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_245 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_247 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_248 : bool) =
  ( ( true /\ ((Calculatorcommands__lines__to_string__TresultS.first temp___expr_247) = (1 : int)) )/\((Calculatorcommands__lines__to_string__TresultS.last temp___expr_247) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_247 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_248 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_247 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_248 : bool) }

end

(* Module giving axioms for type "T18s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__T18s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__T19s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS21sP1" defined at mystring.adb:27 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__TS21sP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S21s" defined at mystring.adb:27 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__S21s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__from_string__s as Calculatorcommands__lines__from_string__s
 use        Calculatorcommands__lines__from_string__S21s as Calculatorcommands__lines__from_string__S21s

 predicate dynamic_invariant [@inline] 
   (temp___expr_255 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) =
  (if (temp___skip_constant_252) then (
   true) else (
   ( (Calculatorcommands__lines__from_string__S21s.dynamic_property (Standard__string.first Calculatorcommands__lines__from_string__s.s) (Standard__string.last Calculatorcommands__lines__from_string__s.s) (Calculatorcommands__lines__from_string__S21s.first temp___expr_255) (Calculatorcommands__lines__from_string__S21s.last temp___expr_255)) /\ ( ((Calculatorcommands__lines__from_string__S21s.first temp___expr_255) = (Standard__string.first Calculatorcommands__lines__from_string__s.s)) /\ ((Calculatorcommands__lines__from_string__S21s.last temp___expr_255) = (Standard__string.last Calculatorcommands__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_255 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_255 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_257 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___skip_top_level_258 : bool) =
  ( ( true /\ ((Calculatorcommands__lines__from_string__S21s.first temp___expr_257) = (Standard__string.first Calculatorcommands__lines__from_string__s.s)) )/\((Calculatorcommands__lines__from_string__S21s.last temp___expr_257) = (Standard__string.last Calculatorcommands__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_257 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___skip_top_level_258 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_257 : Calculatorcommands__lines__from_string__S21s.s21s) (temp___skip_top_level_258 : bool) }

end

(* Module giving axioms for type "T22s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__T22s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__T23s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24s" defined at mystring.adb:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__L_1__T24s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L_3__L34s__T35s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L_3__L32s__T33s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__T38s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__T39s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40s" defined at mystring.adb:90 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__L_4__T40s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Toperand_stackD1" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Toperand_stackB" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "operand_stack" defined at calculatorcommands.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__operand_stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_267 : Array__Int__Standard__integer.map) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_267 : Array__Int__Standard__integer.map) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_267 : Array__Int__Standard__integer.map) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_269 : Array__Int__Standard__integer.map) (temp___skip_top_level_270 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_269 : Array__Int__Standard__integer.map) (temp___skip_top_level_270 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_269 : Array__Int__Standard__integer.map) (temp___skip_top_level_270 : bool) }

end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_277 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_277 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_277 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_278 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_279 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_278 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_279 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_278 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_279 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_286 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) =
  (if (temp___skip_constant_283) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_286) (Mystringtokeniser__tokenarray.last temp___expr_286))))
 val dynamic_invariant [@inline] 
   (temp___expr_286 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_286 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) }

end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_292 : int) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) =
  (if (( temp___is_init_288 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_292)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_292 : int) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_292 : int) (temp___is_init_288 : bool) (temp___skip_constant_289 : bool) (temp___do_toplevel_290 : bool) (temp___do_typ_inv_291 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_293 : int) (temp___skip_top_level_294 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_293 : int) (temp___skip_top_level_294 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_293 : int) (temp___skip_top_level_294 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock__t as Calculatorcommands__handle_unlock__t
 use        Calculatorcommands__handle_unlock__S1b as Calculatorcommands__handle_unlock__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_311 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) =
  (if (temp___skip_constant_308) then (
   true) else (
   ( (Calculatorcommands__handle_unlock__S1b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t) (Calculatorcommands__handle_unlock__S1b.first temp___expr_311) (Calculatorcommands__handle_unlock__S1b.last temp___expr_311)) /\ ( ((Calculatorcommands__handle_unlock__S1b.first temp___expr_311) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t)) /\ ((Calculatorcommands__handle_unlock__S1b.last temp___expr_311) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_311 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_311 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_313 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_314 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_unlock__S1b.first temp___expr_313) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t)) )/\((Calculatorcommands__handle_unlock__S1b.last temp___expr_313) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_313 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_314 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_313 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_314 : bool) }

end

(* Module giving axioms for type "T2b" defined at calculatorcommands.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at calculatorcommands.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at calculatorcommands.adb:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at calculatorcommands.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at calculatorcommands.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS8bP1" defined at calculatorcommands.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__TS8bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S8b" defined at calculatorcommands.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__S8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_lock__t as Calculatorcommands__handle_lock__t
 use        Calculatorcommands__handle_lock__S8b as Calculatorcommands__handle_lock__S8b

 predicate dynamic_invariant [@inline] 
   (temp___expr_326 : Calculatorcommands__handle_lock__S8b.s8b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) =
  (if (temp___skip_constant_323) then (
   true) else (
   ( (Calculatorcommands__handle_lock__S8b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t) (Calculatorcommands__handle_lock__S8b.first temp___expr_326) (Calculatorcommands__handle_lock__S8b.last temp___expr_326)) /\ ( ((Calculatorcommands__handle_lock__S8b.first temp___expr_326) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t)) /\ ((Calculatorcommands__handle_lock__S8b.last temp___expr_326) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_326 : Calculatorcommands__handle_lock__S8b.s8b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_326 : Calculatorcommands__handle_lock__S8b.s8b) (temp___is_init_322 : bool) (temp___skip_constant_323 : bool) (temp___do_toplevel_324 : bool) (temp___do_typ_inv_325 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_328 : Calculatorcommands__handle_lock__S8b.s8b) (temp___skip_top_level_329 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_lock__S8b.first temp___expr_328) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t)) )/\((Calculatorcommands__handle_lock__S8b.last temp___expr_328) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_328 : Calculatorcommands__handle_lock__S8b.s8b) (temp___skip_top_level_329 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_328 : Calculatorcommands__handle_lock__S8b.s8b) (temp___skip_top_level_329 : bool) }

end

(* Module giving axioms for type "T9b" defined at calculatorcommands.adb:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at calculatorcommands.adb:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__B_2__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at calculatorcommands.adb:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__B_2__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at calculatorcommands.adb:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__B_2__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS14bP1" defined at calculatorcommands.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__TS14bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S14b" defined at calculatorcommands.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__S14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push1__t as Calculatorcommands__handle_push1__t
 use        Calculatorcommands__handle_push1__S14b as Calculatorcommands__handle_push1__S14b

 predicate dynamic_invariant [@inline] 
   (temp___expr_338 : Calculatorcommands__handle_push1__S14b.s14b) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) =
  (if (temp___skip_constant_335) then (
   true) else (
   ( (Calculatorcommands__handle_push1__S14b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t) (Calculatorcommands__handle_push1__S14b.first temp___expr_338) (Calculatorcommands__handle_push1__S14b.last temp___expr_338)) /\ ( ((Calculatorcommands__handle_push1__S14b.first temp___expr_338) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t)) /\ ((Calculatorcommands__handle_push1__S14b.last temp___expr_338) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_338 : Calculatorcommands__handle_push1__S14b.s14b) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_338 : Calculatorcommands__handle_push1__S14b.s14b) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_340 : Calculatorcommands__handle_push1__S14b.s14b) (temp___skip_top_level_341 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_push1__S14b.first temp___expr_340) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t)) )/\((Calculatorcommands__handle_push1__S14b.last temp___expr_340) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_340 : Calculatorcommands__handle_push1__S14b.s14b) (temp___skip_top_level_341 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_340 : Calculatorcommands__handle_push1__S14b.s14b) (temp___skip_top_level_341 : bool) }

end

(* Module giving axioms for type "T15b" defined at calculatorcommands.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at calculatorcommands.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at calculatorcommands.adb:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at calculatorcommands.adb:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at calculatorcommands.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__B_4__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at calculatorcommands.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__B_4__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at calculatorcommands.adb:111, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__get_token_string__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at calculatorcommands.adb:121, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__get_token_string__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_361
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_361 
   (temp___363 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_411
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_411 
   (temp___413 : int) : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:18, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_436
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_436 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_436__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_436 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (4 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (8 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (9 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (10 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (12 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (13 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (14 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (15 : int))) = (60 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (16 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (17 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (18 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_436 __void_param) (19 : int))) = (62 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:26, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_437
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_437 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_437__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_437 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (9 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (10 : int))) = (73 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (11 : int))) = (78 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (12 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (13 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (15 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (16 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (19 : int))) = (98 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (22 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (24 : int))) = (52 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (25 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (26 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (27 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (28 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (29 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (30 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (32 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (33 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (34 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (35 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (36 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (37 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (38 : int))) = (99 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (40 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (41 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (42 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (43 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (44 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (45 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_437 __void_param) (46 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:33, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_438
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_438 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_438__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_438 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (6 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (8 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (11 : int))) = (80 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (12 : int))) = (73 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (13 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (14 : int))) = (46 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (16 : int))) = (83 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (17 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (18 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (19 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (20 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (22 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (23 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (24 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (25 : int))) = (107 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (26 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (27 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_438 __void_param) (28 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_439
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_439 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_439__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_439 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (5 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (6 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (7 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (8 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (9 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (10 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (11 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (12 : int))) = (99 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (13 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (14 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (15 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (16 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (17 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (18 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (19 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (20 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (21 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_439 __void_param) (22 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:28, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_440
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_440 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_440__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_440 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (9 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (11 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (13 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (14 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (16 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (17 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:46, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_447
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_447 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_447__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_447 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (4 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (8 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (9 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (10 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (11 : int))) = (107 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (13 : int))) = (60 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (14 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (16 : int))) = (119 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (17 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (18 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (19 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_447 __void_param) (20 : int))) = (62 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_448
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_448 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_448__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_448 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (9 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (10 : int))) = (73 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (11 : int))) = (78 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (12 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (13 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (15 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (16 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (19 : int))) = (98 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (22 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (24 : int))) = (52 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (25 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (26 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (27 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (28 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (29 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (30 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (32 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (33 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (34 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (35 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (36 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (37 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (38 : int))) = (99 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (40 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (41 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (42 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (43 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (44 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (45 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_448 __void_param) (46 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:60, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_449
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_449 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_449__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_449 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (8 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (10 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (11 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (13 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (14 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (15 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (16 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (17 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (18 : int))) = (73 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (19 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_449 __void_param) (20 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:56, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_450
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_450 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_450__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_450 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (9 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (11 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (12 : int))) = (107 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (14 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_450 __void_param) (15 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:76, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_457
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_457 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_457__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_457 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (4 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (5 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (14 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (17 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (20 : int))) = (58 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (22 : int))) = (99 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (24 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (25 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (26 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (27 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (28 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (29 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (31 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (33 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (34 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (36 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (38 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (39 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (40 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (41 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_457 __void_param) (42 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:86, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_458
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_458 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_458__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_458 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (6 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (7 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (9 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (10 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (11 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (12 : int))) = (98 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (15 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:95, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_459
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_459 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_459__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_459 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (3 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (5 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (7 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (8 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (9 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (11 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (12 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (13 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (14 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (15 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_459 __void_param) (16 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:95, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_460
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_460 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_460__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_460 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (2 : int))) = (117 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (4 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_460 __void_param) (7 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:80, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_466
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_466 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_466__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_466 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (9 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (10 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (11 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (12 : int))) = (107 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (15 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (16 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (17 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (18 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (19 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (20 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (21 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_466 __void_param) (22 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:78, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_467
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_467 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_467__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_467 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (4 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (8 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (9 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (10 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (11 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (12 : int))) = (49 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (14 : int))) = (60 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (15 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (16 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (17 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (18 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (19 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (20 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_467 __void_param) (21 : int))) = (62 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:111, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_473
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_473 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_473__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_473 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:121, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_474
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_474 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_474__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_474 __void_param)].
   true)

end
(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__max_mystring_length as Calculatorcommands__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Calculatorcommands__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "rawpin" defined at calculatorcommands.adb:21, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_unlock__B_1__rawpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__handle_unlock__s as Calculatorcommands__handle_unlock__s
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock__t as Calculatorcommands__handle_unlock__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_unlock__B_1__rawpin as Calculatorcommands__handle_unlock__B_1__rawpin
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawpin__def_axiom :
  ((Calculatorcommands__handle_unlock__B_1__rawpin.rawpin ) = (epsilon temp___result_166 : Standard__string.string.
   ( (temp___result_166 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_unlock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_unlock__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_166 Calculatorcommands__handle_unlock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_unlock__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawpin" defined at calculatorcommands.adb:49, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_lock__B_2__rawpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_lock__s as Calculatorcommands__handle_lock__s
 use        Calculatorcommands__handle_lock__t as Calculatorcommands__handle_lock__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_lock__B_2__rawpin as Calculatorcommands__handle_lock__B_2__rawpin
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawpin__def_axiom :
  ((Calculatorcommands__handle_lock__B_2__rawpin.rawpin ) = (epsilon temp___result_168 : Standard__string.string.
   ( (temp___result_168 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_lock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_lock__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_168 Calculatorcommands__handle_lock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_lock__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawval" defined at calculatorcommands.adb:83, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push1__B_3__rawval___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push1__s as Calculatorcommands__handle_push1__s
 use        Calculatorcommands__handle_push1__t as Calculatorcommands__handle_push1__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_push1__B_3__rawval as Calculatorcommands__handle_push1__B_3__rawval
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawval__def_axiom :
  ((Calculatorcommands__handle_push1__B_3__rawval.rawval ) = (epsilon temp___result_169 : Standard__string.string.
   ( (temp___result_169 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_push1__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push1__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_169 Calculatorcommands__handle_push1__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push1__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "val" defined at calculatorcommands.adb:89, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push1__B_3__B_4__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__handle_push1__B_3__rawval as Calculatorcommands__handle_push1__B_3__rawval
 use        Stringtointeger__from_string as Stringtointeger__from_string
 use        Calculatorcommands__handle_push1__B_3__B_4__val as Calculatorcommands__handle_push1__B_3__B_4__val

 axiom val____def_axiom :
  ((Calculatorcommands__handle_push1__B_3__B_4__val.val__ ) = (epsilon temp___result_171 : int.
   ( (temp___result_171 = (Stringtointeger__from_string.from_string Calculatorcommands__handle_push1__B_3__rawval.rawval)) /\ (Stringtointeger__from_string.from_string__function_guard temp___result_171 Calculatorcommands__handle_push1__B_3__rawval.rawval) )))

end

(* Module for defining the value of constant "start_pos" defined at calculatorcommands.adb:105, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__get_token_string__start_pos___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string__tok as Calculatorcommands__get_token_string__tok
 use        Calculatorcommands__get_token_string__start_pos as Calculatorcommands__get_token_string__start_pos

 axiom start_pos__def_axiom :
  ((Calculatorcommands__get_token_string__start_pos.start_pos ) = (Standard__positive__rep.to_rep Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))

end

(* Module for defining the value of constant "token_len" defined at calculatorcommands.adb:106, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__get_token_string__token_len___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string__tok as Calculatorcommands__get_token_string__tok
 use        Calculatorcommands__get_token_string__token_len as Calculatorcommands__get_token_string__token_len

 axiom token_len__def_axiom :
  ((Calculatorcommands__get_token_string__token_len.token_len ) = (Standard__natural__rep.to_rep Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Calculatorcommands__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep

 val length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:26307] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__length.length m) in (
    (if ((Calculatorcommands__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:26307] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Calculatorcommands__lines__length.length m) in (
    (Calculatorcommands__lines__length.length__function_guard result m)))
    ) -> ((Calculatorcommands__lines__length.length m) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__to_string as Calculatorcommands__lines__to_string
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__to_string.to_string m)) /\ (Calculatorcommands__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:25740] ((Standard__string.length result) = (epsilon temp___result_203 : int.
   ( (temp___result_203 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_203 m) ))) ) /\ ( [@GP_Pretty_Ada:25747] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:25752] ((Standard__string.last result) = (epsilon temp___result_204 : int.
   ( (temp___result_204 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_204 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__to_string.to_string m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__to_string.to_string m) in (
    (if ((Calculatorcommands__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:25740] ((Standard__string.length result) = (epsilon temp___result_207 : int.
      ( (temp___result_207 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_207 m) ))) ) /\ ( [@GP_Pretty_Ada:25747] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:25752] ((Standard__string.last result) = (epsilon temp___result_208 : int.
      ( (temp___result_208 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_208 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:24 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__from_string as Calculatorcommands__lines__from_string
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Calculatorcommands__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:26225] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__from_string.from_string s)) /\ (Calculatorcommands__lines__from_string.from_string__function_guard result s) )/\( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:26239] ((epsilon temp___result_211 : int.
   ( (temp___result_211 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_211 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Calculatorcommands__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:26225] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Calculatorcommands__lines__from_string.from_string s) in (
    (if ((Calculatorcommands__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:26239] ((epsilon temp___result_214 : int.
      ( (temp___result_214 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_214 result) )) = (Standard__string.length s)) ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__less as Calculatorcommands__lines__less

 val less 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__less.less m1 m2)) /\ (Calculatorcommands__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Calculatorcommands__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__get as Calculatorcommands__lines__get
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Calculatorcommands__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:26375] (index <= (epsilon temp___result_219 : int.
   ( (temp___result_219 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_219 m) ))) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__get.get m index)) /\ (Calculatorcommands__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___220 [@mlw:proxy_symbol] [@introduced] = m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___220 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall index   : int [(Calculatorcommands__lines__get.get m index)].
   ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:26375] (index <= (epsilon temp___result_222 : int.
    ( (temp___result_222 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_222 m) ))) ) ) -> (let result = (Calculatorcommands__lines__get.get m index) in (
    (if ((Calculatorcommands__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall index   : int [(Calculatorcommands__lines__get.get m index)].
   ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Calculatorcommands__lines__get.get m index) in (
    (Calculatorcommands__lines__get.get__function_guard result m index)))
    ) -> ((Calculatorcommands__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___224 [@mlw:proxy_symbol] [@introduced] = m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___224 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__get as Calculatorcommands__lines__get
 use        Calculatorcommands__lines__equal as Calculatorcommands__lines__equal

 val equal 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__equal.equal m1 m2)) /\ (Calculatorcommands__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:25846] ((epsilon temp___result_225 : int.
    ( (temp___result_225 = (Calculatorcommands__lines__length.length m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_225 m1) )) = (epsilon temp___result_226 : int.
    ( (temp___result_226 = (Calculatorcommands__lines__length.length m2)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_226 m2) ))) ) /\ (forall i   [@name:I] [@model_trace:25864]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_227 : int.
     ( (temp___result_227 = (Calculatorcommands__lines__length.length m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_227 m1) ))) ) -> ( [@GP_Pretty_Ada:25854] ((epsilon temp___result_228 : int.
     ( (temp___result_228 = (Calculatorcommands__lines__get.get m1 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_228 m1 i) )) = (epsilon temp___result_229 : int.
     ( (temp___result_229 = (Calculatorcommands__lines__get.get m2 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_229 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:26453] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__substring as Calculatorcommands__lines__substring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val substring 
   (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int) : Calculatorcommands__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:25932] (from <= to__) ) /\ ( [@GP_Pretty_Ada:25935] (to__ <= (epsilon temp___result_232 : int.
   ( (temp___result_232 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_232 m) ))) ) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__substring.substring m from to__)) /\ (Calculatorcommands__lines__substring.substring__function_guard result m from to__) )/\( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:26348] ((epsilon temp___result_233 : int.
   ( (temp___result_233 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_233 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall from   to__   : int [(Calculatorcommands__lines__substring.substring m from to__)].
   ( ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:25932] (from <= to__) ) /\ ( [@GP_Pretty_Ada:25935] (to__ <= (epsilon temp___result_236 : int.
    ( (temp___result_236 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_236 m) ))) ) ) ) -> (let result = (Calculatorcommands__lines__substring.substring m from to__) in (
    (if ((Calculatorcommands__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:26348] ((epsilon temp___result_237 : int.
      ( (temp___result_237 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_237 result) )) = ((to__ - from) + (1 : int))) ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val get_line 
   (m__split_fields : Calculatorcommands__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:10074] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:10080] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:10089] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:10100] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_unlock" defined at calculatorcommands.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_unlock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int) (unlocked : bool__ref) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_lock" defined at calculatorcommands.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_lock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int__ref) (unlocked : bool__ref) : unit
  requires {  true }
  ensures {  (Pin__pin___axiom.dynamic_invariant masterpin.int__content True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, masterpin, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_push1" defined at calculatorcommands.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_push1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_push1 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (unlocked : bool) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "get_token_string" defined at calculatorcommands.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__get_token_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom

 val get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__get_token_string.get_token_string s tok)) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard result s tok) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_token_string__post_axiom :
  (forall s   : Calculatorcommands__lines__mystring.mystring.
  (forall tok   : Mystringtokeniser__tokenextent.tokenextent [(Calculatorcommands__get_token_string.get_token_string s tok)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant s True True True True) /\ (Mystringtokeniser__tokenextent___axiom.dynamic_invariant tok True True True True) ) -> (let result = (Calculatorcommands__get_token_string.get_token_string s tok) in (
    (if ((Calculatorcommands__get_token_string.get_token_string__function_guard result s tok)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:10255] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:10261] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:3299] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:3302] [@name:I]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:3316] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:3322] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:3299] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:3302] [@name:I]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:3316] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:3322] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringtointeger__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Stringtointeger__from_string as Stringtointeger__from_string

 val from_string 
   (s : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Stringtointeger__from_string.from_string s)) /\ (Stringtointeger__from_string.from_string__function_guard result s) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Stringtointeger__from_string.from_string s)].
   (let result = (Stringtointeger__from_string.from_string s) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "calculatorcommands" defined at calculatorcommands.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Calculatorcommands__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"calculatorcommands.ads" 11 0 0][@GP_Subp:calculatorcommands.ads:11] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 11 0 0] true }
   = [@vc:divergent]
  ( [#"calculatorcommands.ads" 11 0 0] assume { [#"calculatorcommands.ads" 11 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"calculatorcommands.ads" 12 0 0] ());
  ([#"mystring.adb" 18 0 0] ());
  ([#"calculatorcommands.ads" 12 0 0] ());
  ([#"calculatorcommands.ads" 13 0 0] ());
  ([#"calculatorcommands.ads" 14 0 0] ());
  ([#"calculatorcommands.ads" 15 0 0] ());
  ([#"calculatorcommands.ads" 21 0 0] ());
  ([#"calculatorcommands.ads" 27 0 0] ());
  ([#"calculatorcommands.ads" 34 0 0] ());
  ([#"calculatorcommands.ads" 34 0 0] ());
  ([#"calculatorcommands.ads" 34 0 0] ());
  ([#"calculatorcommands.ads" 34 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"calculatorcommands.adb" 11 0 0] ());
  ([#"calculatorcommands.adb" 39 0 0] ());
  ([#"calculatorcommands.adb" 66 0 0] ());
  ([#"calculatorcommands.adb" 102 0 0] ());
  ();
  ( [@GP_Sloc:calculatorcommands.adb:129:1] ([#"calculatorcommands.adb" 129 0 0] ()) ) )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Calculatorcommands__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Calculatorcommands__lines__max_mystring_length as Calculatorcommands__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Calculatorcommands__lines__max_mystring_length___axiom as Calculatorcommands__lines__max_mystring_length___axiom

 let def [#"calculatorcommands.ads" 12 0 0][@GP_Subp:calculatorcommands.ads:12] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 12 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 17 0 0] ());
  ([#"calculatorcommands.ads" 12 0 0] ( [#"calculatorcommands.ads" 12 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"calculatorcommands.ads" 12 0 0] assume { [#"calculatorcommands.ads" 12 0 0] (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"calculatorcommands.ads" 12 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 20 0 0] ());
  ([#"mystring.ads" 21 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 25 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 35 0 0] ());
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 38 0 0] ());
  ([#"mystring.ads" 40 0 0] ());
  ([#"mystring.ads" 39 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 43 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.ads" 48 0 0] ());
  ([#"mystring.ads" 49 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ();
  ([#"mystring.adb" 20 0 0] ());
  ([#"mystring.adb" 27 0 0] ());
  ([#"mystring.adb" 43 0 0] ());
  ([#"mystring.adb" 67 0 0] ());
  ([#"mystring.adb" 86 0 0] ());
  ([#"mystring.adb" 98 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:104:1:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 104 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:18 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Calculatorcommands__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 let def [@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___347 [@mlw:proxy_symbol] [@introduced] =  (val _f : Calculatorcommands__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length__m as Calculatorcommands__lines__length__m
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Calculatorcommands__lines__length__m___axiom as Calculatorcommands__lines__length__m___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 val calculatorcommands__lines__length__result [@model_trace:25911@result] [@model_projected] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 35 0 0][@GP_Subp:mystring.ads:35] 
   (__void_param : unit)
  requires { [#"mystring.ads" 35 0 0] true }
  ensures { [#"mystring.ads" 35 0 0] ([#"mystring.ads" 36 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:36:14:instantiated:calculatorcommands.ads:12:4] [@model_vc_post] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:36:14:instantiated:calculatorcommands.ads:12:4:VC_POSTCONDITION] [@GP_Id:0] ( [@GP_Sloc:mystring.ads:36:14:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:26307] (calculatorcommands__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:35 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:35 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:35 instantiated at calculatorcommands.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:35 instantiated at calculatorcommands.ads:12 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:55:8:instantiated:calculatorcommands.ads:12:4] ([#"mystring.ads" 55 0 0] ( [#"mystring.ads" 55 0 0] (calculatorcommands__lines__length__result.int__content <- ( (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__length__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ));
   [#"mystring.ads" 55 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (calculatorcommands__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  calculatorcommands__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__to_string__m as Calculatorcommands__lines__to_string__m
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__to_string__result as Calculatorcommands__lines__to_string__result
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Calculatorcommands__lines__to_string__TresultS as Calculatorcommands__lines__to_string__TresultS
 use        Calculatorcommands__lines__to_string__T19s as Calculatorcommands__lines__to_string__T19s
 use        Calculatorcommands__lines__to_string__TresultS___axiom as Calculatorcommands__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__lines__to_string__m___axiom as Calculatorcommands__lines__to_string__m___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__lines__to_string__result___axiom as Calculatorcommands__lines__to_string__result___axiom
 use        Calculatorcommands__lines__to_string__TresultS___axiom as Calculatorcommands__lines__to_string__TresultS___axiom
 use        Calculatorcommands__lines__to_string__T19s___axiom as Calculatorcommands__lines__to_string__T19s___axiom

 val calculatorcommands__lines__to_string__result [@name:To_String] [@model_trace:25760@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 20 0 0][@GP_Subp:mystring.ads:20] 
   (__void_param : unit)
  requires { [#"mystring.ads" 20 0 0] true }
  ensures { [#"mystring.ads" 20 0 0] ([#"mystring.ads" 21 0 0] ( [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:21:14:instantiated:calculatorcommands.ads:12:4:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:7] [@GP_Sloc:mystring.ads:21:14:instantiated:calculatorcommands.ads:12:4] ( ( ( [@GP_Pretty_Ada:25740] [@GP_Sloc:mystring.ads:21:14:instantiated:calculatorcommands.ads:12:4] ((Standard__string.length calculatorcommands__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_359 : int.
   ( (temp___result_359 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__to_string__m.m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_359 Calculatorcommands__lines__to_string__m.m) ))) ) /\ ( [@GP_Sloc:mystring.ads:22:14:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:25747] ((Standard__string.first calculatorcommands__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:25752] [@GP_Sloc:mystring.ads:22:45:instantiated:calculatorcommands.ads:12:4] ((Standard__string.last calculatorcommands__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_360 : int.
   ( (temp___result_360 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__to_string__m.m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_360 Calculatorcommands__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:20 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:20 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:20 instantiated at calculatorcommands.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:20 instantiated at calculatorcommands.ads:12 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 21 0 0] ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 21 0 0] [#"mystring.adb" 21 0 0] (val _f : unit
   requires {( [@GP_Sloc:mystring.adb:21:7:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:21:7:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [#"mystring.adb" 21 0 0] ( ((1 : int) <= (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 21 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 21 0 0] ( [#"mystring.adb" 21 0 0] assume { [#"mystring.adb" 21 0 0] (Calculatorcommands__lines__to_string__TresultS___axiom.default_initial_assumption (Calculatorcommands__lines__to_string__TresultS.of_array Calculatorcommands__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 21 0 0] assume { [#"mystring.adb" 21 0 0] (if (False) then (
    true) else (
    ( (Calculatorcommands__lines__to_string__TresultS.dynamic_property (1 : int) (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:23:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 23 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:23:14:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Calculatorcommands__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Calculatorcommands__lines__to_string__TresultS.to_array (let temp___356 [@mlw:proxy_symbol] [@introduced] = (let temp___355 [@mlw:proxy_symbol] [@introduced] = (let temp___354 [@mlw:proxy_symbol] [@introduced] = (let temp___352 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) in (
   (let temp___351 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___353 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
    (Calculatorcommands__lines__to_string__T19s.of_array(( [#"mystring.adb" 23 0 0] assert { [#"mystring.adb" 23 0 0] ([#"mystring.adb" 23 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:23:25:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:2] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:23:25:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] ( (temp___351 <= temp___352) -> ( ( (Calculatorcommands__lines__TmystringstrD1.first <= temp___351) /\ (temp___351 <= Calculatorcommands__lines__TmystringstrD1.last) ) /\ ( (Calculatorcommands__lines__TmystringstrD1.first <= temp___352) /\ (temp___352 <= Calculatorcommands__lines__TmystringstrD1.last) ) ) ) )) };
    temp___353 )) (temp___351) (temp___352))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:23:25:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:3] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:23:25:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Calculatorcommands__lines__to_string__T19s.first(temp___354))) ((Calculatorcommands__lines__to_string__T19s.last(temp___354)))) )) };
    (Standard__string.of_array((Calculatorcommands__lines__to_string__T19s.to_array(temp___354))) ((Calculatorcommands__lines__to_string__T19s.first(temp___354))) ((Calculatorcommands__lines__to_string__T19s.last(temp___354)))) )))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@GP_Sloc:mystring.adb:23:17:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Shape:result_assign__typeconv] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:23:17:instantiated:calculatorcommands.ads:12:4:VC_LENGTH_CHECK] [@GP_Id:4] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___355) <= (Standard__string.last temp___355))) then (
     ( ((1 : int) <= (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) /\ (((Standard__string.last temp___355) - (Standard__string.first temp___355)) = ((Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) - (1 : int))) )) else (
     ((Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) < (1 : int)))) ) )) };
    (Calculatorcommands__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___355))) ((Standard__string.first(temp___355))) ((1 : int)))) ((1 : int)) ((Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@GP_Sloc:mystring.adb:23:14:instantiated:calculatorcommands.ads:12:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:23:14:instantiated:calculatorcommands.ads:12:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:result_assign] [@GP_Id:5] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Calculatorcommands__lines__to_string__TresultS.first temp___356) <= (Calculatorcommands__lines__to_string__TresultS.last temp___356))) then (
     ( ((Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last)) /\ (((Calculatorcommands__lines__to_string__TresultS.last temp___356) - (Calculatorcommands__lines__to_string__TresultS.first temp___356)) = ((Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Calculatorcommands__lines__to_string__result.result____first)))) ) )) };
    temp___356 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:24:14:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 24 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:24:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 24 0 0] ( [#"mystring.adb" 24 0 0] (calculatorcommands__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Calculatorcommands__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Calculatorcommands__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Calculatorcommands__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 24 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 21 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@vc:annotation] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:21:30:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:21:30:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:6] (Standard__integer.range_check_(( [#"mystring.ads" 21 0 0] begin ensures {true} let _ = (let _ = calculatorcommands__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(calculatorcommands__lines__to_string__result.Standard__string.string__content)) ))) )) = (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = calculatorcommands__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(calculatorcommands__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = calculatorcommands__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(calculatorcommands__lines__to_string__result.Standard__string.string__content)) ) = (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  calculatorcommands__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_361___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_361 as Temp_____aggregate_def_361
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___363   : int.
   (let temp___362 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_361.temp_____aggregate_def_361 temp___363) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___363 True True True True)) then (
     (forall temp___364   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___362 temp___364)) = temp___363))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:24 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__from_string__s as Calculatorcommands__lines__from_string__s
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__from_string__m as Calculatorcommands__lines__from_string__m
 use        Calculatorcommands__lines__from_string__j as Calculatorcommands__lines__from_string__j
 use        Calculatorcommands__lines__from_string__L_1__i as Calculatorcommands__lines__from_string__L_1__i
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Calculatorcommands__lines__from_string__L_1 as Calculatorcommands__lines__from_string__L_1
 use        Calculatorcommands__lines__from_string__L_1__T24s as Calculatorcommands__lines__from_string__L_1__T24s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_361 as Temp_____aggregate_def_361
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__lines__from_string__s___axiom as Calculatorcommands__lines__from_string__s___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__lines__from_string__m___axiom as Calculatorcommands__lines__from_string__m___axiom
 use        Calculatorcommands__lines__from_string__j___axiom as Calculatorcommands__lines__from_string__j___axiom
 use        Calculatorcommands__lines__from_string__L_1___axiom as Calculatorcommands__lines__from_string__L_1___axiom
 use        Calculatorcommands__lines__from_string__L_1__i___axiom as Calculatorcommands__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_361___axiom as Temp_____aggregate_def_361___axiom
 use        Calculatorcommands__lines__from_string__L_1__T24s___axiom as Calculatorcommands__lines__from_string__L_1__T24s___axiom

 val calculatorcommands__lines__from_string__result [@name:From_String] [@model_projected] [@model_trace:25794@result]  : Calculatorcommands__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 24 0 0][@GP_Subp:mystring.ads:24] 
   (__void_param : unit)
  requires { [#"mystring.ads" 24 0 0] true }
  ensures { [#"mystring.ads" 24 0 0] ([#"mystring.ads" 26 0 0] ( [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:26:15:instantiated:calculatorcommands.ads:12:4:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:18] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:mystring.ads:26:15:instantiated:calculatorcommands.ads:12:4] ( [@GP_Pretty_Ada:26239] [@GP_Sloc:mystring.ads:26:15:instantiated:calculatorcommands.ads:12:4] ((epsilon temp___result_379 : int.
   ( (temp___result_379 = (Calculatorcommands__lines__length.length calculatorcommands__lines__from_string__result.Calculatorcommands__lines__mystring.mystring__content)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_379 calculatorcommands__lines__from_string__result.Calculatorcommands__lines__mystring.mystring__content) )) = (Standard__string.length Calculatorcommands__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:24 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Calculatorcommands__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:24 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:24 instantiated at calculatorcommands.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 25 0 0] ( [@GP_Id:17] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:25:15:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:25:15:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_(( [#"mystring.ads" 25 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Calculatorcommands__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:24 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  ( [@GP_Pretty_Ada:26225] ((Standard__string.length Calculatorcommands__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 27 0 0] ());
   ([#"mystring.adb" 28 0 0] ( (let calculatorcommands__lines__from_string__m__assume = { Calculatorcommands__lines__mystring.__split_fields = { Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = ( 0 : Calculatorcommands__lines__mystring__T13s.t13s ); Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str = (Temp_____aggregate_def_361.temp_____aggregate_def_361((32 : int))) } } in (
    [#"mystring.adb" 28 0 0] (Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( calculatorcommands__lines__from_string__m__assume.Calculatorcommands__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 28 0 0] assume { [#"mystring.adb" 28 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 29 0 0] ());
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Calculatorcommands__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 35 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=29047] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 31 0 0] ( [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:31:11:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Sloc:mystring.adb:31:11:instantiated:calculatorcommands.ads:12:4] [@GP_Id:9] (Standard__integer.range_check_(( [#"mystring.adb" 31 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Calculatorcommands__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=29047] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 32 0 0] ([#"mystring.adb" 32 0 0] ( [@GP_Reason:VC_RAISE] [@comment:         raise Constraint_Error;          ^ mystring.adb:32:10:instantiated:calculatorcommands.ads:12:4:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@GP_Id:8] [@GP_Sloc:mystring.adb:32:10:instantiated:calculatorcommands.ads:12:4] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:34:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 34 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:34:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 34 0 0] (let temp___366 [@mlw:proxy_symbol] [@introduced] = (let temp___365 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 34 0 0] begin ensures {true} let _ = (let _ = temp___365.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___365 ) with Calculatorcommands__lines__mystring.__split_fields = { ( temp___365.Calculatorcommands__lines__mystring.__split_fields ) with Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = (Calculatorcommands__lines__mystring__T13s__rep.of_rep(([#"mystring.adb" 34 0 0] ( [@GP_Id:10] [@GP_Sloc:mystring.adb:34:20:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@comment:      M.Length := S'Length;                    ^ mystring.adb:34:20:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] (Calculatorcommands__lines__mystring__T13s.range_check_(( [#"mystring.adb" 34 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Calculatorcommands__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( temp___366.Calculatorcommands__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:35:24:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 35 0 0] (let temp___367 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Calculatorcommands__lines__from_string__s.s)) ) in (
   (let temp___368 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Calculatorcommands__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 35 0 0] (Calculatorcommands__lines__from_string__L_1__i.i.int__content <- ( temp___367 ));
    () (* Translation of an Ada loop from mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
    ;
    (if ((Boolean.andb((temp___367 <= Calculatorcommands__lines__from_string__L_1__i.i.int__content)) ((Calculatorcommands__lines__from_string__L_1__i.i.int__content <= temp___368)))) then (
     [#"mystring.adb" 35 0 0] try
      ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__j.j.int__content in (
       ()))
       in () end ;
      (let temp___375 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : int
      ensures {[#"mystring.adb" 35 0 0] (result = Calculatorcommands__lines__from_string__j.j.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___373 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : Calculatorcommands__lines__mystring.mystring
       ensures {[#"mystring.adb" 35 0 0] (result = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content })} 
       in _f) in (
        ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__L_1__i.i.int__content in (
         ()))
         in () end ;
        (let temp___372 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : int
        ensures {[#"mystring.adb" 35 0 0] (result = Calculatorcommands__lines__from_string__L_1__i.i.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
         ;
         (let temp___inv_376 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__from_string__j.j.int__content = ([#"mystring.adb" 36 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:36:49:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:36:49:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 36 0 0] ( [@GP_Id:13] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:36:39:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:36:39:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_((Calculatorcommands__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Calculatorcommands__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 36 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:15] [@vc:annotation] [@GP_Sloc:mystring.adb:36:33:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:L_1_while__pragargs__cmp] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:36:33:instantiated:calculatorcommands.ads:12:4:VC_LOOP_INVARIANT] ( [@GP_Sloc:mystring.adb:36:33:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:29075] (Calculatorcommands__lines__from_string__j.j.int__content = ((Calculatorcommands__lines__from_string__L_1__i.i.int__content - (Standard__string.first Calculatorcommands__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (( True \/ ((Standard__string.first Calculatorcommands__lines__from_string__s.s) <= (Standard__string.last Calculatorcommands__lines__from_string__s.s)) )) then (
           (Calculatorcommands__lines__from_string__L_1__T24s.dynamic_property (Standard__string.first Calculatorcommands__lines__from_string__s.s) (Standard__string.last Calculatorcommands__lines__from_string__s.s) Calculatorcommands__lines__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True True True True) )/\({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = temp___373.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) ) /\ (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__from_string__j.j.int__content True True True True) )/\true )) (( ((Standard__string.first Calculatorcommands__lines__from_string__s.s) <= Calculatorcommands__lines__from_string__L_1__i.i.int__content) /\ (Calculatorcommands__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Calculatorcommands__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:37:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 37 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:37:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 37 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:37:19:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 37 0 0] (let temp___371 [@mlw:proxy_symbol] [@introduced] = (let temp___370 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 37 0 0] begin ensures {true} let _ = (let _ = temp___370.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___370 ) with Calculatorcommands__lines__mystring.__split_fields = { ( temp___370.Calculatorcommands__lines__mystring.__split_fields ) with Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str = (let temp___369 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str) (( [#"mystring.adb" 37 0 0] assert { [#"mystring.adb" 37 0 0] ([#"mystring.adb" 37 0 0] ( [@GP_Id:11] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@GP_Sloc:mystring.adb:37:16:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:37:16:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__from_string__j.j.int__content) /\ (Calculatorcommands__lines__from_string__j.j.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
            Calculatorcommands__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Calculatorcommands__lines__from_string__s.s))) (Calculatorcommands__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( temp___371.Calculatorcommands__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:38:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 38 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:38:15:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 38 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:38:12:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (Calculatorcommands__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 38 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@GP_Id:12] [@comment:         J := J + 1;                 ^ mystring.adb:38:17:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:38:17:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_((Calculatorcommands__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:35 instantiated at calculatorcommands.ads:12 *)
          ;
          (if ((Calculatorcommands__lines__from_string__L_1__i.i.int__content = temp___368)) then (
            raise Calculatorcommands__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 35 0 0] [#"mystring.adb" 35 0 0] (Calculatorcommands__lines__from_string__L_1__i.i.int__content <- ( (Calculatorcommands__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_376 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__from_string__j.j.int__content = ([#"mystring.adb" 36 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:36:49:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:36:49:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 36 0 0] ( [@GP_Id:13] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:36:39:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:36:39:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_((Calculatorcommands__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Calculatorcommands__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Calculatorcommands__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:40:14:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 40 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:40:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 40 0 0] ( [#"mystring.adb" 40 0 0] (calculatorcommands__lines__from_string__result.Calculatorcommands__lines__mystring.mystring__content <- ( { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__from_string__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 40 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Calculatorcommands__lines__length___axiom.length(calculatorcommands__lines__from_string__result.Calculatorcommands__lines__mystring.mystring__content)) = ([#"mystring.ads" 26 0 0] ( [@GP_Id:16] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:26:45:instantiated:calculatorcommands.ads:12:4] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:26:45:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 26 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Calculatorcommands__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  calculatorcommands__lines__from_string__result.Calculatorcommands__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:28 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__less__m1 as Calculatorcommands__lines__less__m1
 use        Calculatorcommands__lines__less__m2 as Calculatorcommands__lines__less__m2
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__less__i as Calculatorcommands__lines__less__i
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Calculatorcommands__lines__less__L_2 as Calculatorcommands__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__lines__less__m1___axiom as Calculatorcommands__lines__less__m1___axiom
 use        Calculatorcommands__lines__less__m2___axiom as Calculatorcommands__lines__less__m2___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__lines__less__i___axiom as Calculatorcommands__lines__less__i___axiom
 use        Calculatorcommands__lines__less__L_2___axiom as Calculatorcommands__lines__less__L_2___axiom

 val calculatorcommands__lines__less__result [@model_projected] [@name:Less] [@model_trace:25813@result]  : bool__ref 
 
 let def [#"mystring.ads" 28 0 0][@GP_Subp:mystring.ads:28] 
   (__void_param : unit)
  requires { [#"mystring.ads" 28 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:28 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 28 0 0] assume { [#"mystring.ads" 28 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 28 0 0] assume { [#"mystring.ads" 28 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:28 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:28 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 28 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:28 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 28 0 0] try
   ( ();
   ([#"mystring.adb" 44 0 0] ( [#"mystring.adb" 44 0 0] (Calculatorcommands__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 44 0 0] assume { [#"mystring.adb" 44 0 0] (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 51 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:46:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 46 0 0] (if (( ([#"mystring.adb" 46 0 0] [#"mystring.adb" 46 0 0] (([@branch_id=29204] Main.spark__branch).bool__content <- ( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__less__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) < (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__less__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length))) )));
   ( [@branch_id=29204] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:47:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (calculatorcommands__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 47 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:48:7:instantiated:calculatorcommands.ads:12:4] (if (( ([#"mystring.adb" 48 0 0] [#"mystring.adb" 48 0 0] (([@branch_id=29214] Main.spark__branch).bool__content <- ( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__less__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) > (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__less__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length))) )));
    ( [@branch_id=29214] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:49:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 49 0 0] ( [#"mystring.adb" 49 0 0] (calculatorcommands__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 49 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:51:35:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 51 0 0] ( () (* Translation of an Ada loop from mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
     ;
     (if ((Calculatorcommands__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 51 0 0] try
       ( [#"mystring.adb" 51 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___384 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 51 0 0] (val _f : int
       ensures {[#"mystring.adb" 51 0 0] (result = Calculatorcommands__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
        ;
        (let temp___inv_385 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 51 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 51 0 0] while True do
         invariant { 
          ([#"mystring.adb" 52 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:52:36:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:52:36:instantiated:calculatorcommands.ads:12:4:VC_LOOP_INVARIANT] [@GP_Id:24] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:52:36:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:29235] (Calculatorcommands__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__less__i.i.int__content True True True True) )/\true )) ((Calculatorcommands__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:53:23:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 53 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:53:35:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 53 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:53:13:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 53 0 0] (if (( ([#"mystring.adb" 53 0 0] [#"mystring.adb" 53 0 0] (([@branch_id=29242] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___382 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__less__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___382) (( [#"mystring.adb" 53 0 0] assert { [#"mystring.adb" 53 0 0] ([#"mystring.adb" 53 0 0] ( [@GP_Sloc:mystring.adb:53:23:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:53:23:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:22] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__less__i.i.int__content) /\ (Calculatorcommands__lines__less__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
          Calculatorcommands__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___383 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__less__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___383) ((  assert {  ([#"mystring.adb" 53 0 0] ( [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:53:35:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:53:35:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:23] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__less__i.i.int__content) /\ (Calculatorcommands__lines__less__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
          Calculatorcommands__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=29242] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:54:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 54 0 0] ( [#"mystring.adb" 54 0 0] (calculatorcommands__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 54 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:55:13:instantiated:calculatorcommands.ads:12:4] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=29256] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___380 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__less__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___380) (( [#"mystring.adb" 55 0 0] assert { [#"mystring.adb" 55 0 0] ([#"mystring.adb" 55 0 0] ( [@GP_Sloc:mystring.adb:55:26:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:55:26:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__less__i.i.int__content) /\ (Calculatorcommands__lines__less__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
           Calculatorcommands__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___381 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__less__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___381) ((  assert {  ([#"mystring.adb" 55 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:55:38:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:55:38:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:21] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__less__i.i.int__content) /\ (Calculatorcommands__lines__less__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
           Calculatorcommands__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=29256] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:56:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (calculatorcommands__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:58:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 58 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:58:21:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 58 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:58:18:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 58 0 0] [#"mystring.adb" 58 0 0] (Calculatorcommands__lines__less__i.i.int__content <- ( ([#"mystring.adb" 58 0 0] ( [@GP_Id:19] [@GP_Sloc:mystring.adb:58:23:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:               I := I + 1;                       ^ mystring.adb:58:23:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] (Standard__integer.range_check_((Calculatorcommands__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:51 instantiated at calculatorcommands.ads:12 *)
         ;
         (if (not ( (Calculatorcommands__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Calculatorcommands__lines__less__L_2.L_2));
         (let temp___inv_385 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Calculatorcommands__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:62:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (calculatorcommands__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 62 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculatorcommands__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:42 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__get__m as Calculatorcommands__lines__get__m
 use        Calculatorcommands__lines__get__index as Calculatorcommands__lines__get__index
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__get__m___axiom as Calculatorcommands__lines__get__m___axiom
 use        Calculatorcommands__lines__get__index___axiom as Calculatorcommands__lines__get__index___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 val calculatorcommands__lines__get__result [@model_projected] [@name:Get] [@model_trace:25997@result]  : int__ref 
 
 let def [#"mystring.ads" 42 0 0][@GP_Subp:mystring.ads:42] 
   (__void_param : unit)
  requires { [#"mystring.ads" 42 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:42 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__get__m.m True False True True) };
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:42 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:42 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 42 0 0] begin ensures {true} let _ = (let _ = (Calculatorcommands__lines__get__index.index <= (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:42 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] ( [@GP_Pretty_Ada:26375] (Calculatorcommands__lines__get__index.index <= (epsilon temp___result_390 : int.
   ( (temp___result_390 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__get__m.m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_390 Calculatorcommands__lines__get__m.m) ))) ) };
  [#"mystring.ads" 42 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:58:8:instantiated:calculatorcommands.ads:12:4] ([#"mystring.ads" 58 0 0] ( [#"mystring.ads" 58 0 0] (calculatorcommands__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___388 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__get__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___388) (( [#"mystring.ads" 58 0 0] assert { [#"mystring.ads" 58 0 0] ([#"mystring.ads" 58 0 0] ( [@GP_Shape:return__ixdcomp] [@vc:annotation] [@comment:     (M.Str(Index));             ^ mystring.ads:58:13:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.ads:58:13:instantiated:calculatorcommands.ads:12:4] [@GP_Id:25] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__get__index.index) /\ (Calculatorcommands__lines__get__index.index <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
    Calculatorcommands__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculatorcommands__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:30 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__equal__m1 as Calculatorcommands__lines__equal__m1
 use        Calculatorcommands__lines__equal__m2 as Calculatorcommands__lines__equal__m2
 use        Calculatorcommands__lines__get as Calculatorcommands__lines__get
 use        Calculatorcommands__lines__get___axiom as Calculatorcommands__lines__get___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__equal__i as Calculatorcommands__lines__equal__i
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Calculatorcommands__lines__equal__L_3 as Calculatorcommands__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__lines__equal__m1___axiom as Calculatorcommands__lines__equal__m1___axiom
 use        Calculatorcommands__lines__equal__m2___axiom as Calculatorcommands__lines__equal__m2___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__get___axiom as Calculatorcommands__lines__get___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__lines__equal__i___axiom as Calculatorcommands__lines__equal__i___axiom
 use        Calculatorcommands__lines__equal__L_3___axiom as Calculatorcommands__lines__equal__L_3___axiom

 val calculatorcommands__lines__equal__result [@name:Equal] [@model_projected] [@model_trace:25877@result]  : bool__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
  ensures { [#"mystring.ads" 30 0 0] ([#"mystring.ads" 31 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:31:15:instantiated:calculatorcommands.ads:12:4:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:31:15:instantiated:calculatorcommands.ads:12:4] [@GP_Id:35] [@model_vc_post] [@GP_Shape:pragargs__if] (if ((calculatorcommands__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:25846] [@GP_Sloc:mystring.ads:32:11:instantiated:calculatorcommands.ads:12:4] ((epsilon temp___result_406 : int.
    ( (temp___result_406 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__equal__m1.m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_406 Calculatorcommands__lines__equal__m1.m1) )) = (epsilon temp___result_407 : int.
    ( (temp___result_407 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__equal__m2.m2)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_407 Calculatorcommands__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 31 0 0]  [@name:I] [@model_trace:25864]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_408 : int.
     ( (temp___result_408 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__equal__m1.m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_408 Calculatorcommands__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:25854] [@GP_Sloc:mystring.ads:33:40:instantiated:calculatorcommands.ads:12:4] ((epsilon temp___result_409 : int.
     ( (temp___result_409 = (Calculatorcommands__lines__get.get Calculatorcommands__lines__equal__m1.m1 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_409 Calculatorcommands__lines__equal__m1.m1 i) )) = (epsilon temp___result_410 : int.
     ( (temp___result_410 = (Calculatorcommands__lines__get.get Calculatorcommands__lines__equal__m2.m2 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_410 Calculatorcommands__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Sloc:mystring.ads:31:15:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:26453] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__equal__m1.m1 True False True True) };
   assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at calculatorcommands.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at calculatorcommands.ads:12 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 68 0 0] ( [#"mystring.adb" 68 0 0] (Calculatorcommands__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 68 0 0] assume { [#"mystring.adb" 68 0 0] (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:70:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 70 0 0] (if (( ([#"mystring.adb" 70 0 0] [#"mystring.adb" 70 0 0] (([@branch_id=29393] Main.spark__branch).bool__content <- ( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) <> (Calculatorcommands__lines__mystring__T13s__rep.to_rep(Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length))) )));
   ( [@branch_id=29393] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:71:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 71 0 0] ( [#"mystring.adb" 71 0 0] (calculatorcommands__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 71 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:73:35:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 73 0 0] ( () (* Translation of an Ada loop from mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
    ;
    (if ((Calculatorcommands__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 73 0 0] try
      ( [#"mystring.adb" 73 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___393 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 73 0 0] (val _f : int
      ensures {[#"mystring.adb" 73 0 0] (result = Calculatorcommands__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
       ;
       (let temp___inv_394 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Calculatorcommands__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 73 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:54:instantiated:calculatorcommands.ads:12:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:75:54:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:29] (Standard__integer.range_check_((Calculatorcommands__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___395 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___395) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:67:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Id:30] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:75:67:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= j) /\ (j <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___396 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___396) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:79:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:75:79:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Id:31] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Calculatorcommands__lines__TmystringstrD1.first <= j) /\ (j <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:29434] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Calculatorcommands__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___397 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___397 j)))
        ) = (Standard__character__rep.to_rep (let temp___398 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___398 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 74 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:74:36:instantiated:calculatorcommands.ads:12:4:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:mystring.adb:74:36:instantiated:calculatorcommands.ads:12:4] [@GP_Id:32] [@GP_Shape:if__L_3_while__pragargs__and] ( ( [@GP_Pretty_Ada:29415] [@GP_Sloc:mystring.adb:74:36:instantiated:calculatorcommands.ads:12:4] (Calculatorcommands__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 74 0 0]  [@model_trace:29434] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Calculatorcommands__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Sloc:mystring.adb:75:60:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:29422] ((Standard__character__rep.to_rep (let temp___399 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___399 j)))
          ) = (Standard__character__rep.to_rep (let temp___400 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___400 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Calculatorcommands__lines__equal__i.i.int__content True True True True) )/\true )) ((Calculatorcommands__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:76:23:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 76 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:76:36:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 76 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:76:13:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 76 0 0] (if (( ([#"mystring.adb" 76 0 0] [#"mystring.adb" 76 0 0] (([@branch_id=29447] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___391 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___391) (( [#"mystring.adb" 76 0 0] assert { [#"mystring.adb" 76 0 0] ([#"mystring.adb" 76 0 0] ( [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:76:23:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:76:23:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:27] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__equal__i.i.int__content) /\ (Calculatorcommands__lines__equal__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
         Calculatorcommands__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___392 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___392) ((  assert {  ([#"mystring.adb" 76 0 0] ( [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:76:36:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:76:36:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:28] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__equal__i.i.int__content) /\ (Calculatorcommands__lines__equal__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
         Calculatorcommands__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=29447] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:77:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 77 0 0] ( [#"mystring.adb" 77 0 0] (calculatorcommands__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 77 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:79:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 79 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:79:21:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 79 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:79:18:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 79 0 0] [#"mystring.adb" 79 0 0] (Calculatorcommands__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 79 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:79:23:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:79:23:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] [@GP_Id:26] (Standard__integer.range_check_((Calculatorcommands__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:73 instantiated at calculatorcommands.ads:12 *)
        ;
        (if (not ( (Calculatorcommands__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Calculatorcommands__lines__equal__L_3.L_3));
        (let temp___inv_394 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Calculatorcommands__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:54:instantiated:calculatorcommands.ads:12:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:75:54:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:29] (Standard__integer.range_check_((Calculatorcommands__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___395 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___395) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:67:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Id:30] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:75:67:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= j) /\ (j <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___396 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___396) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:79:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:75:79:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Id:31] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Calculatorcommands__lines__TmystringstrD1.first <= j) /\ (j <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:29434] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Calculatorcommands__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___397 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m1.m1.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___397 j)))
         ) = (Standard__character__rep.to_rep (let temp___398 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__equal__m2.m2.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___398 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Calculatorcommands__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:82:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 82 0 0] ( [#"mystring.adb" 82 0 0] (calculatorcommands__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 82 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (calculatorcommands__lines__equal__result.bool__content) then (
   (Boolean.andb(((Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__equal__m1.m1)) = (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 33 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:33:40:instantiated:calculatorcommands.ads:12:4:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:mystring.ads:33:40:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:33] (Calculatorcommands__lines__get___axiom.get(Calculatorcommands__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 33 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:33:52:instantiated:calculatorcommands.ads:12:4:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:34] [@GP_Sloc:mystring.ads:33:52:instantiated:calculatorcommands.ads:12:4] (Calculatorcommands__lines__get___axiom.get(Calculatorcommands__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:25864]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_401 : int.
     ( (temp___result_401 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__equal__m1.m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_401 Calculatorcommands__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:25854] ((epsilon temp___result_402 : int.
     ( (temp___result_402 = (Calculatorcommands__lines__get.get Calculatorcommands__lines__equal__m1.m1 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_402 Calculatorcommands__lines__equal__m1.m1 i) )) = (epsilon temp___result_403 : int.
     ( (temp___result_403 = (Calculatorcommands__lines__get.get Calculatorcommands__lines__equal__m2.m2 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_403 Calculatorcommands__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  calculatorcommands__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:87 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_411___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_411 as Temp_____aggregate_def_411
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___413   : int.
   (let temp___412 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_411.temp_____aggregate_def_411 temp___413) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___413 True True True True)) then (
     (forall temp___414   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___412 temp___414)) = temp___413))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:38 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__substring__m as Calculatorcommands__lines__substring__m
 use        Calculatorcommands__lines__substring__from as Calculatorcommands__lines__substring__from
 use        Calculatorcommands__lines__substring__to as Calculatorcommands__lines__substring__to
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__substring__r as Calculatorcommands__lines__substring__r
 use        Calculatorcommands__lines__substring__j as Calculatorcommands__lines__substring__j
 use        Calculatorcommands__lines__substring__L_4__i as Calculatorcommands__lines__substring__L_4__i
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Calculatorcommands__lines__substring__L_4 as Calculatorcommands__lines__substring__L_4
 use        Calculatorcommands__lines__substring__L_4__T40s as Calculatorcommands__lines__substring__L_4__T40s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_411 as Temp_____aggregate_def_411
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__substring__m___axiom as Calculatorcommands__lines__substring__m___axiom
 use        Calculatorcommands__lines__substring__from___axiom as Calculatorcommands__lines__substring__from___axiom
 use        Calculatorcommands__lines__substring__to___axiom as Calculatorcommands__lines__substring__to___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__lines__substring__r___axiom as Calculatorcommands__lines__substring__r___axiom
 use        Calculatorcommands__lines__substring__j___axiom as Calculatorcommands__lines__substring__j___axiom
 use        Calculatorcommands__lines__substring__L_4___axiom as Calculatorcommands__lines__substring__L_4___axiom
 use        Calculatorcommands__lines__substring__L_4__i___axiom as Calculatorcommands__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_411___axiom as Temp_____aggregate_def_411___axiom
 use        Calculatorcommands__lines__substring__L_4__T40s___axiom as Calculatorcommands__lines__substring__L_4__T40s___axiom

 val calculatorcommands__lines__substring__result [@model_projected] [@name:Substring] [@model_trace:25953@result]  : Calculatorcommands__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 38 0 0][@GP_Subp:mystring.ads:38] 
   (__void_param : unit)
  requires { [#"mystring.ads" 38 0 0] true }
  ensures { [#"mystring.ads" 38 0 0] ([#"mystring.ads" 40 0 0] ( [@GP_Sloc:mystring.ads:40:14:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:45] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:40:14:instantiated:calculatorcommands.ads:12:4:VC_POSTCONDITION] [@model_vc_post] ( [@GP_Sloc:mystring.ads:40:14:instantiated:calculatorcommands.ads:12:4] [@GP_Pretty_Ada:26348] ((epsilon temp___result_429 : int.
   ( (temp___result_429 = (Calculatorcommands__lines__length.length calculatorcommands__lines__substring__result.Calculatorcommands__lines__mystring.mystring__content)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_429 calculatorcommands__lines__substring__result.Calculatorcommands__lines__mystring.mystring__content) )) = ((Calculatorcommands__lines__substring__to.to__ - Calculatorcommands__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:38 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:38 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:38 instantiated at calculatorcommands.ads:12 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Calculatorcommands__lines__substring__from.from <= Calculatorcommands__lines__substring__to.to__)) ((Calculatorcommands__lines__substring__to.to__ <= (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:38 instantiated at calculatorcommands.ads:12 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:25932] (Calculatorcommands__lines__substring__from.from <= Calculatorcommands__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:25935] (Calculatorcommands__lines__substring__to.to__ <= (epsilon temp___result_428 : int.
   ( (temp___result_428 = (Calculatorcommands__lines__length.length Calculatorcommands__lines__substring__m.m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_428 Calculatorcommands__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 87 0 0] ( (let calculatorcommands__lines__substring__r__assume = { Calculatorcommands__lines__mystring.__split_fields = { Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = (Calculatorcommands__lines__mystring__T13s__rep.of_rep(([#"mystring.adb" 87 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:87:44:instantiated:calculatorcommands.ads:12:4] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:87:44:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Calculatorcommands__lines__mystring__T13s.range_check_(([#"mystring.adb" 87 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:87:44:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:87:44:instantiated:calculatorcommands.ads:12:4] [@GP_Id:36] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Calculatorcommands__lines__substring__to.to__ - Calculatorcommands__lines__substring__from.from) + (1 : int)))) )))) )))); Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str = (Temp_____aggregate_def_411.temp_____aggregate_def_411((32 : int))) } } in (
     (Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( calculatorcommands__lines__substring__r__assume.Calculatorcommands__lines__mystring.__split_fields ))))
   ;
    assume {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 88 0 0] ());
   ([#"mystring.adb" 88 0 0] ( [#"mystring.adb" 88 0 0] (Calculatorcommands__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 88 0 0] assume { [#"mystring.adb" 88 0 0] (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 90 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:90:25:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 90 0 0] (let temp___415 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__substring__from.from in (
   (let temp___416 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__substring__to.to__ in (
    ( [#"mystring.adb" 90 0 0] (Calculatorcommands__lines__substring__L_4__i.i.int__content <- ( temp___415 ));
    () (* Translation of an Ada loop from mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
    ;
    (if ((Boolean.andb((temp___415 <= Calculatorcommands__lines__substring__L_4__i.i.int__content)) ((Calculatorcommands__lines__substring__L_4__i.i.int__content <= temp___416)))) then (
     [#"mystring.adb" 90 0 0] try
      ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___423 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : Calculatorcommands__lines__mystring.mystring
      ensures {[#"mystring.adb" 90 0 0] (result = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__substring__L_4__i.i.int__content in (
        ()))
        in () end ;
       (let temp___422 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : int
       ensures {[#"mystring.adb" 90 0 0] (result = Calculatorcommands__lines__substring__L_4__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__lines__substring__j.j.int__content in (
         ()))
         in () end ;
        (let temp___421 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : int
        ensures {[#"mystring.adb" 90 0 0] (result = Calculatorcommands__lines__substring__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
         ;
         (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__substring__j.j.int__content = ([#"mystring.adb" 91 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:91:46:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:91:46:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_((([#"mystring.adb" 91 0 0] ( [@GP_Id:41] [@GP_Sloc:mystring.adb:91:39:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:91:39:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Calculatorcommands__lines__substring__L_4__i.i.int__content - Calculatorcommands__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 91 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:43] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@GP_Sloc:mystring.adb:91:33:instantiated:calculatorcommands.ads:12:4] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:91:33:instantiated:calculatorcommands.ads:12:4:VC_LOOP_INVARIANT] ( [@GP_Pretty_Ada:29609] [@GP_Sloc:mystring.adb:91:33:instantiated:calculatorcommands.ads:12:4] (Calculatorcommands__lines__substring__j.j.int__content = ((Calculatorcommands__lines__substring__L_4__i.i.int__content - Calculatorcommands__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Calculatorcommands__lines__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Calculatorcommands__lines__substring__from.from <= Calculatorcommands__lines__substring__to.to__) )) then (
           (Calculatorcommands__lines__substring__L_4__T40s.dynamic_property Calculatorcommands__lines__substring__from.from Calculatorcommands__lines__substring__to.to__ Calculatorcommands__lines__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True True True True) )/\({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = temp___423.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) )) (( (Calculatorcommands__lines__substring__from.from <= Calculatorcommands__lines__substring__L_4__i.i.int__content) /\ (Calculatorcommands__lines__substring__L_4__i.i.int__content <= Calculatorcommands__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:92:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 92 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:92:16:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 92 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:92:19:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 92 0 0] (let temp___420 [@mlw:proxy_symbol] [@introduced] = (let temp___419 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 92 0 0] begin ensures {true} let _ = (let _ = temp___419.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___419 ) with Calculatorcommands__lines__mystring.__split_fields = { ( temp___419.Calculatorcommands__lines__mystring.__split_fields ) with Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str = (let temp___418 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str) (( [#"mystring.adb" 92 0 0] assert { [#"mystring.adb" 92 0 0] ([#"mystring.adb" 92 0 0] ( [@GP_Sloc:mystring.adb:92:16:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:92:16:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@GP_Id:39] [@GP_Reason:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__substring__j.j.int__content) /\ (Calculatorcommands__lines__substring__j.j.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
            Calculatorcommands__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___417 [@mlw:proxy_symbol] [@introduced] = Calculatorcommands__lines__substring__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___417) ((  assert {  ([#"mystring.adb" 92 0 0] ( [@GP_Sloc:mystring.adb:92:28:instantiated:calculatorcommands.ads:12:4] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:92:28:instantiated:calculatorcommands.ads:12:4:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:38] [@GP_Reason:VC_INDEX_CHECK] ( (Calculatorcommands__lines__TmystringstrD1.first <= Calculatorcommands__lines__substring__L_4__i.i.int__content) /\ (Calculatorcommands__lines__substring__L_4__i.i.int__content <= Calculatorcommands__lines__TmystringstrD1.last) ) )) };
             Calculatorcommands__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( temp___420.Calculatorcommands__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:93:10:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 93 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:93:15:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 93 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:93:12:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 93 0 0] [#"mystring.adb" 93 0 0] (Calculatorcommands__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 93 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:93:17:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:93:17:instantiated:calculatorcommands.ads:12:4] [@GP_Id:40] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Calculatorcommands__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:90 instantiated at calculatorcommands.ads:12 *)
          ;
          (if ((Calculatorcommands__lines__substring__L_4__i.i.int__content = temp___416)) then (
            raise Calculatorcommands__lines__substring__L_4.L_4));
          ([#"mystring.adb" 90 0 0] [#"mystring.adb" 90 0 0] (Calculatorcommands__lines__substring__L_4__i.i.int__content <- ( (Calculatorcommands__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_425 [@mlw:proxy_symbol] [@introduced] = (Calculatorcommands__lines__substring__j.j.int__content = ([#"mystring.adb" 91 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:91:46:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:91:46:instantiated:calculatorcommands.ads:12:4] (Standard__integer.range_check_((([#"mystring.adb" 91 0 0] ( [@GP_Id:41] [@GP_Sloc:mystring.adb:91:39:instantiated:calculatorcommands.ads:12:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:91:39:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Calculatorcommands__lines__substring__L_4__i.i.int__content - Calculatorcommands__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Calculatorcommands__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:95:14:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 95 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:95:7:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 95 0 0] ( [#"mystring.adb" 95 0 0] (calculatorcommands__lines__substring__result.Calculatorcommands__lines__mystring.mystring__content <- ( { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__substring__r.r__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 95 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Calculatorcommands__lines__length___axiom.length(calculatorcommands__lines__substring__result.Calculatorcommands__lines__mystring.mystring__content)) = ([#"mystring.ads" 40 0 0] ( [@GP_Sloc:mystring.ads:40:51:instantiated:calculatorcommands.ads:12:4] [@GP_Id:44] [@vc:annotation] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:40:51:instantiated:calculatorcommands.ads:12:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] (Standard__integer.range_check_(((Calculatorcommands__lines__substring__to.to__ - Calculatorcommands__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  calculatorcommands__lines__substring__result.Calculatorcommands__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__get_line__m as Calculatorcommands__lines__get_line__m
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Calculatorcommands__lines__get_line__m___axiom as Calculatorcommands__lines__get_line__m___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__TmystringstrD1___axiom as Calculatorcommands__lines__TmystringstrD1___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 let def [#"mystring.ads" 45 0 0][@GP_Subp:mystring.ads:45] 
   (__void_param : unit)
  requires { [#"mystring.ads" 45 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:45 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 45 0 0] assume { [#"mystring.ads" 45 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:45 instantiated at calculatorcommands.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:45 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 45 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:45 instantiated at calculatorcommands.ads:12 *)
  ;
  [#"mystring.ads" 45 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:100:18:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 100 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:100:18:instantiated:calculatorcommands.ads:12:4] ([#"mystring.adb" 100 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 100 0 0] assert { [#"mystring.adb" 100 0 0] ([#"mystring.adb" 100 0 0] ( [@GP_Id:46] [@vc:annotation] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:100:44:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Sloc:mystring.adb:100:44:instantiated:calculatorcommands.ads:12:4] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Calculatorcommands__lines__TmystringstrD1.first) (Calculatorcommands__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str) (Calculatorcommands__lines__TmystringstrD1.first) (Calculatorcommands__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Calculatorcommands__lines__mystring__T13s__rep.to_rep({ Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content }.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___432 [@mlw:proxy_symbol] [@introduced] = (let temp___431 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___431.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___431 ) with Calculatorcommands__lines__mystring.__split_fields = { ( temp___431.Calculatorcommands__lines__mystring.__split_fields ) with Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str = (let temp___430 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___430))) ((Standard__string.first(temp___430))) (Calculatorcommands__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( temp___432.Calculatorcommands__lines__mystring.__split_fields ))))
     ;
     (let temp___434 [@mlw:proxy_symbol] [@introduced] = (let temp___433 [@mlw:proxy_symbol] [@introduced] = { Calculatorcommands__lines__mystring.__split_fields = Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___433.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___433 ) with Calculatorcommands__lines__mystring.__split_fields = { ( temp___433.Calculatorcommands__lines__mystring.__split_fields ) with Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length = (Calculatorcommands__lines__mystring__T13s__rep.of_rep(([#"mystring.adb" 100 0 0] ( [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:100:60:instantiated:calculatorcommands.ads:12:4:VC_RANGE_CHECK] [@GP_Id:47] [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Sloc:mystring.adb:100:60:instantiated:calculatorcommands.ads:12:4] [@GP_Reason:VC_RANGE_CHECK] (Calculatorcommands__lines__mystring__T13s.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Calculatorcommands__lines__get_line__m.m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content <- ( temp___434.Calculatorcommands__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "handle_unlock" defined at calculatorcommands.ads:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__handle_unlock__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__handle_unlock__s as Calculatorcommands__handle_unlock__s
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock__t as Calculatorcommands__handle_unlock__t
 use        Calculatorcommands__handle_unlock__masterpin as Calculatorcommands__handle_unlock__masterpin
 use        Calculatorcommands__handle_unlock__unlocked as Calculatorcommands__handle_unlock__unlocked
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Calculatorcommands__handle_unlock__B_1__rawpin as Calculatorcommands__handle_unlock__B_1__rawpin
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Temp___String_Literal_436 as Temp___String_Literal_436
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_437 as Temp___String_Literal_437
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_438 as Temp___String_Literal_438
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_439 as Temp___String_Literal_439
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_440 as Temp___String_Literal_440
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__handle_unlock__B_1__rawpin___axiom as Calculatorcommands__handle_unlock__B_1__rawpin___axiom
 use        Calculatorcommands__handle_unlock__s___axiom as Calculatorcommands__handle_unlock__s___axiom
 use        Calculatorcommands__handle_unlock__t___axiom as Calculatorcommands__handle_unlock__t___axiom
 use        Calculatorcommands__handle_unlock__masterpin___axiom as Calculatorcommands__handle_unlock__masterpin___axiom
 use        Calculatorcommands__handle_unlock__unlocked___axiom as Calculatorcommands__handle_unlock__unlocked___axiom
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 let def [#"calculatorcommands.ads" 15 0 0][@GP_Subp:calculatorcommands.ads:15] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 15 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculatorcommands.ads:15 *)
  ;
  [#"calculatorcommands.ads" 15 0 0] assume { [#"calculatorcommands.ads" 15 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__handle_unlock__s.s True False True True) };
  [#"calculatorcommands.ads" 15 0 0] assume { [#"calculatorcommands.ads" 15 0 0] (Mystringtokeniser__tokenarray___axiom.dynamic_invariant Calculatorcommands__handle_unlock__t.t True False True True) };
  [#"calculatorcommands.ads" 15 0 0] assume { [#"calculatorcommands.ads" 15 0 0] (Pin__pin___axiom.dynamic_invariant Calculatorcommands__handle_unlock__masterpin.masterpin True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculatorcommands.ads:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculatorcommands.ads:15 *)
  ;
  [#"calculatorcommands.ads" 15 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculatorcommands.ads:15 *)
  ;
  [#"calculatorcommands.ads" 15 0 0] try
   ( ();
   ([#"calculatorcommands.adb" 11 0 0] ());
   ([#"calculatorcommands.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:calculatorcommands.adb:17:7] ([#"calculatorcommands.adb" 17 0 0] (if (( ([#"calculatorcommands.adb" 17 0 0] [#"calculatorcommands.adb" 17 0 0] (([@branch_id=2381] Main.spark__branch).bool__content <- ( ( ( (( [#"calculatorcommands.adb" 17 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_unlock__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.first(Calculatorcommands__handle_unlock__t.t)) ) > (2 : int)) || (( [#"calculatorcommands.adb" 17 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_unlock__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.last(Calculatorcommands__handle_unlock__t.t)) ) < (2 : int)) ) || ((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_unlock__t.t))) ((let temp___444 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
    ( [#"calculatorcommands.adb" 17 0 0] assert { [#"calculatorcommands.adb" 17 0 0] ([#"calculatorcommands.adb" 17 0 0] ( [@GP_Sloc:calculatorcommands.adb:17:52] [@vc:annotation] [@comment:      if T'First > 2 or else T'Last < 2 or else T (2).Length = 0 then                                                    ^ calculatorcommands.adb:17:52:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:50] [@GP_Shape:if__orelse__cmp__selectcomp__ixdcomp] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t) <= temp___444) /\ (temp___444 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) ) )) };
    temp___444 )))
   )).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) = (0 : int)) ) )));
   ( [@branch_id=2381] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:18:10] ([#"calculatorcommands.adb" 18 0 0] ()) );
    ( [@GP_Sloc:calculatorcommands.adb:18:10] ([#"calculatorcommands.adb" 18 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_436.temp___String_Literal_436(()))) ((1 : int)) ((19 : int))))) )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:20:10] ([#"calculatorcommands.adb" 20 0 0] ( ();
    ([#"calculatorcommands.adb" 21 0 0] ());
    ([#"calculatorcommands.adb" 21 0 0] ( (let calculatorcommands__handle_unlock__B_1__rawpin__assume = (Calculatorcommands__get_token_string___axiom.get_token_string(Calculatorcommands__handle_unlock__s.s) ((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_unlock__t.t))) ((let temp___443 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
     ( [#"calculatorcommands.adb" 21 0 0] assert { [#"calculatorcommands.adb" 21 0 0] ([#"calculatorcommands.adb" 21 0 0] ( [@GP_Shape:if__B_1_declblk__rawpin_decl__call_get_token_string__ixdcomp] [@vc:annotation] [@GP_Id:49] [@GP_Sloc:calculatorcommands.adb:21:65] [@comment:            RawPIN : constant String := Get_Token_String (S, T (2));                                                                 ^ calculatorcommands.adb:21:65:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t) <= temp___443) /\ (temp___443 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) ) )) };
     temp___443 )))
    )))) in (
      assume {  (calculatorcommands__handle_unlock__B_1__rawpin__assume = Calculatorcommands__handle_unlock__B_1__rawpin.rawpin) }))
    ;
     assume {  (Standard__string___axiom.dynamic_invariant Calculatorcommands__handle_unlock__B_1__rawpin.rawpin True False True True) } ));
    ();
    ( [@GP_Sloc:calculatorcommands.adb:23:13] ([#"calculatorcommands.adb" 23 0 0] (if (( ([#"calculatorcommands.adb" 23 0 0] [#"calculatorcommands.adb" 23 0 0] (([@branch_id=2423] Main.spark__branch).bool__content <- ( ( (( [#"calculatorcommands.adb" 23 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_unlock__B_1__rawpin.rawpin in (
     ()))
     in () end ;
    (Standard__string.length(Calculatorcommands__handle_unlock__B_1__rawpin.rawpin)) ) <> (4 : int)) || ( (let temp___441 [@mlw:proxy_symbol] [@introduced] = [#"calculatorcommands.adb" 23 0 0] (val _f : int
    in _f) in (
     (if ((Boolean.andb(((Standard__string.first(Calculatorcommands__handle_unlock__B_1__rawpin.rawpin)) <= temp___441)) ((temp___441 <= (Standard__string.last(Calculatorcommands__handle_unlock__B_1__rawpin.rawpin)))))) then (
      [#"calculatorcommands.adb" 23 0 0] begin ensures {true} let _ = (let _ = (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Calculatorcommands__handle_unlock__B_1__rawpin.rawpin) temp___441)) in (
       not ( (Boolean.andb(((48 : int) <= c)) ((c <= (57 : int)))) )))
       in (
       ()))
       in () end ))))
    ;
    [#"calculatorcommands.adb" 23 0 0] (val _f : bool
    ensures {[#"calculatorcommands.adb" 23 0 0] ( (result = True) <-> (exists temp___442  : int.
     ( ( ((Standard__string.first Calculatorcommands__handle_unlock__B_1__rawpin.rawpin) <= temp___442) /\ (temp___442 <= (Standard__string.last Calculatorcommands__handle_unlock__B_1__rawpin.rawpin)) ) /\ (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Calculatorcommands__handle_unlock__B_1__rawpin.rawpin) temp___442)) in (
      ((Boolean.notb (Boolean.andb ((48 : int) <= c) (c <= (57 : int)))) = True)))
      )) )} 
    in _f) ) ) )));
    ( [@branch_id=2423] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:calculatorcommands.adb:26:16] ([#"calculatorcommands.adb" 26 0 0] ()) );
     ( [@GP_Sloc:calculatorcommands.adb:26:16] ([#"calculatorcommands.adb" 26 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_437.temp___String_Literal_437(()))) ((1 : int)) ((46 : int))))) )) ) )) else (
     ( [@GP_Sloc:calculatorcommands.adb:27:13] (if (( ([#"calculatorcommands.adb" 27 0 0] [#"calculatorcommands.adb" 27 0 0] (([@branch_id=2449] Main.spark__branch).bool__content <- ( Calculatorcommands__handle_unlock__unlocked.unlocked.bool__content )));
     ( [@branch_id=2449] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:28:16] ([#"calculatorcommands.adb" 28 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:28:16] ([#"calculatorcommands.adb" 28 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_440.temp___String_Literal_440(()))) ((1 : int)) ((17 : int))))) )) ) )) else (
      ( [@GP_Sloc:calculatorcommands.adb:29:13] (if (( ([#"calculatorcommands.adb" 29 0 0] [#"calculatorcommands.adb" 29 0 0] (([@branch_id=2454] Main.spark__branch).bool__content <- ( (([#"calculatorcommands.adb" 29 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:48] [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:29:31] [@comment:            elsif PIN."=" (PIN.From_String (RawPIN), MasterPIN) then                               ^ calculatorcommands.adb:29:31:VC_PRECONDITION] [@GP_Shape:if__B_1_declblk__if__cmp__call_from_string] (Pin__from_string___axiom.from_string(Calculatorcommands__handle_unlock__B_1__rawpin.rawpin)) )) = Calculatorcommands__handle_unlock__masterpin.masterpin) )));
      ( [@branch_id=2454] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:30:25] ([#"calculatorcommands.adb" 30 0 0] [#"calculatorcommands.adb" 30 0 0] (Calculatorcommands__handle_unlock__unlocked.unlocked.bool__content <- ( (Boolean.of_int((1 : int))) ))) );
       ( [@GP_Sloc:calculatorcommands.adb:31:16] ([#"calculatorcommands.adb" 31 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:31:16] ([#"calculatorcommands.adb" 31 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_439.temp___String_Literal_439(()))) ((1 : int)) ((22 : int))))) )) ) )) else (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:33:16] ([#"calculatorcommands.adb" 33 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:33:16] ([#"calculatorcommands.adb" 33 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_438.temp___String_Literal_438(()))) ((1 : int)) ((28 : int))))) )) ) ))) ))) )))) ) )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "handle_lock" defined at calculatorcommands.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__handle_lock__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_lock__s as Calculatorcommands__handle_lock__s
 use        Calculatorcommands__handle_lock__t as Calculatorcommands__handle_lock__t
 use        Calculatorcommands__handle_lock__masterpin as Calculatorcommands__handle_lock__masterpin
 use        Calculatorcommands__handle_lock__unlocked as Calculatorcommands__handle_lock__unlocked
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Calculatorcommands__handle_lock__B_2__rawpin as Calculatorcommands__handle_lock__B_2__rawpin
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Temp___String_Literal_447 as Temp___String_Literal_447
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_448 as Temp___String_Literal_448
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_449 as Temp___String_Literal_449
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_450 as Temp___String_Literal_450
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__handle_lock__B_2__rawpin___axiom as Calculatorcommands__handle_lock__B_2__rawpin___axiom
 use        Calculatorcommands__handle_lock__s___axiom as Calculatorcommands__handle_lock__s___axiom
 use        Calculatorcommands__handle_lock__t___axiom as Calculatorcommands__handle_lock__t___axiom
 use        Calculatorcommands__handle_lock__masterpin___axiom as Calculatorcommands__handle_lock__masterpin___axiom
 use        Calculatorcommands__handle_lock__unlocked___axiom as Calculatorcommands__handle_lock__unlocked___axiom
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 let def [#"calculatorcommands.ads" 21 0 0][@GP_Subp:calculatorcommands.ads:21] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculatorcommands.ads:21 *)
  ;
  [#"calculatorcommands.ads" 21 0 0] assume { [#"calculatorcommands.ads" 21 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__handle_lock__s.s True False True True) };
  [#"calculatorcommands.ads" 21 0 0] assume { [#"calculatorcommands.ads" 21 0 0] (Mystringtokeniser__tokenarray___axiom.dynamic_invariant Calculatorcommands__handle_lock__t.t True False True True) };
  [#"calculatorcommands.ads" 21 0 0] assume { [#"calculatorcommands.ads" 21 0 0] (Pin__pin___axiom.dynamic_invariant Calculatorcommands__handle_lock__masterpin.masterpin.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculatorcommands.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculatorcommands.ads:21 *)
  ;
  [#"calculatorcommands.ads" 21 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculatorcommands.ads:21 *)
  ;
  [#"calculatorcommands.ads" 21 0 0] try
   ( ();
   ([#"calculatorcommands.adb" 39 0 0] ());
   ([#"calculatorcommands.adb" 48 0 0] ());
   ();
   ( [@GP_Sloc:calculatorcommands.adb:45:7] ([#"calculatorcommands.adb" 45 0 0] (if (( ([#"calculatorcommands.adb" 45 0 0] [#"calculatorcommands.adb" 45 0 0] (([@branch_id=2527] Main.spark__branch).bool__content <- ( ( ( (( [#"calculatorcommands.adb" 45 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_lock__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.first(Calculatorcommands__handle_lock__t.t)) ) > (2 : int)) || (( [#"calculatorcommands.adb" 45 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_lock__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.last(Calculatorcommands__handle_lock__t.t)) ) < (2 : int)) ) || ((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_lock__t.t))) ((let temp___454 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
    ( [#"calculatorcommands.adb" 45 0 0] assert { [#"calculatorcommands.adb" 45 0 0] ([#"calculatorcommands.adb" 45 0 0] ( [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:45:52] [@GP_Reason:VC_INDEX_CHECK] [@comment:      if T'First > 2 or else T'Last < 2 or else T (2).Length = 0 then                                                    ^ calculatorcommands.adb:45:52:VC_INDEX_CHECK] [@GP_Id:53] [@GP_Shape:if__orelse__cmp__selectcomp__ixdcomp] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t) <= temp___454) /\ (temp___454 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) ) )) };
    temp___454 )))
   )).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) = (0 : int)) ) )));
   ( [@branch_id=2527] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:46:10] ([#"calculatorcommands.adb" 46 0 0] ()) );
    ( [@GP_Sloc:calculatorcommands.adb:46:10] ([#"calculatorcommands.adb" 46 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_447.temp___String_Literal_447(()))) ((1 : int)) ((20 : int))))) )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:48:10] ([#"calculatorcommands.adb" 48 0 0] ( ();
    ([#"calculatorcommands.adb" 49 0 0] ());
    ([#"calculatorcommands.adb" 49 0 0] ( (let calculatorcommands__handle_lock__B_2__rawpin__assume = (Calculatorcommands__get_token_string___axiom.get_token_string(Calculatorcommands__handle_lock__s.s) ((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_lock__t.t))) ((let temp___453 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
     ( [#"calculatorcommands.adb" 49 0 0] assert { [#"calculatorcommands.adb" 49 0 0] ([#"calculatorcommands.adb" 49 0 0] ( [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:            RawPIN : constant String := Get_Token_String (S, T (2));                                                                 ^ calculatorcommands.adb:49:65:VC_INDEX_CHECK] [@GP_Shape:if__B_2_declblk__rawpin_decl__call_get_token_string__ixdcomp] [@GP_Sloc:calculatorcommands.adb:49:65] [@GP_Id:52] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t) <= temp___453) /\ (temp___453 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) ) )) };
     temp___453 )))
    )))) in (
      assume {  (calculatorcommands__handle_lock__B_2__rawpin__assume = Calculatorcommands__handle_lock__B_2__rawpin.rawpin) }))
    ;
     assume {  (Standard__string___axiom.dynamic_invariant Calculatorcommands__handle_lock__B_2__rawpin.rawpin True False True True) } ));
    ();
    ( [@GP_Sloc:calculatorcommands.adb:51:13] ([#"calculatorcommands.adb" 51 0 0] (if (( ([#"calculatorcommands.adb" 51 0 0] [#"calculatorcommands.adb" 51 0 0] (([@branch_id=2569] Main.spark__branch).bool__content <- ( ( (( [#"calculatorcommands.adb" 51 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_lock__B_2__rawpin.rawpin in (
     ()))
     in () end ;
    (Standard__string.length(Calculatorcommands__handle_lock__B_2__rawpin.rawpin)) ) <> (4 : int)) || ( (let temp___451 [@mlw:proxy_symbol] [@introduced] = [#"calculatorcommands.adb" 51 0 0] (val _f : int
    in _f) in (
     (if ((Boolean.andb(((Standard__string.first(Calculatorcommands__handle_lock__B_2__rawpin.rawpin)) <= temp___451)) ((temp___451 <= (Standard__string.last(Calculatorcommands__handle_lock__B_2__rawpin.rawpin)))))) then (
      [#"calculatorcommands.adb" 51 0 0] begin ensures {true} let _ = (let _ = (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Calculatorcommands__handle_lock__B_2__rawpin.rawpin) temp___451)) in (
       not ( (Boolean.andb(((48 : int) <= c)) ((c <= (57 : int)))) )))
       in (
       ()))
       in () end ))))
    ;
    [#"calculatorcommands.adb" 51 0 0] (val _f : bool
    ensures {[#"calculatorcommands.adb" 51 0 0] ( (result = True) <-> (exists temp___452  : int.
     ( ( ((Standard__string.first Calculatorcommands__handle_lock__B_2__rawpin.rawpin) <= temp___452) /\ (temp___452 <= (Standard__string.last Calculatorcommands__handle_lock__B_2__rawpin.rawpin)) ) /\ (let c = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Calculatorcommands__handle_lock__B_2__rawpin.rawpin) temp___452)) in (
      ((Boolean.notb (Boolean.andb ((48 : int) <= c) (c <= (57 : int)))) = True)))
      )) )} 
    in _f) ) ) )));
    ( [@branch_id=2569] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:calculatorcommands.adb:54:16] ([#"calculatorcommands.adb" 54 0 0] ()) );
     ( [@GP_Sloc:calculatorcommands.adb:54:16] ([#"calculatorcommands.adb" 54 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_448.temp___String_Literal_448(()))) ((1 : int)) ((46 : int))))) )) ) )) else (
     ( [@GP_Sloc:calculatorcommands.adb:55:13] (if (( ([#"calculatorcommands.adb" 55 0 0] [#"calculatorcommands.adb" 55 0 0] (([@branch_id=2594] Main.spark__branch).bool__content <- ( not ( Calculatorcommands__handle_lock__unlocked.unlocked.bool__content ) )));
     ( [@branch_id=2594] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:56:16] ([#"calculatorcommands.adb" 56 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:56:16] ([#"calculatorcommands.adb" 56 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_450.temp___String_Literal_450(()))) ((1 : int)) ((15 : int))))) )) ) )) else (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:58:32] ([#"calculatorcommands.adb" 58 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:58:26] ([#"calculatorcommands.adb" 58 0 0] [#"calculatorcommands.adb" 58 0 0] (Calculatorcommands__handle_lock__masterpin.masterpin.int__content <- ( ([#"calculatorcommands.adb" 58 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:               MasterPIN := PIN.From_String (RawPIN);                                ^ calculatorcommands.adb:58:32:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:58:32] [@GP_Shape:if__B_2_declblk__if__masterpin_assign__call_from_string] [@GP_Id:51] (Pin__from_string___axiom.from_string(Calculatorcommands__handle_lock__B_2__rawpin.rawpin)) )) ))) );
      ( [@GP_Sloc:calculatorcommands.adb:59:25] ([#"calculatorcommands.adb" 59 0 0] [#"calculatorcommands.adb" 59 0 0] (Calculatorcommands__handle_lock__unlocked.unlocked.bool__content <- ( (Boolean.of_int((0 : int))) ))) );
      ( [@GP_Sloc:calculatorcommands.adb:60:16] ([#"calculatorcommands.adb" 60 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:60:16] ([#"calculatorcommands.adb" 60 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_449.temp___String_Literal_449(()))) ((1 : int)) ((20 : int))))) )) ) ))) )))) ) )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "handle_push1" defined at calculatorcommands.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__handle_push1__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push1__s as Calculatorcommands__handle_push1__s
 use        Calculatorcommands__handle_push1__t as Calculatorcommands__handle_push1__t
 use        Calculatorcommands__handle_push1__unlocked as Calculatorcommands__handle_push1__unlocked
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Calculatorcommands__handle_push1__stack as Calculatorcommands__handle_push1__stack
 use        Calculatorcommands__handle_push1__stack_top as Calculatorcommands__handle_push1__stack_top
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Calculatorcommands__handle_push1__B_3__rawval as Calculatorcommands__handle_push1__B_3__rawval
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Calculatorcommands__handle_push1__B_3__B_4__val as Calculatorcommands__handle_push1__B_3__B_4__val
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Temp___String_Literal_457 as Temp___String_Literal_457
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_458 as Temp___String_Literal_458
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_459 as Temp___String_Literal_459
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_460 as Temp___String_Literal_460
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_466 as Temp___String_Literal_466
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_467 as Temp___String_Literal_467
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__handle_push1__B_3__rawval___axiom as Calculatorcommands__handle_push1__B_3__rawval___axiom
 use        Calculatorcommands__handle_push1__B_3__B_4__val___axiom as Calculatorcommands__handle_push1__B_3__B_4__val___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Calculatorcommands__handle_push1__s___axiom as Calculatorcommands__handle_push1__s___axiom
 use        Calculatorcommands__handle_push1__t___axiom as Calculatorcommands__handle_push1__t___axiom
 use        Calculatorcommands__handle_push1__unlocked___axiom as Calculatorcommands__handle_push1__unlocked___axiom
 use        Calculatorcommands__handle_push1__stack___axiom as Calculatorcommands__handle_push1__stack___axiom
 use        Calculatorcommands__handle_push1__stack_top___axiom as Calculatorcommands__handle_push1__stack_top___axiom
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__Toperand_stackD1___axiom as Calculatorcommands__Toperand_stackD1___axiom

 let def [#"calculatorcommands.ads" 27 0 0][@GP_Subp:calculatorcommands.ads:27] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 27 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculatorcommands.ads:27 *)
  ;
  [#"calculatorcommands.ads" 27 0 0] assume { [#"calculatorcommands.ads" 27 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__handle_push1__s.s True False True True) };
  [#"calculatorcommands.ads" 27 0 0] assume { [#"calculatorcommands.ads" 27 0 0] (Mystringtokeniser__tokenarray___axiom.dynamic_invariant Calculatorcommands__handle_push1__t.t True False True True) };
  [#"calculatorcommands.ads" 27 0 0] assume { [#"calculatorcommands.ads" 27 0 0] (Calculatorcommands__operand_stack___axiom.dynamic_invariant Calculatorcommands__handle_push1__stack.stack.Array__Int__Standard__integer.map__content True False True True) };
  [#"calculatorcommands.ads" 27 0 0] assume { [#"calculatorcommands.ads" 27 0 0] (Standard__natural___axiom.dynamic_invariant Calculatorcommands__handle_push1__stack_top.stack_top.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculatorcommands.ads:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculatorcommands.ads:27 *)
  ;
  [#"calculatorcommands.ads" 27 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculatorcommands.ads:27 *)
  ;
  [#"calculatorcommands.ads" 27 0 0] try
   ( ();
   ([#"calculatorcommands.adb" 66 0 0] ());
   ([#"calculatorcommands.adb" 73 0 0] ());
   ([#"calculatorcommands.adb" 82 0 0] ());
   ();
   ( [@GP_Sloc:calculatorcommands.adb:75:7] ([#"calculatorcommands.adb" 75 0 0] (if (( ([#"calculatorcommands.adb" 75 0 0] [#"calculatorcommands.adb" 75 0 0] (([@branch_id=2684] Main.spark__branch).bool__content <- ( not ( Calculatorcommands__handle_push1__unlocked.unlocked ) )));
   ( [@branch_id=2684] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:76:10] ([#"calculatorcommands.adb" 76 0 0] ()) );
    ( [@GP_Sloc:calculatorcommands.adb:76:10] ([#"calculatorcommands.adb" 76 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_457.temp___String_Literal_457(()))) ((1 : int)) ((42 : int))))) )) ) )) else (
    ( [@GP_Sloc:calculatorcommands.adb:77:7] (if (( ([#"calculatorcommands.adb" 77 0 0] [#"calculatorcommands.adb" 77 0 0] (([@branch_id=2691] Main.spark__branch).bool__content <- ( ( ( (( [#"calculatorcommands.adb" 77 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_push1__t.t in (
     ()))
     in () end ;
    (Mystringtokeniser__tokenarray.first(Calculatorcommands__handle_push1__t.t)) ) > (2 : int)) || (( [#"calculatorcommands.adb" 77 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_push1__t.t in (
     ()))
     in () end ;
    (Mystringtokeniser__tokenarray.last(Calculatorcommands__handle_push1__t.t)) ) < (2 : int)) ) || ((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_push1__t.t))) ((let temp___468 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
     ( [#"calculatorcommands.adb" 77 0 0] assert { [#"calculatorcommands.adb" 77 0 0] ([#"calculatorcommands.adb" 77 0 0] ( [@GP_Id:59] [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:77:55] [@comment:      elsif T'First > 2 or else T'Last < 2 or else T (2).Length = 0 then                                                       ^ calculatorcommands.adb:77:55:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__orelse__cmp__selectcomp__ixdcomp] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t) <= temp___468) /\ (temp___468 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) ) )) };
     temp___468 )))
    )).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) = (0 : int)) ) )));
    ( [@branch_id=2691] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:calculatorcommands.adb:78:10] ([#"calculatorcommands.adb" 78 0 0] ()) );
     ( [@GP_Sloc:calculatorcommands.adb:78:10] ([#"calculatorcommands.adb" 78 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_467.temp___String_Literal_467(()))) ((1 : int)) ((21 : int))))) )) ) )) else (
     ( [@GP_Sloc:calculatorcommands.adb:79:7] (if (( ([#"calculatorcommands.adb" 79 0 0] [#"calculatorcommands.adb" 79 0 0] (([@branch_id=2714] Main.spark__branch).bool__content <- ( (Calculatorcommands__handle_push1__stack_top.stack_top.int__content >= (512 : int)) )));
     ( [@branch_id=2714] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:80:10] ([#"calculatorcommands.adb" 80 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:80:10] ([#"calculatorcommands.adb" 80 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_466.temp___String_Literal_466(()))) ((1 : int)) ((22 : int))))) )) ) )) else (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:82:10] ([#"calculatorcommands.adb" 82 0 0] ( ();
      ([#"calculatorcommands.adb" 83 0 0] ());
      ([#"calculatorcommands.adb" 83 0 0] ( (let calculatorcommands__handle_push1__B_3__rawval__assume = (Calculatorcommands__get_token_string___axiom.get_token_string(Calculatorcommands__handle_push1__s.s) ((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_push1__t.t))) ((let temp___465 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
       ( [#"calculatorcommands.adb" 83 0 0] assert { [#"calculatorcommands.adb" 83 0 0] ([#"calculatorcommands.adb" 83 0 0] ( [@GP_Id:58] [@GP_Shape:if__B_3_declblk__rawval_decl__call_get_token_string__ixdcomp] [@vc:annotation] [@comment:            RawVal : constant String := Get_Token_String (S, T (2));                                                                 ^ calculatorcommands.adb:83:65:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:calculatorcommands.adb:83:65] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t) <= temp___465) /\ (temp___465 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) ) )) };
       temp___465 )))
      )))) in (
        assume {  (calculatorcommands__handle_push1__B_3__rawval__assume = Calculatorcommands__handle_push1__B_3__rawval.rawval) }))
      ;
       assume {  (Standard__string___axiom.dynamic_invariant Calculatorcommands__handle_push1__B_3__rawval.rawval True False True True) } ));
      ([#"calculatorcommands.adb" 88 0 0] ());
      ();
      ( [@GP_Sloc:calculatorcommands.adb:85:13] ([#"calculatorcommands.adb" 85 0 0] (if (( ([#"calculatorcommands.adb" 85 0 0] [#"calculatorcommands.adb" 85 0 0] (([@branch_id=2739] Main.spark__branch).bool__content <- ( ( (( [#"calculatorcommands.adb" 85 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_push1__B_3__rawval.rawval in (
       ()))
       in () end ;
      (Standard__string.length(Calculatorcommands__handle_push1__B_3__rawval.rawval)) ) = (0 : int)) || (( [#"calculatorcommands.adb" 85 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_push1__B_3__rawval.rawval in (
       ()))
       in () end ;
      (Standard__string.length(Calculatorcommands__handle_push1__B_3__rawval.rawval)) ) > (20 : int)) ) )));
      ( [@branch_id=2739] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:86:16] ([#"calculatorcommands.adb" 86 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:86:16] ([#"calculatorcommands.adb" 86 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_458.temp___String_Literal_458(()))) ((1 : int)) ((15 : int))))) )) ) )) else (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:88:16] ([#"calculatorcommands.adb" 88 0 0] ( ();
       ([#"calculatorcommands.adb" 90 0 0] ());
       ([#"calculatorcommands.adb" 89 0 0] ( (let calculatorcommands__handle_push1__B_3__B_4__val__assume = (Stringtointeger__from_string___axiom.from_string(Calculatorcommands__handle_push1__B_3__rawval.rawval)) in (
        [#"calculatorcommands.adb" 89 0 0] assume { [#"calculatorcommands.adb" 89 0 0] (calculatorcommands__handle_push1__B_3__B_4__val__assume = Calculatorcommands__handle_push1__B_3__B_4__val.val__) }))
       ;
       [#"calculatorcommands.adb" 89 0 0] assume { [#"calculatorcommands.adb" 89 0 0] (Standard__integer___axiom.dynamic_invariant Calculatorcommands__handle_push1__B_3__B_4__val.val__ True False True True) } ));
       ();
       ( [@GP_Sloc:calculatorcommands.adb:92:29] ([#"calculatorcommands.adb" 92 0 0] [#"calculatorcommands.adb" 92 0 0] (Calculatorcommands__handle_push1__stack_top.stack_top.int__content <- ( ([#"calculatorcommands.adb" 92 0 0] ( [@comment:                  Stack_Top := Stack_Top + 1;                                          ^ calculatorcommands.adb:92:42:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__B_3_declblk__if__B_4_declblk__stack_top_assign__add] [@GP_Sloc:calculatorcommands.adb:92:42] [@GP_Id:54] (Standard__integer.range_check_((Calculatorcommands__handle_push1__stack_top.stack_top.int__content + (1 : int)))) )) ))) );
       ( [@GP_Sloc:calculatorcommands.adb:93:37] ([#"calculatorcommands.adb" 93 0 0] [#"calculatorcommands.adb" 93 0 0] (Calculatorcommands__handle_push1__stack.stack.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Calculatorcommands__handle_push1__stack.stack.Array__Int__Standard__integer.map__content) (( [#"calculatorcommands.adb" 93 0 0] assert { [#"calculatorcommands.adb" 93 0 0] ([#"calculatorcommands.adb" 93 0 0] ( [@comment:                  Stack (Stack_Top) := Val;                          ^ calculatorcommands.adb:93:26:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__B_3_declblk__if__B_4_declblk__stack_assign__ixdcomp] [@GP_Sloc:calculatorcommands.adb:93:26] [@GP_Id:55] ( (Calculatorcommands__Toperand_stackD1.first <= Calculatorcommands__handle_push1__stack_top.stack_top.int__content) /\ (Calculatorcommands__handle_push1__stack_top.stack_top.int__content <= Calculatorcommands__Toperand_stackD1.last) ) )) };
       Calculatorcommands__handle_push1__stack_top.stack_top.int__content )) ((Standard__integer__rep.of_rep(Calculatorcommands__handle_push1__B_3__B_4__val.val__)))) ))) );
       ( [@GP_Sloc:calculatorcommands.adb:94:19] ([#"calculatorcommands.adb" 94 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:94:19] ([#"calculatorcommands.adb" 94 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___464 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_459.temp___String_Literal_459(())) in (
       (let temp___463 [@mlw:proxy_symbol] [@introduced] = (let temp___462 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Calculatorcommands__handle_push1__B_3__B_4__val.val__))) ((12 : int))) in (
       (let temp___461 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_460.temp___String_Literal_460(())) in (
        (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___461) ((1 : int)) ((7 : int)) ((Standard__string.to_array(temp___462))) ((Standard__string.first(temp___462))) ((Standard__string.last(temp___462))))) ((1 : int)) (([#"calculatorcommands.adb" 95 0 0] ( [@GP_Id:56] [@GP_Sloc:calculatorcommands.adb:95:32] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                    ("Pushed " & Integer'Image (Val) & " onto the stack.");                                ^ calculatorcommands.adb:95:32:VC_RANGE_CHECK] [@GP_Shape:if__B_3_declblk__if__B_4_declblk__call_put_line__2__concat__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((7 : int))) + (Integer.length((Standard__string.first(temp___462))) ((Standard__string.last(temp___462)))))) - (1 : int)))) ))))))
       ))
        in (
        (if (((Standard__string.length(temp___463)) = (0 : int))) then (
         (Standard__string.of_array(temp___464) ((1 : int)) ((16 : int)))) else (
         (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___463))) ((Standard__string.first(temp___463))) ((Standard__string.last(temp___463))) (temp___464) ((1 : int)) ((16 : int)))) ((Standard__string.first(temp___463))) (([#"calculatorcommands.adb" 95 0 0] ( [@GP_Id:57] [@vc:annotation] [@comment:                    ("Pushed " & Integer'Image (Val) & " onto the stack.");                                                      ^ calculatorcommands.adb:95:54:VC_RANGE_CHECK] [@GP_Shape:if__B_3_declblk__if__B_4_declblk__call_put_line__2__concat] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:calculatorcommands.adb:95:54] (Standard__positive.range_check_((((Standard__string.first(temp___463)) + ((Integer.length((Standard__string.first(temp___463))) ((Standard__string.last(temp___463)))) + (Integer.length((1 : int)) ((16 : int))))) - (1 : int)))) ))))))))
       ))
       )) )) ) )) ) )))) ) )) ) ))) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_token_string" defined at calculatorcommands.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__get_token_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__long_long_integer___axiom as Standard__long_long_integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__to_string___axiom as Calculatorcommands__lines__to_string___axiom
 use        Calculatorcommands__lines__substring___axiom as Calculatorcommands__lines__substring___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__get_token_string__s as Calculatorcommands__get_token_string__s
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string__tok as Calculatorcommands__get_token_string__tok
 use        Calculatorcommands__get_token_string__start_pos as Calculatorcommands__get_token_string__start_pos
 use        Calculatorcommands__get_token_string__token_len as Calculatorcommands__get_token_string__token_len
 use        Calculatorcommands__get_token_string__temp_end as Calculatorcommands__get_token_string__temp_end
 use        Calculatorcommands__get_token_string__end_pos as Calculatorcommands__get_token_string__end_pos
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Temp___String_Literal_473 as Temp___String_Literal_473
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_474 as Temp___String_Literal_474
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__long_long_integer___axiom as Standard__long_long_integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__get_token_string__start_pos___axiom as Calculatorcommands__get_token_string__start_pos___axiom
 use        Calculatorcommands__get_token_string__token_len___axiom as Calculatorcommands__get_token_string__token_len___axiom
 use        Calculatorcommands__get_token_string__temp_end___axiom as Calculatorcommands__get_token_string__temp_end___axiom
 use        Calculatorcommands__get_token_string__end_pos___axiom as Calculatorcommands__get_token_string__end_pos___axiom
 use        Calculatorcommands__get_token_string__s___axiom as Calculatorcommands__get_token_string__s___axiom
 use        Calculatorcommands__get_token_string__tok___axiom as Calculatorcommands__get_token_string__tok___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Calculatorcommands__lines__to_string___axiom as Calculatorcommands__lines__to_string___axiom
 use        Calculatorcommands__lines__length___axiom as Calculatorcommands__lines__length___axiom
 use        Calculatorcommands__lines__substring___axiom as Calculatorcommands__lines__substring___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom

 val calculatorcommands__get_token_string__result [@name:Get_Token_String] [@model_projected] [@model_trace:3213@result]  : Standard__string.string__ref 
 
 let def [#"calculatorcommands.ads" 34 0 0][@GP_Subp:calculatorcommands.ads:34] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 34 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculatorcommands.ads:34 *)
  ;
  [#"calculatorcommands.ads" 34 0 0] assume { [#"calculatorcommands.ads" 34 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__get_token_string__s.s True False True True) };
  [#"calculatorcommands.ads" 34 0 0] assume { [#"calculatorcommands.ads" 34 0 0] (Mystringtokeniser__tokenextent___axiom.dynamic_invariant Calculatorcommands__get_token_string__tok.tok True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculatorcommands.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculatorcommands.ads:34 *)
  ;
  [#"calculatorcommands.ads" 34 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculatorcommands.ads:34 *)
  ;
  [#"calculatorcommands.ads" 34 0 0] try
   ( ();
   ([#"calculatorcommands.adb" 105 0 0] ( (let calculatorcommands__get_token_string__start_pos__assume = (Standard__positive__rep.to_rep(Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) in (
    [#"calculatorcommands.adb" 105 0 0] assume { [#"calculatorcommands.adb" 105 0 0] (calculatorcommands__get_token_string__start_pos__assume = Calculatorcommands__get_token_string__start_pos.start_pos) }))
   ;
   [#"calculatorcommands.adb" 105 0 0] assume { [#"calculatorcommands.adb" 105 0 0] (Standard__positive___axiom.dynamic_invariant Calculatorcommands__get_token_string__start_pos.start_pos True False True True) } ));
   ([#"calculatorcommands.adb" 106 0 0] ( (let calculatorcommands__get_token_string__token_len__assume = (Standard__natural__rep.to_rep(Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) in (
    [#"calculatorcommands.adb" 106 0 0] assume { [#"calculatorcommands.adb" 106 0 0] (calculatorcommands__get_token_string__token_len__assume = Calculatorcommands__get_token_string__token_len.token_len) }))
   ;
   [#"calculatorcommands.adb" 106 0 0] assume { [#"calculatorcommands.adb" 106 0 0] (Standard__natural___axiom.dynamic_invariant Calculatorcommands__get_token_string__token_len.token_len True False True True) } ));
   ([#"calculatorcommands.adb" 107 0 0] ( [#"calculatorcommands.adb" 107 0 0] assume { [#"calculatorcommands.adb" 107 0 0] (Standard__long_long_integer___axiom.default_initial_assumption Calculatorcommands__get_token_string__temp_end.temp_end.int__content False) };
   [#"calculatorcommands.adb" 107 0 0] assume { [#"calculatorcommands.adb" 107 0 0] (Standard__long_long_integer___axiom.dynamic_invariant Calculatorcommands__get_token_string__temp_end.temp_end.int__content False False True True) } ));
   ([#"calculatorcommands.adb" 108 0 0] ( [#"calculatorcommands.adb" 108 0 0] assume { [#"calculatorcommands.adb" 108 0 0] (Standard__natural___axiom.default_initial_assumption Calculatorcommands__get_token_string__end_pos.end_pos.int__content False) };
   [#"calculatorcommands.adb" 108 0 0] assume { [#"calculatorcommands.adb" 108 0 0] (Standard__natural___axiom.dynamic_invariant Calculatorcommands__get_token_string__end_pos.end_pos.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:calculatorcommands.adb:110:7] ([#"calculatorcommands.adb" 110 0 0] (if (( ([#"calculatorcommands.adb" 110 0 0] [#"calculatorcommands.adb" 110 0 0] (([@branch_id=2871] Main.spark__branch).bool__content <- ( (Calculatorcommands__get_token_string__token_len.token_len = (0 : int)) )));
   ( [@branch_id=2871] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:111:10] ([#"calculatorcommands.adb" 111 0 0] ( [#"calculatorcommands.adb" 111 0 0] (calculatorcommands__get_token_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_473.temp___String_Literal_473(()))) ((1 : int)) ((0 : int))) ));
    [#"calculatorcommands.adb" 111 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculatorcommands.adb:114:7] ([#"calculatorcommands.adb" 114 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:114:16] ([#"calculatorcommands.adb" 114 0 0] [#"calculatorcommands.adb" 114 0 0] (Calculatorcommands__get_token_string__temp_end.temp_end.int__content <- ( ((Calculatorcommands__get_token_string__start_pos.start_pos + Calculatorcommands__get_token_string__token_len.token_len) - (1 : int)) ))) );
   ( [@GP_Sloc:calculatorcommands.adb:117:10] ([#"calculatorcommands.adb" 117 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:117:45] ([#"calculatorcommands.adb" 117 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:117:7] ([#"calculatorcommands.adb" 117 0 0] (if (( ([#"calculatorcommands.adb" 117 0 0] [#"calculatorcommands.adb" 117 0 0] (([@branch_id=2888] Main.spark__branch).bool__content <- ( ( ( (Calculatorcommands__get_token_string__temp_end.temp_end.int__content > (Calculatorcommands__lines__length___axiom.length(Calculatorcommands__get_token_string__s.s))) || (Calculatorcommands__get_token_string__temp_end.temp_end.int__content > (2147483647 : int)) ) || (Calculatorcommands__get_token_string__temp_end.temp_end.int__content < Calculatorcommands__get_token_string__start_pos.start_pos) ) )));
   ( [@branch_id=2888] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:121:10] ([#"calculatorcommands.adb" 121 0 0] ( [#"calculatorcommands.adb" 121 0 0] (calculatorcommands__get_token_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_474.temp___String_Literal_474(()))) ((1 : int)) ((0 : int))) ));
    [#"calculatorcommands.adb" 121 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculatorcommands.adb:124:7] ([#"calculatorcommands.adb" 124 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:124:27] ([#"calculatorcommands.adb" 124 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:124:15] ([#"calculatorcommands.adb" 124 0 0] [#"calculatorcommands.adb" 124 0 0] (Calculatorcommands__get_token_string__end_pos.end_pos.int__content <- ( ([#"calculatorcommands.adb" 124 0 0] ( [@vc:annotation] [@comment:      End_Pos := Natural (Temp_End);                           ^ calculatorcommands.adb:124:27:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:60] [@GP_Sloc:calculatorcommands.adb:124:27] [@GP_Shape:end_pos_assign__typeconv] (Standard__natural.range_check_(Calculatorcommands__get_token_string__temp_end.temp_end.int__content)) )) ))) );
   ( [@GP_Sloc:calculatorcommands.adb:126:62] ([#"calculatorcommands.adb" 126 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:126:36] ([#"calculatorcommands.adb" 126 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:126:19] ([#"calculatorcommands.adb" 126 0 0] ()) );
   ( [@GP_Sloc:calculatorcommands.adb:126:7] ([#"calculatorcommands.adb" 126 0 0] ( [#"calculatorcommands.adb" 126 0 0] (calculatorcommands__get_token_string__result.Standard__string.string__content <- ( (Calculatorcommands__lines__to_string___axiom.to_string(([#"calculatorcommands.adb" 126 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:calculatorcommands.adb:126:36] [@vc:annotation] [@GP_Id:62] [@comment:      return Lines.To_String (Lines.Substring (S, Start_Pos, End_Pos));                                    ^ calculatorcommands.adb:126:36:VC_PRECONDITION] [@GP_Shape:return__call_to_string__call_substring] (Calculatorcommands__lines__substring___axiom.substring(Calculatorcommands__get_token_string__s.s) (Calculatorcommands__get_token_string__start_pos.start_pos) (([#"calculatorcommands.adb" 126 0 0] ( [@GP_Sloc:calculatorcommands.adb:126:62] [@vc:annotation] [@comment:      return Lines.To_String (Lines.Substring (S, Start_Pos, End_Pos));                                                              ^ calculatorcommands.adb:126:62:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:61] [@GP_Shape:return__call_to_string__call_substring] (Standard__positive.range_check_(Calculatorcommands__get_token_string__end_pos.end_pos.int__content)) )))) )))) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculatorcommands__get_token_string__result.Standard__string.string__content )
end
