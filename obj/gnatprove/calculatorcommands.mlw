(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 14 0 0][@name:Max_MyString_Length] [@model_trace:29027] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__mystring__T13s.t13s) : int =
  (Calculatorcommands__lines__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__mystring__T13s.t13s, 
 predicate in_range = Calculatorcommands__lines__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrD1__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__TmystringstrD1.tmystringstrD1) : int =
  (Calculatorcommands__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Calculatorcommands__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__lines__TmystringstrD1 as Calculatorcommands__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__mystringstr as Calculatorcommands__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__calculatorcommands__lines__mystring__length [@name:Length] [@model_trace:.28936] : Calculatorcommands__lines__mystring__T13s.t13s; rec__calculatorcommands__lines__mystring__str [@model_trace:.28951] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__calculatorcommands__lines__mystring__length__projection [@name:Length] [@model_trace:.28936] 
   (a : __split_fields) : Calculatorcommands__lines__mystring__T13s.t13s =
  a.rec__calculatorcommands__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__length__projection
 
 function __split_fields_rec__calculatorcommands__lines__mystring__str__projection [@model_trace:.28951] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__calculatorcommands__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__calculatorcommands__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate calculatorcommands__lines__mystring__length__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__length__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__length_ 
   (a : __rep) : Calculatorcommands__lines__mystring__T13s.t13s
  requires {  (calculatorcommands__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__length) }
 
 predicate calculatorcommands__lines__mystring__str__pred 
   (a : __rep) =
  true
 val calculatorcommands__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> calculatorcommands__lines__mystring__str__pred (a : __rep) }
 
 val rec__calculatorcommands__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (calculatorcommands__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__calculatorcommands__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Calculatorcommands__lines__mystring__T13s__rep.to_rep a.__split_fields.rec__calculatorcommands__lines__mystring__length) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep b.__split_fields.rec__calculatorcommands__lines__mystring__length)) /\ (Calculatorcommands__lines__mystringstr.bool_eq a.__split_fields.rec__calculatorcommands__lines__mystring__str b.__split_fields.rec__calculatorcommands__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__mystring
 use export Calculatorcommands__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__length__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__length__position 
   : int

 
 axiom calculatorcommands__lines__mystring__length__first__bit_axiom :
  ((calculatorcommands__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__length__last__bit_axiom :
  ((calculatorcommands__lines__mystring__length__last__bit ) > (calculatorcommands__lines__mystring__length__first__bit ))
 
 axiom calculatorcommands__lines__mystring__length__position_axiom :
  ((calculatorcommands__lines__mystring__length__position ) >= (0 : int))
 
 val constant calculatorcommands__lines__mystring__str__first__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__last__bit 
   : int

 
 val constant calculatorcommands__lines__mystring__str__position 
   : int

 
 axiom calculatorcommands__lines__mystring__str__first__bit_axiom :
  ((calculatorcommands__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom calculatorcommands__lines__mystring__str__last__bit_axiom :
  ((calculatorcommands__lines__mystring__str__last__bit ) > (calculatorcommands__lines__mystring__str__first__bit ))
 
 axiom calculatorcommands__lines__mystring__str__position_axiom :
  ((calculatorcommands__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 20 0 0][@model_projected] [@name:M] [@model_trace:28635] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 35 0 0][@model_trace:28786] [@model_projected] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:24 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 24 0 0][@model_trace:28669] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:24 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:24 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Calculatorcommands__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Calculatorcommands__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m1 [#"mystring.ads" 28 0 0][@model_projected] [@model_trace:28688] [@name:M1] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m2 [#"mystring.ads" 28 0 0][@model_trace:28697] [@model_projected] [@name:M2] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function less 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m1 [#"mystring.ads" 30 0 0][@model_projected] [@name:M1] [@model_trace:28752] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m2 [#"mystring.ads" 30 0 0][@model_projected] [@model_trace:28761] [@name:M2] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at mystring.ads:33 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 42 0 0][@model_projected] [@model_trace:28872] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 42 0 0][@model_trace:28881] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function get 
   (m : Calculatorcommands__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Calculatorcommands__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function equal 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant m [#"mystring.ads" 38 0 0][@model_trace:28828] [@model_projected] [@name:M] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 38 0 0][@name:From] [@model_trace:28837] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 38 0 0][@model_trace:28846] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val function substring 
   (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int) : Calculatorcommands__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Calculatorcommands__lines__mystring.mystring) (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__T26s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t26s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t26s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26s__ref =
  { mutable t26s__content : t26s }
 
 function t26s__ref_t26s__content__projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref_t26s__content__projection
 
 meta "inline:no" function t26s__ref_t26s__content__projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__to_string__T27s
 use export Calculatorcommands__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t27s =
  tmystringstrB
 
 type t27s__ref =
  { mutable t27s__content : t27s }
 
 function t27s__ref_t27s__content__projection 
   (a : t27s__ref) : t27s =
  a.t27s__content
 
 meta "model_projection" function t27s__ref_t27s__content__projection
 
 meta "inline:no" function t27s__ref_t27s__content__projection
 
 val t27s__havoc 
   (x : t27s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS29sP1" defined at mystring.adb:27 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__TS29sP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS29sP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS29sP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS29sP1__ref =
  { mutable tS29sP1__content : tS29sP1 }
 
 function tS29sP1__ref_tS29sP1__content__projection 
   (a : tS29sP1__ref) : tS29sP1 =
  a.tS29sP1__content
 
 meta "model_projection" function tS29sP1__ref_tS29sP1__content__projection
 
 meta "inline:no" function tS29sP1__ref_tS29sP1__content__projection
 
 val tS29sP1__havoc 
   (x : tS29sP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S29s" defined at mystring.adb:27 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__S29s
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s29s =
  string
 
 type s29s__ref =
  { mutable s29s__content : s29s }
 
 function s29s__ref_s29s__content__projection 
   (a : s29s__ref) : s29s =
  a.s29s__content
 
 meta "model_projection" function s29s__ref_s29s__content__projection
 
 meta "inline:no" function s29s__ref_s29s__content__projection
 
 val s29s__havoc 
   (x : s29s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T30s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T30s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t30s =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t30s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t30s__ref =
  { mutable t30s__content : t30s }
 
 function t30s__ref_t30s__content__projection 
   (a : t30s__ref) : t30s =
  a.t30s__content
 
 meta "model_projection" function t30s__ref_t30s__content__projection
 
 meta "inline:no" function t30s__ref_t30s__content__projection
 
 val t30s__havoc 
   (x : t30s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T30s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T30s__rep
 use        Calculatorcommands__lines__from_string__T30s as Calculatorcommands__lines__from_string__T30s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__from_string__T30s.t30s) : int =
  (Calculatorcommands__lines__from_string__T30s.t30s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__from_string__T30s.t30s, 
 predicate in_range = Calculatorcommands__lines__from_string__T30s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T31s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__T31s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32s" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__from_string__L_1__T32s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t32s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t32s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t32s__ref =
  { mutable t32s__content : t32s }
 
 function t32s__ref_t32s__content__projection 
   (a : t32s__ref) : t32s =
  a.t32s__content
 
 meta "model_projection" function t32s__ref_t32s__content__projection
 
 meta "inline:no" function t32s__ref_t32s__content__projection
 
 val t32s__havoc 
   (x : t32s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T43s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L_3__L42s__T43s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t43s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t43s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t43s__ref =
  { mutable t43s__content : t43s }
 
 function t43s__ref_t43s__content__projection 
   (a : t43s__ref) : t43s =
  a.t43s__content
 
 meta "model_projection" function t43s__ref_t43s__content__projection
 
 meta "inline:no" function t43s__ref_t43s__content__projection
 
 val t43s__havoc 
   (x : t43s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T41s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__equal__L_3__L40s__T41s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t41s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t41s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t41s__ref =
  { mutable t41s__content : t41s }
 
 function t41s__ref_t41s__content__projection 
   (a : t41s__ref) : t41s =
  a.t41s__content
 
 meta "model_projection" function t41s__ref_t41s__content__projection
 
 meta "inline:no" function t41s__ref_t41s__content__projection
 
 val t41s__havoc 
   (x : t41s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T46s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T46s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t46s =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t46s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t46s__ref =
  { mutable t46s__content : t46s }
 
 function t46s__ref_t46s__content__projection 
   (a : t46s__ref) : t46s =
  a.t46s__content
 
 meta "model_projection" function t46s__ref_t46s__content__projection
 
 meta "inline:no" function t46s__ref_t46s__content__projection
 
 val t46s__havoc 
   (x : t46s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T46s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T46s__rep
 use        Calculatorcommands__lines__substring__T46s as Calculatorcommands__lines__substring__T46s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__lines__substring__T46s.t46s) : int =
  (Calculatorcommands__lines__substring__T46s.t46s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__lines__substring__T46s.t46s, 
 predicate in_range = Calculatorcommands__lines__substring__T46s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T47s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__T47s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48s" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__lines__substring__L_4__T48s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t48s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t48s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t48s__ref =
  { mutable t48s__content : t48s }
 
 function t48s__ref_t48s__content__projection 
   (a : t48s__ref) : t48s =
  a.t48s__content
 
 meta "model_projection" function t48s__ref_t48s__content__projection
 
 meta "inline:no" function t48s__ref_t48s__content__projection
 
 val t48s__havoc 
   (x : t48s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type toperand_stackD1 =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = toperand_stackD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toperand_stackD1__ref =
  { mutable toperand_stackD1__content : toperand_stackD1 }
 
 function toperand_stackD1__ref_toperand_stackD1__content__projection 
   (a : toperand_stackD1__ref) : toperand_stackD1 =
  a.toperand_stackD1__content
 
 meta "model_projection" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 meta "inline:no" function toperand_stackD1__ref_toperand_stackD1__content__projection
 
 val toperand_stackD1__havoc 
   (x : toperand_stackD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackD1__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculatorcommands__Toperand_stackD1.toperand_stackD1) : int =
  (Calculatorcommands__Toperand_stackD1.toperand_stackD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculatorcommands__Toperand_stackD1.toperand_stackD1, 
 predicate in_range = Calculatorcommands__Toperand_stackD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_163   : int.
   (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_163)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_163   : int.
    (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_163)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__Toperand_stackB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Calculatorcommands__Toperand_stackD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type toperand_stackB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type toperand_stackB__ref =
  { mutable toperand_stackB__content : toperand_stackB }
 
 function toperand_stackB__ref_toperand_stackB__content__projection 
   (a : toperand_stackB__ref) : toperand_stackB =
  a.toperand_stackB__content
 
 meta "model_projection" function toperand_stackB__ref_toperand_stackB__content__projection
 
 meta "inline:no" function toperand_stackB__ref_toperand_stackB__content__projection
 
 val toperand_stackB__havoc 
   (x : toperand_stackB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "operand_stack" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__operand_stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at calculatorcommands.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 17 0 0][@model_trace:4989] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.5852] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.5862] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.5852] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.5862] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_164   : int.
   (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_164   : int.
    (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for defining the constant "t" defined at calculatorcommands.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 18 0 0][@model_projected] [@model_trace:5000] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "masterpin" defined at calculatorcommands.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant masterpin [#"calculatorcommands.ads" 19 0 0][@model_trace:5011] [@name:MasterPIN] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 21 0 0][@name:Numtokens] [@model_trace:5031] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 24 0 0][@model_projected] [@model_trace:5049] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 25 0 0][@model_projected] [@name:T] [@model_trace:5060] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 28 0 0][@model_trace:5091] [@name:Numtokens] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 31 0 0][@model_trace:5109] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 32 0 0][@model_projected] [@model_trace:5120] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 35 0 0][@model_trace:5149] [@name:Numtokens] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 38 0 0][@model_projected] [@model_trace:5167] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 39 0 0][@model_trace:5178] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 42 0 0][@name:NumTokens] [@model_trace:5207] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_pop__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 47 0 0][@model_trace:5243] [@name:NumTokens] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_add__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 52 0 0][@name:Unlocked] [@model_trace:5279] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_subtract__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 57 0 0][@name:Unlocked] [@model_trace:5320] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_multiply__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 63 0 0][@model_trace:5361] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_divide__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 69 0 0][@name:Unlocked] [@model_trace:5402] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:69, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 73 0 0][@model_projected] [@name:S] [@model_trace:5425] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 74 0 0][@model_projected] [@model_trace:5436] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 77 0 0][@name:Unlocked] [@model_trace:5465] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 78 0 0][@name:NumTokens] [@model_trace:5474] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type location_index =
  < range 1 256 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = location_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type location_index__ref =
  { mutable location_index__content : location_index }
 
 function location_index__ref_location_index__content__projection 
   (a : location_index__ref) : location_index =
  a.location_index__content
 
 meta "model_projection" function location_index__ref_location_index__content__projection
 
 meta "inline:no" function location_index__ref_location_index__content__projection
 
 val location_index__havoc 
   (x : location_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__location_index.location_index) : int =
  (Memorystore__location_index.location_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__location_index.location_index, 
 predicate in_range = Memorystore__location_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content : tinteger_32B }
 
 function tinteger_32B__ref_tinteger_32B__content__projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref_tinteger_32B__content__projection
 
 meta "inline:no" function tinteger_32B__ref_tinteger_32B__content__projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B as Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__2__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32 as Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__projection
 
 meta "inline:no" function int32__ref_int32__content__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32__rep
 use        Memorystore__int32 as Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__int32.int32) : int =
  (Memorystore__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__int32.int32, 
 predicate in_range = Memorystore__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "cell_opt" defined at memorystore.ads:41, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep

 type __split_fields =
  { rec__memorystore__cell_opt__valid [@model_trace:.19779] [@name:Valid] : bool; rec__memorystore__cell_opt__val [@name:Val] [@model_trace:.19790] : Memorystore__int32.int32 }
 
 function __split_fields_rec__memorystore__cell_opt__valid__projection [@model_trace:.19779] [@name:Valid] 
   (a : __split_fields) : bool =
  a.rec__memorystore__cell_opt__valid
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 function __split_fields_rec__memorystore__cell_opt__val__projection [@name:Val] [@model_trace:.19790] 
   (a : __split_fields) : Memorystore__int32.int32 =
  a.rec__memorystore__cell_opt__val
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__cell_opt__valid__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__valid__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__valid__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__valid_ 
   (a : __rep) : bool
  requires {  (memorystore__cell_opt__valid__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__valid) }
 
 predicate memorystore__cell_opt__val__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__val__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__val__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__val_ 
   (a : __rep) : Memorystore__int32.int32
  requires {  (memorystore__cell_opt__val__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__val) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__memorystore__cell_opt__valid = b.__split_fields.rec__memorystore__cell_opt__valid) /\ ((Memorystore__int32__rep.to_rep a.__split_fields.rec__memorystore__cell_opt__val) = (Memorystore__int32__rep.to_rep b.__split_fields.rec__memorystore__cell_opt__val)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__cell_opt
 use export Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type cell_opt =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__cell_opt__valid__first__bit 
   : int

 
 val constant memorystore__cell_opt__valid__last__bit 
   : int

 
 val constant memorystore__cell_opt__valid__position 
   : int

 
 axiom memorystore__cell_opt__valid__first__bit_axiom :
  ((memorystore__cell_opt__valid__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__valid__last__bit_axiom :
  ((memorystore__cell_opt__valid__last__bit ) > (memorystore__cell_opt__valid__first__bit ))
 
 axiom memorystore__cell_opt__valid__position_axiom :
  ((memorystore__cell_opt__valid__position ) >= (0 : int))
 
 val constant memorystore__cell_opt__val__first__bit 
   : int

 
 val constant memorystore__cell_opt__val__last__bit 
   : int

 
 val constant memorystore__cell_opt__val__position 
   : int

 
 axiom memorystore__cell_opt__val__first__bit_axiom :
  ((memorystore__cell_opt__val__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__val__last__bit_axiom :
  ((memorystore__cell_opt__val__last__bit ) > (memorystore__cell_opt__val__first__bit ))
 
 axiom memorystore__cell_opt__val__position_axiom :
  ((memorystore__cell_opt__val__position ) >= (0 : int))
 
 val function user_eq 
   (a : cell_opt) (b : cell_opt) : bool
 
 val constant dummy 
   : cell_opt

 
 type cell_opt__ref =
  { mutable cell_opt__content : cell_opt }
 
 function cell_opt__ref_cell_opt__content__projection 
   (a : cell_opt__ref) : cell_opt =
  a.cell_opt__content
 
 meta "model_projection" function cell_opt__ref_cell_opt__content__projection
 
 meta "inline:no" function cell_opt__ref_cell_opt__content__projection
 
 val cell_opt__havoc 
   (x : cell_opt__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Memorystore__cell_opt
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Memorystore__cell_opt.cell_opt
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_165   : int.
   (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
    (Memorystore__cell_opt.bool_eq (get a temp___idx_165) (get b ((b__first - a__first) + temp___idx_165)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_165   : int.
    (if (( (a__first <= temp___idx_165) /\ (temp___idx_165 <= a__last) )) then (
     (Memorystore__cell_opt.bool_eq (get a temp___idx_165) (get b ((b__first - a__first) + temp___idx_165)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Memorystore__cell_opt__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Memorystore__cell_opt.component_type, 
 type map = Array__Int__Memorystore__cell_opt.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Memorystore__cell_opt.get

end

(* Module for axiomatizing type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__Tmem_arrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Memorystore__location_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmem_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmem_arrayB__ref =
  { mutable tmem_arrayB__content : tmem_arrayB }
 
 function tmem_arrayB__ref_tmem_arrayB__content__projection 
   (a : tmem_arrayB__ref) : tmem_arrayB =
  a.tmem_arrayB__content
 
 meta "model_projection" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 meta "inline:no" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 val tmem_arrayB__havoc 
   (x : tmem_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__mem_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "database" defined at memorystore.ads:48, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__mem_array as Memorystore__mem_array
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type __split_fields =
  { rec__memorystore__database__mem [@name:Mem] [@model_trace:.19825] : Array__Int__Memorystore__cell_opt.map; rec__memorystore__database__cnt [@name:Cnt] [@model_trace:.19835] : Standard__natural.natural }
 
 function __split_fields_rec__memorystore__database__mem__projection [@name:Mem] [@model_trace:.19825] 
   (a : __split_fields) : Array__Int__Memorystore__cell_opt.map =
  a.rec__memorystore__database__mem
 
 meta "model_projection" function __split_fields_rec__memorystore__database__mem__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__mem__projection
 
 function __split_fields_rec__memorystore__database__cnt__projection [@name:Cnt] [@model_trace:.19835] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__memorystore__database__cnt
 
 meta "model_projection" function __split_fields_rec__memorystore__database__cnt__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__cnt__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__database__mem__pred 
   (a : __rep) =
  true
 val memorystore__database__mem__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__mem__pred (a : __rep) }
 
 val rec__memorystore__database__mem_ 
   (a : __rep) : Array__Int__Memorystore__cell_opt.map
  requires {  (memorystore__database__mem__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__mem) }
 
 predicate memorystore__database__cnt__pred 
   (a : __rep) =
  true
 val memorystore__database__cnt__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__cnt__pred (a : __rep) }
 
 val rec__memorystore__database__cnt_ 
   (a : __rep) : Standard__natural.natural
  requires {  (memorystore__database__cnt__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__cnt) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (Memorystore__mem_array.bool_eq a.__split_fields.rec__memorystore__database__mem b.__split_fields.rec__memorystore__database__mem) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__memorystore__database__cnt) = (Standard__natural__rep.to_rep b.__split_fields.rec__memorystore__database__cnt)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__database
 use export Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__database__mem__first__bit 
   : int

 
 val constant memorystore__database__mem__last__bit 
   : int

 
 val constant memorystore__database__mem__position 
   : int

 
 axiom memorystore__database__mem__first__bit_axiom :
  ((memorystore__database__mem__first__bit ) >= (0 : int))
 
 axiom memorystore__database__mem__last__bit_axiom :
  ((memorystore__database__mem__last__bit ) > (memorystore__database__mem__first__bit ))
 
 axiom memorystore__database__mem__position_axiom :
  ((memorystore__database__mem__position ) >= (0 : int))
 
 val constant memorystore__database__cnt__first__bit 
   : int

 
 val constant memorystore__database__cnt__last__bit 
   : int

 
 val constant memorystore__database__cnt__position 
   : int

 
 axiom memorystore__database__cnt__first__bit_axiom :
  ((memorystore__database__cnt__first__bit ) >= (0 : int))
 
 axiom memorystore__database__cnt__last__bit_axiom :
  ((memorystore__database__cnt__last__bit ) > (memorystore__database__cnt__first__bit ))
 
 axiom memorystore__database__cnt__position_axiom :
  ((memorystore__database__cnt__position ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 83 0 0][@model_trace:5508] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:84, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 84 0 0][@name:NumTokens] [@model_trace:5517] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mem" defined at calculatorcommands.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_list__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant mem [#"calculatorcommands.ads" 85 0 0][@name:Mem] [@model_projected] [@model_trace:5526] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_list__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 89 0 0][@model_projected] [@model_trace:5551] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 90 0 0][@model_trace:5562] [@model_projected] [@name:T] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 91 0 0][@name:Unlocked] [@model_trace:5573] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 92 0 0][@name:NumTokens] [@model_trace:5582] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:92, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 97 0 0][@model_trace:5616] [@model_projected] [@name:S] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "t" defined at calculatorcommands.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 val constant t [#"calculatorcommands.ads" 98 0 0][@model_projected] [@name:T] [@model_trace:5627] 
   : Mystringtokeniser__tokenarray.tokenarray

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at calculatorcommands.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "unlocked" defined at calculatorcommands.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant unlocked [#"calculatorcommands.ads" 101 0 0][@model_trace:5656] [@name:Unlocked] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "numtokens" defined at calculatorcommands.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant numtokens [#"calculatorcommands.ads" 102 0 0][@name:NumTokens] [@model_trace:5665] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at calculatorcommands.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "mem" defined at calculatorcommands.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant mem [#"calculatorcommands.ads" 103 0 0][@name:Mem] [@model_projected] [@model_trace:5674] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at calculatorcommands.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val constant s [#"calculatorcommands.ads" 106 0 0][@model_projected] [@name:S] [@model_trace:5699] 
   : Calculatorcommands__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at calculatorcommands.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "tok" defined at calculatorcommands.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__tok
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val constant tok [#"calculatorcommands.ads" 106 0 0][@name:Tok] [@model_projected] [@model_trace:5710] 
   : Mystringtokeniser__tokenextent.tokenextent

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tok" defined at calculatorcommands.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__tok___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_token_string" defined at calculatorcommands.ads:105, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__get_token_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 val function get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
 
 val predicate get_token_string__function_guard 
   (temp___result_166 : Standard__string.string) (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent)

end

(* Module for axiomatizing type "TS1bP1" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__S1b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  tokenarray
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at calculatorcommands.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:12715] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "rawpin" defined at calculatorcommands.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__B_1__rawpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawpin [#"calculatorcommands.adb" 22 0 0][@model_projected] [@name:RawPIN] [@model_trace:2412] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "c" defined at calculatorcommands.adb:25, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_unlock__B_1__L3b__c
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant c [#"calculatorcommands.adb" 25 0 0][@model_trace:2436] [@name:C] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at calculatorcommands.adb:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__B_1__L3b__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T4b" defined at calculatorcommands.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (46 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_projected] [@model_trace:5758] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_168 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "T5b" defined at calculatorcommands.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at calculatorcommands.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_unlock__B_1__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS7bP1" defined at calculatorcommands.adb:38, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__TS7bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS7bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS7bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS7bP1__ref =
  { mutable tS7bP1__content : tS7bP1 }
 
 function tS7bP1__ref_tS7bP1__content__projection 
   (a : tS7bP1__ref) : tS7bP1 =
  a.tS7bP1__content
 
 meta "model_projection" function tS7bP1__ref_tS7bP1__content__projection
 
 meta "inline:no" function tS7bP1__ref_tS7bP1__content__projection
 
 val tS7bP1__havoc 
   (x : tS7bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S7b" defined at calculatorcommands.adb:38, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__S7b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s7b =
  tokenarray
 
 type s7b__ref =
  { mutable s7b__content : s7b }
 
 function s7b__ref_s7b__content__projection 
   (a : s7b__ref) : s7b =
  a.s7b__content
 
 meta "model_projection" function s7b__ref_s7b__content__projection
 
 meta "inline:no" function s7b__ref_s7b__content__projection
 
 val s7b__havoc 
   (x : s7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at calculatorcommands.adb:46, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawpin" defined at calculatorcommands.adb:49, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__B_2__rawpin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawpin [#"calculatorcommands.adb" 49 0 0][@model_trace:2558] [@model_projected] [@name:RawPIN] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "c" defined at calculatorcommands.adb:52, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_lock__B_2__L9b__c
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant c [#"calculatorcommands.adb" 52 0 0][@model_trace:2582] [@name:C] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at calculatorcommands.adb:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__B_2__L9b__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10b" defined at calculatorcommands.adb:54, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__B_2__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (46 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T11b" defined at calculatorcommands.adb:58, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_lock__B_2__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS12bP1" defined at calculatorcommands.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__TS12bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS12bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS12bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS12bP1__ref =
  { mutable tS12bP1__content : tS12bP1 }
 
 function tS12bP1__ref_tS12bP1__content__projection 
   (a : tS12bP1__ref) : tS12bP1 =
  a.tS12bP1__content
 
 meta "model_projection" function tS12bP1__ref_tS12bP1__content__projection
 
 meta "inline:no" function tS12bP1__ref_tS12bP1__content__projection
 
 val tS12bP1__havoc 
   (x : tS12bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S12b" defined at calculatorcommands.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__S12b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s12b =
  tokenarray
 
 type s12b__ref =
  { mutable s12b__content : s12b }
 
 function s12b__ref_s12b__content__projection 
   (a : s12b__ref) : s12b =
  a.s12b__content
 
 meta "model_projection" function s12b__ref_s12b__content__projection
 
 meta "inline:no" function s12b__ref_s12b__content__projection
 
 val s12b__havoc 
   (x : s12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at calculatorcommands.adb:74, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (21 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at calculatorcommands.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawval" defined at calculatorcommands.adb:79, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__B_3__rawval
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawval [#"calculatorcommands.adb" 79 0 0][@model_trace:2712] [@model_projected] [@name:RawVal] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T15b" defined at calculatorcommands.adb:82, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at stringtointeger.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stringtointeger__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"stringtointeger.ads" 6 0 0][@model_trace:19874] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stringtointeger.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringtointeger__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_171 : int) (s : Standard__string.string)

end

(* Module for defining the constant "val" defined at calculatorcommands.adb:85, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push1__B_3__B_4__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val__ [#"calculatorcommands.adb" 85 0 0][@name:Val] [@model_trace:2746] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T16b" defined at calculatorcommands.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__B_4__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at calculatorcommands.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push1__B_3__B_4__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS18bP1" defined at calculatorcommands.adb:98, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__TS18bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS18bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS18bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS18bP1__ref =
  { mutable tS18bP1__content : tS18bP1 }
 
 function tS18bP1__ref_tS18bP1__content__projection 
   (a : tS18bP1__ref) : tS18bP1 =
  a.tS18bP1__content
 
 meta "model_projection" function tS18bP1__ref_tS18bP1__content__projection
 
 meta "inline:no" function tS18bP1__ref_tS18bP1__content__projection
 
 val tS18bP1__havoc 
   (x : tS18bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S18b" defined at calculatorcommands.adb:98, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__S18b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s18b =
  tokenarray
 
 type s18b__ref =
  { mutable s18b__content : s18b }
 
 function s18b__ref_s18b__content__projection 
   (a : s18b__ref) : s18b =
  a.s18b__content
 
 meta "model_projection" function s18b__ref_s18b__content__projection
 
 meta "inline:no" function s18b__ref_s18b__content__projection
 
 val s18b__havoc 
   (x : s18b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at calculatorcommands.adb:108, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (32 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at calculatorcommands.adb:110, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T21b" defined at calculatorcommands.adb:116, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawval1" defined at calculatorcommands.adb:119, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__B_5__rawval1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawval1 [#"calculatorcommands.adb" 119 0 0][@model_trace:2919] [@model_projected] [@name:RawVal1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "rawval2" defined at calculatorcommands.adb:120, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__B_5__rawval2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawval2 [#"calculatorcommands.adb" 120 0 0][@model_projected] [@name:RawVal2] [@model_trace:2934] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T22b" defined at calculatorcommands.adb:127, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__B_5__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "val1" defined at calculatorcommands.adb:130, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__B_5__B_6__val1
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val1 [#"calculatorcommands.adb" 130 0 0][@model_trace:2980] [@name:Val1] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "val2" defined at calculatorcommands.adb:132, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_push2__B_5__B_6__val2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val2 [#"calculatorcommands.adb" 132 0 0][@name:Val2] [@model_trace:2994] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T23b" defined at calculatorcommands.adb:140, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__B_5__B_6__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at calculatorcommands.adb:142, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__B_5__B_6__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T25b" defined at calculatorcommands.adb:144, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_push2__B_5__B_6__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T26b" defined at calculatorcommands.adb:159, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_pop__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T27b" defined at calculatorcommands.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_pop__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at calculatorcommands.adb:163, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_pop__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at calculatorcommands.adb:169, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_pop__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T30b" defined at calculatorcommands.adb:169, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_pop__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at calculatorcommands.adb:181, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32b" defined at calculatorcommands.adb:183, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T33b" defined at calculatorcommands.adb:194, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T35b" defined at calculatorcommands.adb:197, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T37b" defined at calculatorcommands.adb:206, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T38b" defined at calculatorcommands.adb:208, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T39b" defined at calculatorcommands.adb:210, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_add__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at calculatorcommands.adb:224, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T41b" defined at calculatorcommands.adb:226, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T42b" defined at calculatorcommands.adb:237, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at calculatorcommands.adb:240, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T46b" defined at calculatorcommands.adb:249, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T46b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T47b" defined at calculatorcommands.adb:251, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at calculatorcommands.adb:253, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_subtract__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T49b" defined at calculatorcommands.adb:266, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T50b" defined at calculatorcommands.adb:268, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T51b" defined at calculatorcommands.adb:270, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__T51b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T52b" defined at calculatorcommands.adb:287, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__B_7__T52b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T54b" defined at calculatorcommands.adb:295, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__B_7__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at calculatorcommands.adb:297, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__B_7__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T56b" defined at calculatorcommands.adb:299, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_multiply__B_7__T56b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T57b" defined at calculatorcommands.adb:314, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T57b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T58b" defined at calculatorcommands.adb:316, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T58b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T59b" defined at calculatorcommands.adb:318, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T59b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T60b" defined at calculatorcommands.adb:329, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T60b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T62b" defined at calculatorcommands.adb:332, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T62b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T64b" defined at calculatorcommands.adb:341, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T64b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T65b" defined at calculatorcommands.adb:343, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T65b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T66b" defined at calculatorcommands.adb:345, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_divide__T66b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS67bP1" defined at calculatorcommands.adb:350, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__TS67bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS67bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS67bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS67bP1__ref =
  { mutable tS67bP1__content : tS67bP1 }
 
 function tS67bP1__ref_tS67bP1__content__projection 
   (a : tS67bP1__ref) : tS67bP1 =
  a.tS67bP1__content
 
 meta "model_projection" function tS67bP1__ref_tS67bP1__content__projection
 
 meta "inline:no" function tS67bP1__ref_tS67bP1__content__projection
 
 val tS67bP1__havoc 
   (x : tS67bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S67b" defined at calculatorcommands.adb:350, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__S67b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s67b =
  tokenarray
 
 type s67b__ref =
  { mutable s67b__content : s67b }
 
 function s67b__ref_s67b__content__projection 
   (a : s67b__ref) : s67b =
  a.s67b__content
 
 meta "model_projection" function s67b__ref_s67b__content__projection
 
 meta "inline:no" function s67b__ref_s67b__content__projection
 
 val s67b__havoc 
   (x : s67b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T68b" defined at calculatorcommands.adb:362, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__T68b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T69b" defined at calculatorcommands.adb:364, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__T69b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T70b" defined at calculatorcommands.adb:366, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__T70b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T71b" defined at calculatorcommands.adb:368, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__T71b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawindex_str" defined at calculatorcommands.adb:371, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_storeto__B_8__rawindex_str
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawindex_str [#"calculatorcommands.adb" 371 0 0][@name:RawIndex_Str] [@model_projected] [@model_trace:4035] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T72b" defined at calculatorcommands.adb:374, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__B_8__T72b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T73b" defined at calculatorcommands.adb:378, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__B_8__T73b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "loc" defined at memorystore.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__put__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"memorystore.ads" 26 0 0][@name:Loc] [@model_trace:19685] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at memorystore.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__put__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "val" defined at memorystore.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__put__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val__ [#"memorystore.ads" 27 0 0][@name:Val] [@model_trace:19694] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "val" defined at memorystore.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__put__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T74b" defined at calculatorcommands.adb:391, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__B_8__B_9__T74b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T75b" defined at calculatorcommands.adb:393, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_storeto__B_8__B_9__T75b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (13 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T76b" defined at calculatorcommands.adb:409, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_list__T76b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T77b" defined at calculatorcommands.adb:411, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_list__T77b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "d" defined at memorystore.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__print__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant d [#"memorystore.ads" 34 0 0][@model_trace:19758] [@model_projected] [@name:D] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__print__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS78bP1" defined at calculatorcommands.adb:415, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__TS78bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS78bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS78bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS78bP1__ref =
  { mutable tS78bP1__content : tS78bP1 }
 
 function tS78bP1__ref_tS78bP1__content__projection 
   (a : tS78bP1__ref) : tS78bP1 =
  a.tS78bP1__content
 
 meta "model_projection" function tS78bP1__ref_tS78bP1__content__projection
 
 meta "inline:no" function tS78bP1__ref_tS78bP1__content__projection
 
 val tS78bP1__havoc 
   (x : tS78bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S78b" defined at calculatorcommands.adb:415, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__S78b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s78b =
  tokenarray
 
 type s78b__ref =
  { mutable s78b__content : s78b }
 
 function s78b__ref_s78b__content__projection 
   (a : s78b__ref) : s78b =
  a.s78b__content
 
 meta "model_projection" function s78b__ref_s78b__content__projection
 
 meta "inline:no" function s78b__ref_s78b__content__projection
 
 val s78b__havoc 
   (x : s78b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T79b" defined at calculatorcommands.adb:425, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__T79b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (21 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawindex_str" defined at calculatorcommands.adb:428, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_remove__B_10__rawindex_str
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawindex_str [#"calculatorcommands.adb" 428 0 0][@name:RawIndex_Str] [@model_projected] [@model_trace:4301] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T80b" defined at calculatorcommands.adb:431, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__B_10__T80b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T81b" defined at calculatorcommands.adb:436, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__B_10__T81b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "loc" defined at memorystore.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__remove__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"memorystore.ads" 29 0 0][@name:Loc] [@model_trace:19721] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at memorystore.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__remove__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T82b" defined at calculatorcommands.adb:444, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_remove__B_10__B_11__T82b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TS83bP1" defined at calculatorcommands.adb:452, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__TS83bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS83bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS83bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS83bP1__ref =
  { mutable tS83bP1__content : tS83bP1 }
 
 function tS83bP1__ref_tS83bP1__content__projection 
   (a : tS83bP1__ref) : tS83bP1 =
  a.tS83bP1__content
 
 meta "model_projection" function tS83bP1__ref_tS83bP1__content__projection
 
 meta "inline:no" function tS83bP1__ref_tS83bP1__content__projection
 
 val tS83bP1__havoc 
   (x : tS83bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S83b" defined at calculatorcommands.adb:452, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__S83b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s83b =
  tokenarray
 
 type s83b__ref =
  { mutable s83b__content : s83b }
 
 function s83b__ref_s83b__content__projection 
   (a : s83b__ref) : s83b =
  a.s83b__content
 
 meta "model_projection" function s83b__ref_s83b__content__projection
 
 meta "inline:no" function s83b__ref_s83b__content__projection
 
 val s83b__havoc 
   (x : s83b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T84b" defined at calculatorcommands.adb:464, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__T84b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T85b" defined at calculatorcommands.adb:466, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__T85b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T86b" defined at calculatorcommands.adb:468, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__T86b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "rawindex_str" defined at calculatorcommands.adb:471, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__handle_loadfrom__B_12__rawindex_str
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant rawindex_str [#"calculatorcommands.adb" 471 0 0][@name:RawIndex_Str] [@model_projected] [@model_trace:4518] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T87b" defined at calculatorcommands.adb:474, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__B_12__T87b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T88b" defined at calculatorcommands.adb:478, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__B_12__T88b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "d" defined at memorystore.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__has__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant d [#"memorystore.ads" 20 0 0][@model_projected] [@name:D] [@model_trace:19612] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__has__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "loc" defined at memorystore.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__has__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"memorystore.ads" 20 0 0][@model_trace:19621] [@name:Loc] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at memorystore.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__has__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has" defined at memorystore.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__has
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val function has 
   (d : Memorystore__database.database) (loc : int) : bool
 
 val predicate has__function_guard 
   (temp___result_180 : bool) (d : Memorystore__database.database) (loc : int)

end

(* Module for axiomatizing type "T89b" defined at calculatorcommands.adb:485, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__T89b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "d" defined at memorystore.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__get__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant d [#"memorystore.ads" 22 0 0][@model_projected] [@name:D] [@model_trace:19640] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__get__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "loc" defined at memorystore.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__get__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"memorystore.ads" 22 0 0][@model_trace:19649] [@name:Loc] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at memorystore.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__get__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at memorystore.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val function get 
   (d : Memorystore__database.database) (loc : int) : int
 
 val predicate get__function_guard 
   (temp___result_181 : int) (d : Memorystore__database.database) (loc : int)

end

(* Module for axiomatizing type "T90b" defined at calculatorcommands.adb:495, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__T90b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T91b" defined at calculatorcommands.adb:497, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__T91b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "start_pos" defined at calculatorcommands.adb:511, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__start_pos
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant start_pos [#"calculatorcommands.adb" 511 0 0][@model_trace:4675] [@name:Start_Pos] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "token_len" defined at calculatorcommands.adb:512, created in Gnat2Why.Decls.Translate_Constant *)
module Calculatorcommands__get_token_string__token_len
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant token_len [#"calculatorcommands.adb" 512 0 0][@name:Token_Len] [@model_trace:4687] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T93b" defined at calculatorcommands.adb:517, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__get_token_string__T93b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T95b" defined at calculatorcommands.adb:527, created in Gnat2Why.Types.Translate_Type *)
module Calculatorcommands__get_token_string__T95b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val m__split_fields [#"mystring.ads" 45 0 0][@model_trace:28900] [@model_projected] [@name:M]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 21 0 0][@model_projected] [@model_trace:32862] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 21 0 0][@model_projected] [@model_trace:32862'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 21 0 0][@model_trace:32862'Last] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val m__split_fields [#"mystring.adb" 28 0 0][@model_projected] [@model_trace:32917] [@name:M]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:29 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 29 0 0][@model_projected] [@name:J] [@model_trace:32936]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:29 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 35 0 0][@model_projected] [@name:I] [@model_trace:33013]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:44 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 44 0 0][@model_projected] [@name:I] [@model_trace:33080]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:44 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:68 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 68 0 0][@model_projected] [@model_trace:33257] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:68 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 val r__split_fields [#"mystring.adb" 87 0 0][@model_projected] [@model_trace:33457] [@name:R]  : Calculatorcommands__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:88 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 88 0 0][@model_projected] [@model_trace:33480] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:88 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 90 0 0][@model_trace:33546] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:12525]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:12525'First] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:12525'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:12534] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_unlock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 20 0 0][@model_trace:5022] [@model_projected] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_unlock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "masterpin" defined at calculatorcommands.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__masterpin
 use        "_gnatprove_standard".Main
 use        "int".Int

 val masterpin [#"calculatorcommands.ads" 26 0 0][@model_projected] [@name:MasterPIN] [@model_trace:5071]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "masterpin" defined at calculatorcommands.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__masterpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "unlocked" defined at calculatorcommands.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_lock__unlocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlocked [#"calculatorcommands.ads" 27 0 0][@model_projected] [@model_trace:5082] [@name:Unlocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "unlocked" defined at calculatorcommands.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_lock__unlocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 33 0 0][@model_trace:5131] [@model_projected] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push1__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 34 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5140]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push1__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push2__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 40 0 0][@model_projected] [@name:Stack] [@model_trace:5189]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:41, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_push2__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 41 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5198]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_push2__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_pop__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 45 0 0][@model_trace:5225] [@model_projected] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:46, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_pop__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 46 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5234]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:50, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 50 0 0][@model_projected] [@name:Stack] [@model_trace:5261]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:51, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 51 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5270]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:55, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 55 0 0][@model_trace:5302] [@model_projected] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:56, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 56 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5311]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 61 0 0][@model_projected] [@name:Stack] [@model_trace:5343]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:62, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 62 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5352]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:67, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 67 0 0][@model_projected] [@name:Stack] [@model_trace:5384]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:68, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 68 0 0][@name:Stack_Top] [@model_projected] [@model_trace:5393]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:75, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 75 0 0][@model_projected] [@model_trace:5447] [@name:Stack]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:76, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 76 0 0][@model_trace:5456] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mem" defined at calculatorcommands.ads:79, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val mem__split_fields [#"calculatorcommands.ads" 79 0 0][@name:Mem] [@model_trace:5483] [@model_projected]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mem" defined at calculatorcommands.ads:93, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_remove__mem
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val mem__split_fields [#"calculatorcommands.ads" 93 0 0][@name:Mem] [@model_trace:5591] [@model_projected]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mem" defined at calculatorcommands.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__mem___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at calculatorcommands.ads:99, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_loadfrom__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 val stack [#"calculatorcommands.ads" 99 0 0][@model_projected] [@name:Stack] [@model_trace:5638]  : Array__Int__Standard__integer.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at calculatorcommands.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack_top" defined at calculatorcommands.ads:100, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_loadfrom__stack_top
 use        "_gnatprove_standard".Main
 use        "int".Int

 val stack_top [#"calculatorcommands.ads" 100 0 0][@model_trace:5647] [@name:Stack_Top] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack_top" defined at calculatorcommands.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__stack_top___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "popped_val" defined at calculatorcommands.adb:156, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_pop__popped_val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val popped_val [#"calculatorcommands.adb" 156 0 0][@model_projected] [@model_trace:3086] [@name:Popped_Val]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "popped_val" defined at calculatorcommands.adb:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_pop__popped_val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at calculatorcommands.adb:178, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"calculatorcommands.adb" 178 0 0][@model_projected] [@name:A] [@model_trace:3180]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculatorcommands.adb:178, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at calculatorcommands.adb:178, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"calculatorcommands.adb" 178 0 0][@model_trace:3187] [@model_projected] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculatorcommands.adb:178, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at calculatorcommands.adb:178, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_add__result
 use        "_gnatprove_standard".Main
 use        "int".Int

 val result__ [#"calculatorcommands.adb" 178 0 0][@model_projected] [@model_trace:3194] [@name:Result]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at calculatorcommands.adb:178, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_add__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at calculatorcommands.adb:221, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"calculatorcommands.adb" 221 0 0][@model_projected] [@name:A] [@model_trace:3359]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculatorcommands.adb:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at calculatorcommands.adb:221, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"calculatorcommands.adb" 221 0 0][@model_projected] [@model_trace:3366] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculatorcommands.adb:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at calculatorcommands.adb:221, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_subtract__result
 use        "_gnatprove_standard".Main
 use        "int".Int

 val result__ [#"calculatorcommands.adb" 221 0 0][@model_trace:3373] [@model_projected] [@name:Result]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at calculatorcommands.adb:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_subtract__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at calculatorcommands.adb:263, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"calculatorcommands.adb" 263 0 0][@model_trace:3538] [@model_projected] [@name:A]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculatorcommands.adb:263, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at calculatorcommands.adb:263, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"calculatorcommands.adb" 263 0 0][@model_projected] [@name:B] [@model_trace:3545]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculatorcommands.adb:263, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at calculatorcommands.adb:263, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__result
 use        "_gnatprove_standard".Main
 use        "int".Int

 val result__ [#"calculatorcommands.adb" 263 0 0][@model_projected] [@model_trace:3552] [@name:Result]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at calculatorcommands.adb:263, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "wide_a" defined at calculatorcommands.adb:280, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__B_7__wide_a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val wide_a [#"calculatorcommands.adb" 280 0 0][@model_trace:3619] [@name:Wide_A] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "wide_a" defined at calculatorcommands.adb:280, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__B_7__wide_a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "wide_b" defined at calculatorcommands.adb:281, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__B_7__wide_b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val wide_b [#"calculatorcommands.adb" 281 0 0][@name:Wide_B] [@model_projected] [@model_trace:3631]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "wide_b" defined at calculatorcommands.adb:281, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__B_7__wide_b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "wide_result" defined at calculatorcommands.adb:282, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_multiply__B_7__wide_result
 use        "_gnatprove_standard".Main
 use        "int".Int

 val wide_result [#"calculatorcommands.adb" 282 0 0][@model_trace:3643] [@model_projected] [@name:Wide_Result]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "wide_result" defined at calculatorcommands.adb:282, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_multiply__B_7__wide_result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at calculatorcommands.adb:311, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"calculatorcommands.adb" 311 0 0][@model_projected] [@name:A] [@model_trace:3752]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculatorcommands.adb:311, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at calculatorcommands.adb:311, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"calculatorcommands.adb" 311 0 0][@model_projected] [@name:B] [@model_trace:3759]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculatorcommands.adb:311, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at calculatorcommands.adb:311, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_divide__result
 use        "_gnatprove_standard".Main
 use        "int".Int

 val result__ [#"calculatorcommands.adb" 311 0 0][@model_trace:3766] [@model_projected] [@name:Result]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at calculatorcommands.adb:311, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_divide__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "rawindex_int" defined at calculatorcommands.adb:359, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__rawindex_int
 use        "_gnatprove_standard".Main
 use        "int".Int

 val rawindex_int [#"calculatorcommands.adb" 359 0 0][@name:RawIndex_Int] [@model_projected] [@model_trace:3970]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "rawindex_int" defined at calculatorcommands.adb:359, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__rawindex_int___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "loc" defined at calculatorcommands.adb:381, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__B_8__B_9__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val loc [#"calculatorcommands.adb" 381 0 0][@model_trace:4081] [@model_projected] [@name:Loc]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at calculatorcommands.adb:381, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__B_8__B_9__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "val" defined at calculatorcommands.adb:383, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_storeto__B_8__B_9__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val val__ [#"calculatorcommands.adb" 383 0 0][@name:Val] [@model_projected] [@model_trace:4097]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "val" defined at calculatorcommands.adb:383, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_storeto__B_8__B_9__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at memorystore.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Memorystore__put__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"memorystore.ads" 25 0 0][@model_trace:19676] [@model_projected] [@name:D]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__put__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "rawindex_int" defined at calculatorcommands.adb:422, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_remove__rawindex_int
 use        "_gnatprove_standard".Main
 use        "int".Int

 val rawindex_int [#"calculatorcommands.adb" 422 0 0][@name:RawIndex_Int] [@model_projected] [@model_trace:4269]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "rawindex_int" defined at calculatorcommands.adb:422, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__rawindex_int___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "loc" defined at calculatorcommands.adb:439, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_remove__B_10__B_11__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val loc [#"calculatorcommands.adb" 439 0 0][@model_projected] [@name:Loc] [@model_trace:4347]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at calculatorcommands.adb:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_remove__B_10__B_11__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at memorystore.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Memorystore__remove__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"memorystore.ads" 29 0 0][@model_trace:19712] [@model_projected] [@name:D]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__remove__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "rawindex_int" defined at calculatorcommands.adb:461, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_loadfrom__rawindex_int
 use        "_gnatprove_standard".Main
 use        "int".Int

 val rawindex_int [#"calculatorcommands.adb" 461 0 0][@name:RawIndex_Int] [@model_trace:4460] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "rawindex_int" defined at calculatorcommands.adb:461, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__rawindex_int___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "loc" defined at calculatorcommands.adb:481, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val loc [#"calculatorcommands.adb" 481 0 0][@model_projected] [@name:Loc] [@model_trace:4564]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at calculatorcommands.adb:481, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "val" defined at calculatorcommands.adb:488, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val val__ [#"calculatorcommands.adb" 488 0 0][@model_trace:4595] [@name:Val] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "val" defined at calculatorcommands.adb:488, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp_end" defined at calculatorcommands.adb:513, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__get_token_string__temp_end
 use        "_gnatprove_standard".Main
 use        "int".Int

 val temp_end [#"calculatorcommands.adb" 513 0 0][@model_projected] [@model_trace:4699] [@name:Temp_End]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp_end" defined at calculatorcommands.adb:513, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__temp_end___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "end_pos" defined at calculatorcommands.adb:514, created in Gnat2Why.Decls.Translate_Variable *)
module Calculatorcommands__get_token_string__end_pos
 use        "_gnatprove_standard".Main
 use        "int".Int

 val end_pos [#"calculatorcommands.adb" 514 0 0][@name:End_Pos] [@model_projected] [@model_trace:4708]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "end_pos" defined at calculatorcommands.adb:514, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__get_token_string__end_pos___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:51 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:51 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:73 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:73 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Calculatorcommands__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculatorcommands__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_unlock" defined at calculatorcommands.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_lock" defined at calculatorcommands.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_push1" defined at calculatorcommands.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_push1
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_push2" defined at calculatorcommands.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_push2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_pop" defined at calculatorcommands.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_pop
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_add" defined at calculatorcommands.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_add
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_subtract" defined at calculatorcommands.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_subtract
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_multiply" defined at calculatorcommands.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_multiply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_divide" defined at calculatorcommands.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_divide
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_storeto" defined at calculatorcommands.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_storeto
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_list" defined at calculatorcommands.ads:82, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_list
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_remove" defined at calculatorcommands.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "handle_loadfrom" defined at calculatorcommands.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculatorcommands__handle_loadfrom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at memorystore.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print" defined at memorystore.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__print
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at memorystore.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (( temp___is_init_182 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_186)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : int) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:50 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:48 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : Array__Int__Standard__character.map) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_193 : Array__Int__Standard__character.map) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : Array__Int__Standard__character.map) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_195 : Array__Int__Standard__character.map) (temp___skip_top_level_196 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_195 : Array__Int__Standard__character.map) (temp___skip_top_level_196 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_195 : Array__Int__Standard__character.map) (temp___skip_top_level_196 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:49 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_203 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_203 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_203 : Calculatorcommands__lines__mystring.mystring) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_205 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_206 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_205 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_206 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_205 : Calculatorcommands__lines__mystring.mystring) (temp___skip_top_level_206 : bool) }

end

(* Module giving axioms for type "T10s" defined at mystring.ads:33 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:21 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__to_string__m as Calculatorcommands__lines__to_string__m
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep
 use        Calculatorcommands__lines__to_string__TresultS as Calculatorcommands__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_255 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) =
  (if (temp___skip_constant_252) then (
   true) else (
   ( (Calculatorcommands__lines__to_string__TresultS.dynamic_property (1 : int) (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length) (Calculatorcommands__lines__to_string__TresultS.first temp___expr_255) (Calculatorcommands__lines__to_string__TresultS.last temp___expr_255)) /\ ( ((Calculatorcommands__lines__to_string__TresultS.first temp___expr_255) = (1 : int)) /\ ((Calculatorcommands__lines__to_string__TresultS.last temp___expr_255) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_255 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_255 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___is_init_251 : bool) (temp___skip_constant_252 : bool) (temp___do_toplevel_253 : bool) (temp___do_typ_inv_254 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_257 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_258 : bool) =
  ( ( true /\ ((Calculatorcommands__lines__to_string__TresultS.first temp___expr_257) = (1 : int)) )/\((Calculatorcommands__lines__to_string__TresultS.last temp___expr_257) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep Calculatorcommands__lines__to_string__m.m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_257 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_258 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_257 : Calculatorcommands__lines__to_string__TresultS.tresultS) (temp___skip_top_level_258 : bool) }

end

(* Module giving axioms for type "T26s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__T26s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27s" defined at mystring.adb:23 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__to_string__T27s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS29sP1" defined at mystring.adb:27 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__TS29sP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S29s" defined at mystring.adb:27 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__S29s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__lines__from_string__s as Calculatorcommands__lines__from_string__s
 use        Calculatorcommands__lines__from_string__S29s as Calculatorcommands__lines__from_string__S29s

 predicate dynamic_invariant [@inline] 
   (temp___expr_265 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) =
  (if (temp___skip_constant_262) then (
   true) else (
   ( (Calculatorcommands__lines__from_string__S29s.dynamic_property (Standard__string.first Calculatorcommands__lines__from_string__s.s) (Standard__string.last Calculatorcommands__lines__from_string__s.s) (Calculatorcommands__lines__from_string__S29s.first temp___expr_265) (Calculatorcommands__lines__from_string__S29s.last temp___expr_265)) /\ ( ((Calculatorcommands__lines__from_string__S29s.first temp___expr_265) = (Standard__string.first Calculatorcommands__lines__from_string__s.s)) /\ ((Calculatorcommands__lines__from_string__S29s.last temp___expr_265) = (Standard__string.last Calculatorcommands__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_265 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_265 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool) (temp___do_typ_inv_264 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_267 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___skip_top_level_268 : bool) =
  ( ( true /\ ((Calculatorcommands__lines__from_string__S29s.first temp___expr_267) = (Standard__string.first Calculatorcommands__lines__from_string__s.s)) )/\((Calculatorcommands__lines__from_string__S29s.last temp___expr_267) = (Standard__string.last Calculatorcommands__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_267 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___skip_top_level_268 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_267 : Calculatorcommands__lines__from_string__S29s.s29s) (temp___skip_top_level_268 : bool) }

end

(* Module giving axioms for type "T30s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__T30s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31s" defined at mystring.adb:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__T31s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32s" defined at mystring.adb:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__from_string__L_1__T32s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T43s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L_3__L42s__T43s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41s" defined at mystring.adb:75 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__equal__L_3__L40s__T41s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__T46s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47s" defined at mystring.adb:87 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__T47s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48s" defined at mystring.adb:90 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__lines__substring__L_4__T48s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Toperand_stackD1" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Toperand_stackB" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__Toperand_stackB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "operand_stack" defined at calculatorcommands.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__operand_stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_277 : Array__Int__Standard__integer.map) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_277 : Array__Int__Standard__integer.map) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_277 : Array__Int__Standard__integer.map) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_279 : Array__Int__Standard__integer.map) (temp___skip_top_level_280 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_279 : Array__Int__Standard__integer.map) (temp___skip_top_level_280 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_279 : Array__Int__Standard__integer.map) (temp___skip_top_level_280 : bool) }

end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_287 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_283 : bool) (temp___skip_constant_284 : bool) (temp___do_toplevel_285 : bool) (temp___do_typ_inv_286 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_287 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_283 : bool) (temp___skip_constant_284 : bool) (temp___do_toplevel_285 : bool) (temp___do_typ_inv_286 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_287 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_283 : bool) (temp___skip_constant_284 : bool) (temp___do_toplevel_285 : bool) (temp___do_typ_inv_286 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_288 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_289 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_288 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_289 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_288 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_289 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_296 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_292 : bool) (temp___skip_constant_293 : bool) (temp___do_toplevel_294 : bool) (temp___do_typ_inv_295 : bool) =
  (if (temp___skip_constant_293) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_296) (Mystringtokeniser__tokenarray.last temp___expr_296))))
 val dynamic_invariant [@inline] 
   (temp___expr_296 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_292 : bool) (temp___skip_constant_293 : bool) (temp___do_toplevel_294 : bool) (temp___do_typ_inv_295 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_296 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_292 : bool) (temp___skip_constant_293 : bool) (temp___do_toplevel_294 : bool) (temp___do_typ_inv_295 : bool) }

end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_302 : int) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) =
  (if (( temp___is_init_298 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_302)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_302 : int) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_302 : int) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_303 : int) (temp___skip_top_level_304 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_303 : int) (temp___skip_top_level_304 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_303 : int) (temp___skip_top_level_304 : bool) }

end

(* Module giving axioms for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__location_index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__location_index as Memorystore__location_index

 predicate dynamic_invariant [@inline] 
   (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) =
  (if (( temp___is_init_327 \/ (Memorystore__location_index.first <= Memorystore__location_index.last) )) then (
   (Memorystore__location_index.dynamic_property Memorystore__location_index.first Memorystore__location_index.last temp___expr_331)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_332 : int) (temp___skip_top_level_333 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_332 : int) (temp___skip_top_level_333 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_332 : int) (temp___skip_top_level_333 : bool) }

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__integer_32 as Interfaces__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_338 : int) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) =
  (if (( temp___is_init_334 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_338)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_338 : int) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_338 : int) (temp___is_init_334 : bool) (temp___skip_constant_335 : bool) (temp___do_toplevel_336 : bool) (temp___do_typ_inv_337 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_339 : int) (temp___skip_top_level_340 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_339 : int) (temp___skip_top_level_340 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_339 : int) (temp___skip_top_level_340 : bool) }

end

(* Module giving axioms for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_345 : int) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) =
  (if (( temp___is_init_341 \/ (Memorystore__int32.first <= Memorystore__int32.last) )) then (
   (Memorystore__int32.dynamic_property Memorystore__int32.first Memorystore__int32.last temp___expr_345)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_345 : int) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_345 : int) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool) (temp___do_typ_inv_344 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_346 : int) (temp___skip_top_level_347 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_346 : int) (temp___skip_top_level_347 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_346 : int) (temp___skip_top_level_347 : bool) }

end

(* Module giving axioms for type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__cell_opt___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_352 : Memorystore__cell_opt.cell_opt) (temp___is_init_348 : bool) (temp___skip_constant_349 : bool) (temp___do_toplevel_350 : bool) (temp___do_typ_inv_351 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_352 : Memorystore__cell_opt.cell_opt) (temp___is_init_348 : bool) (temp___skip_constant_349 : bool) (temp___do_toplevel_350 : bool) (temp___do_typ_inv_351 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_352 : Memorystore__cell_opt.cell_opt) (temp___is_init_348 : bool) (temp___skip_constant_349 : bool) (temp___do_toplevel_350 : bool) (temp___do_typ_inv_351 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_353 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_354 : bool) =
  ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred temp___expr_353)) then (
   (temp___expr_353.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred temp___expr_353)) then (
   ((Memorystore__int32__rep.to_rep temp___expr_353.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_353 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_354 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_353 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_354 : bool) }

end

(* Module giving axioms for type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__Tmem_arrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__mem_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_359 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_359 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_359 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_355 : bool) (temp___skip_constant_356 : bool) (temp___do_toplevel_357 : bool) (temp___do_typ_inv_358 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_361 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_362 : bool) =
  (forall temp___363   : int.
   (if (( (Memorystore__location_index.first <= temp___363) /\ (temp___363 <= Memorystore__location_index.last) )) then (
    (let temp___364 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_361 temp___363) in (
     ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_361 temp___363))) then (
      ((Array__Int__Memorystore__cell_opt.get temp___expr_361 temp___363).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_361 temp___363))) then (
      ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_361 temp___363).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
   ) else true))
 val default_initial_assumption [@inline] 
   (temp___expr_361 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_362 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_361 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_362 : bool) }

end

(* Module giving axioms for type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__database as Memorystore__database
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_369 : Memorystore__database.database) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_369 : Memorystore__database.database) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_369 : Memorystore__database.database) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_371 : Memorystore__database.database) (temp___skip_top_level_372 : bool) =
  ( (if ((Memorystore__database.memorystore__database__mem__pred temp___expr_371)) then (
   (let temp___373 [@mlw:proxy_symbol] [@introduced] = temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem in (
    (forall temp___374   : int.
     (if (( (Memorystore__location_index.first <= temp___374) /\ (temp___374 <= Memorystore__location_index.last) )) then (
      (let temp___375 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___374) in (
       ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___374))) then (
        ((Array__Int__Memorystore__cell_opt.get temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___374).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___374))) then (
        ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___374).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
     ) else true))))
  ) else true) /\ (if ((Memorystore__database.memorystore__database__cnt__pred temp___expr_371)) then (
   ((Standard__natural__rep.to_rep temp___expr_371.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__cnt) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_371 : Memorystore__database.database) (temp___skip_top_level_372 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_371 : Memorystore__database.database) (temp___skip_top_level_372 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at calculatorcommands.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock__t as Calculatorcommands__handle_unlock__t
 use        Calculatorcommands__handle_unlock__S1b as Calculatorcommands__handle_unlock__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_400 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_396 : bool) (temp___skip_constant_397 : bool) (temp___do_toplevel_398 : bool) (temp___do_typ_inv_399 : bool) =
  (if (temp___skip_constant_397) then (
   true) else (
   ( (Calculatorcommands__handle_unlock__S1b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t) (Calculatorcommands__handle_unlock__S1b.first temp___expr_400) (Calculatorcommands__handle_unlock__S1b.last temp___expr_400)) /\ ( ((Calculatorcommands__handle_unlock__S1b.first temp___expr_400) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t)) /\ ((Calculatorcommands__handle_unlock__S1b.last temp___expr_400) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_400 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_396 : bool) (temp___skip_constant_397 : bool) (temp___do_toplevel_398 : bool) (temp___do_typ_inv_399 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_400 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___is_init_396 : bool) (temp___skip_constant_397 : bool) (temp___do_toplevel_398 : bool) (temp___do_typ_inv_399 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_402 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_403 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_unlock__S1b.first temp___expr_402) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_unlock__t.t)) )/\((Calculatorcommands__handle_unlock__S1b.last temp___expr_402) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_unlock__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_402 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_403 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_402 : Calculatorcommands__handle_unlock__S1b.s1b) (temp___skip_top_level_403 : bool) }

end

(* Module giving axioms for type "T2b" defined at calculatorcommands.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at calculatorcommands.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at calculatorcommands.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at calculatorcommands.adb:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_unlock__B_1__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS7bP1" defined at calculatorcommands.adb:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__TS7bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S7b" defined at calculatorcommands.adb:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__S7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_lock__t as Calculatorcommands__handle_lock__t
 use        Calculatorcommands__handle_lock__S7b as Calculatorcommands__handle_lock__S7b

 predicate dynamic_invariant [@inline] 
   (temp___expr_415 : Calculatorcommands__handle_lock__S7b.s7b) (temp___is_init_411 : bool) (temp___skip_constant_412 : bool) (temp___do_toplevel_413 : bool) (temp___do_typ_inv_414 : bool) =
  (if (temp___skip_constant_412) then (
   true) else (
   ( (Calculatorcommands__handle_lock__S7b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t) (Calculatorcommands__handle_lock__S7b.first temp___expr_415) (Calculatorcommands__handle_lock__S7b.last temp___expr_415)) /\ ( ((Calculatorcommands__handle_lock__S7b.first temp___expr_415) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t)) /\ ((Calculatorcommands__handle_lock__S7b.last temp___expr_415) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_415 : Calculatorcommands__handle_lock__S7b.s7b) (temp___is_init_411 : bool) (temp___skip_constant_412 : bool) (temp___do_toplevel_413 : bool) (temp___do_typ_inv_414 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_415 : Calculatorcommands__handle_lock__S7b.s7b) (temp___is_init_411 : bool) (temp___skip_constant_412 : bool) (temp___do_toplevel_413 : bool) (temp___do_typ_inv_414 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_417 : Calculatorcommands__handle_lock__S7b.s7b) (temp___skip_top_level_418 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_lock__S7b.first temp___expr_417) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_lock__t.t)) )/\((Calculatorcommands__handle_lock__S7b.last temp___expr_417) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_lock__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_417 : Calculatorcommands__handle_lock__S7b.s7b) (temp___skip_top_level_418 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_417 : Calculatorcommands__handle_lock__S7b.s7b) (temp___skip_top_level_418 : bool) }

end

(* Module giving axioms for type "T8b" defined at calculatorcommands.adb:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at calculatorcommands.adb:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__B_2__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at calculatorcommands.adb:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_lock__B_2__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS12bP1" defined at calculatorcommands.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__TS12bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S12b" defined at calculatorcommands.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__S12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push1__t as Calculatorcommands__handle_push1__t
 use        Calculatorcommands__handle_push1__S12b as Calculatorcommands__handle_push1__S12b

 predicate dynamic_invariant [@inline] 
   (temp___expr_427 : Calculatorcommands__handle_push1__S12b.s12b) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) =
  (if (temp___skip_constant_424) then (
   true) else (
   ( (Calculatorcommands__handle_push1__S12b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t) (Calculatorcommands__handle_push1__S12b.first temp___expr_427) (Calculatorcommands__handle_push1__S12b.last temp___expr_427)) /\ ( ((Calculatorcommands__handle_push1__S12b.first temp___expr_427) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t)) /\ ((Calculatorcommands__handle_push1__S12b.last temp___expr_427) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_427 : Calculatorcommands__handle_push1__S12b.s12b) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_427 : Calculatorcommands__handle_push1__S12b.s12b) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_429 : Calculatorcommands__handle_push1__S12b.s12b) (temp___skip_top_level_430 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_push1__S12b.first temp___expr_429) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push1__t.t)) )/\((Calculatorcommands__handle_push1__S12b.last temp___expr_429) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push1__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_429 : Calculatorcommands__handle_push1__S12b.s12b) (temp___skip_top_level_430 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_429 : Calculatorcommands__handle_push1__S12b.s12b) (temp___skip_top_level_430 : bool) }

end

(* Module giving axioms for type "T13b" defined at calculatorcommands.adb:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at calculatorcommands.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15b" defined at calculatorcommands.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at calculatorcommands.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__B_4__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at calculatorcommands.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push1__B_3__B_4__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS18bP1" defined at calculatorcommands.adb:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__TS18bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S18b" defined at calculatorcommands.adb:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__S18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push2__t as Calculatorcommands__handle_push2__t
 use        Calculatorcommands__handle_push2__S18b as Calculatorcommands__handle_push2__S18b

 predicate dynamic_invariant [@inline] 
   (temp___expr_440 : Calculatorcommands__handle_push2__S18b.s18b) (temp___is_init_436 : bool) (temp___skip_constant_437 : bool) (temp___do_toplevel_438 : bool) (temp___do_typ_inv_439 : bool) =
  (if (temp___skip_constant_437) then (
   true) else (
   ( (Calculatorcommands__handle_push2__S18b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push2__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push2__t.t) (Calculatorcommands__handle_push2__S18b.first temp___expr_440) (Calculatorcommands__handle_push2__S18b.last temp___expr_440)) /\ ( ((Calculatorcommands__handle_push2__S18b.first temp___expr_440) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push2__t.t)) /\ ((Calculatorcommands__handle_push2__S18b.last temp___expr_440) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push2__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_440 : Calculatorcommands__handle_push2__S18b.s18b) (temp___is_init_436 : bool) (temp___skip_constant_437 : bool) (temp___do_toplevel_438 : bool) (temp___do_typ_inv_439 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_440 : Calculatorcommands__handle_push2__S18b.s18b) (temp___is_init_436 : bool) (temp___skip_constant_437 : bool) (temp___do_toplevel_438 : bool) (temp___do_typ_inv_439 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_442 : Calculatorcommands__handle_push2__S18b.s18b) (temp___skip_top_level_443 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_push2__S18b.first temp___expr_442) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_push2__t.t)) )/\((Calculatorcommands__handle_push2__S18b.last temp___expr_442) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_push2__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_442 : Calculatorcommands__handle_push2__S18b.s18b) (temp___skip_top_level_443 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_442 : Calculatorcommands__handle_push2__S18b.s18b) (temp___skip_top_level_443 : bool) }

end

(* Module giving axioms for type "T19b" defined at calculatorcommands.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at calculatorcommands.adb:110, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21b" defined at calculatorcommands.adb:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at calculatorcommands.adb:127, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__B_5__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at calculatorcommands.adb:140, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__B_5__B_6__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at calculatorcommands.adb:142, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__B_5__B_6__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at calculatorcommands.adb:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_push2__B_5__B_6__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at calculatorcommands.adb:159, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_pop__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at calculatorcommands.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_pop__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at calculatorcommands.adb:163, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_pop__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at calculatorcommands.adb:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_pop__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at calculatorcommands.adb:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_pop__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at calculatorcommands.adb:181, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at calculatorcommands.adb:183, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at calculatorcommands.adb:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at calculatorcommands.adb:197, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at calculatorcommands.adb:206, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at calculatorcommands.adb:208, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at calculatorcommands.adb:210, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_add__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40b" defined at calculatorcommands.adb:224, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41b" defined at calculatorcommands.adb:226, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T41b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at calculatorcommands.adb:237, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T44b" defined at calculatorcommands.adb:240, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46b" defined at calculatorcommands.adb:249, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T46b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at calculatorcommands.adb:251, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48b" defined at calculatorcommands.adb:253, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_subtract__T48b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T49b" defined at calculatorcommands.adb:266, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at calculatorcommands.adb:268, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T51b" defined at calculatorcommands.adb:270, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__T51b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T52b" defined at calculatorcommands.adb:287, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__B_7__T52b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T54b" defined at calculatorcommands.adb:295, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__B_7__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at calculatorcommands.adb:297, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__B_7__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T56b" defined at calculatorcommands.adb:299, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_multiply__B_7__T56b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T57b" defined at calculatorcommands.adb:314, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T57b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T58b" defined at calculatorcommands.adb:316, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T58b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T59b" defined at calculatorcommands.adb:318, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T59b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T60b" defined at calculatorcommands.adb:329, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T60b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T62b" defined at calculatorcommands.adb:332, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T62b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T64b" defined at calculatorcommands.adb:341, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T64b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T65b" defined at calculatorcommands.adb:343, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T65b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T66b" defined at calculatorcommands.adb:345, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_divide__T66b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS67bP1" defined at calculatorcommands.adb:350, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__TS67bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S67b" defined at calculatorcommands.adb:350, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__S67b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_storeto__t as Calculatorcommands__handle_storeto__t
 use        Calculatorcommands__handle_storeto__S67b as Calculatorcommands__handle_storeto__S67b

 predicate dynamic_invariant [@inline] 
   (temp___expr_452 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___is_init_448 : bool) (temp___skip_constant_449 : bool) (temp___do_toplevel_450 : bool) (temp___do_typ_inv_451 : bool) =
  (if (temp___skip_constant_449) then (
   true) else (
   ( (Calculatorcommands__handle_storeto__S67b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_storeto__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_storeto__t.t) (Calculatorcommands__handle_storeto__S67b.first temp___expr_452) (Calculatorcommands__handle_storeto__S67b.last temp___expr_452)) /\ ( ((Calculatorcommands__handle_storeto__S67b.first temp___expr_452) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_storeto__t.t)) /\ ((Calculatorcommands__handle_storeto__S67b.last temp___expr_452) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_storeto__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_452 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___is_init_448 : bool) (temp___skip_constant_449 : bool) (temp___do_toplevel_450 : bool) (temp___do_typ_inv_451 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_452 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___is_init_448 : bool) (temp___skip_constant_449 : bool) (temp___do_toplevel_450 : bool) (temp___do_typ_inv_451 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_454 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___skip_top_level_455 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_storeto__S67b.first temp___expr_454) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_storeto__t.t)) )/\((Calculatorcommands__handle_storeto__S67b.last temp___expr_454) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_storeto__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_454 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___skip_top_level_455 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_454 : Calculatorcommands__handle_storeto__S67b.s67b) (temp___skip_top_level_455 : bool) }

end

(* Module giving axioms for type "T68b" defined at calculatorcommands.adb:362, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__T68b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T69b" defined at calculatorcommands.adb:364, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__T69b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T70b" defined at calculatorcommands.adb:366, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__T70b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T71b" defined at calculatorcommands.adb:368, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__T71b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T72b" defined at calculatorcommands.adb:374, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__B_8__T72b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T73b" defined at calculatorcommands.adb:378, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__B_8__T73b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T74b" defined at calculatorcommands.adb:391, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__B_8__B_9__T74b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T75b" defined at calculatorcommands.adb:393, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_storeto__B_8__B_9__T75b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T76b" defined at calculatorcommands.adb:409, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_list__T76b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T77b" defined at calculatorcommands.adb:411, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_list__T77b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS78bP1" defined at calculatorcommands.adb:415, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__TS78bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S78b" defined at calculatorcommands.adb:415, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__S78b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_remove__t as Calculatorcommands__handle_remove__t
 use        Calculatorcommands__handle_remove__S78b as Calculatorcommands__handle_remove__S78b

 predicate dynamic_invariant [@inline] 
   (temp___expr_467 : Calculatorcommands__handle_remove__S78b.s78b) (temp___is_init_463 : bool) (temp___skip_constant_464 : bool) (temp___do_toplevel_465 : bool) (temp___do_typ_inv_466 : bool) =
  (if (temp___skip_constant_464) then (
   true) else (
   ( (Calculatorcommands__handle_remove__S78b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_remove__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_remove__t.t) (Calculatorcommands__handle_remove__S78b.first temp___expr_467) (Calculatorcommands__handle_remove__S78b.last temp___expr_467)) /\ ( ((Calculatorcommands__handle_remove__S78b.first temp___expr_467) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_remove__t.t)) /\ ((Calculatorcommands__handle_remove__S78b.last temp___expr_467) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_remove__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_467 : Calculatorcommands__handle_remove__S78b.s78b) (temp___is_init_463 : bool) (temp___skip_constant_464 : bool) (temp___do_toplevel_465 : bool) (temp___do_typ_inv_466 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_467 : Calculatorcommands__handle_remove__S78b.s78b) (temp___is_init_463 : bool) (temp___skip_constant_464 : bool) (temp___do_toplevel_465 : bool) (temp___do_typ_inv_466 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_469 : Calculatorcommands__handle_remove__S78b.s78b) (temp___skip_top_level_470 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_remove__S78b.first temp___expr_469) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_remove__t.t)) )/\((Calculatorcommands__handle_remove__S78b.last temp___expr_469) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_remove__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_469 : Calculatorcommands__handle_remove__S78b.s78b) (temp___skip_top_level_470 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_469 : Calculatorcommands__handle_remove__S78b.s78b) (temp___skip_top_level_470 : bool) }

end

(* Module giving axioms for type "T79b" defined at calculatorcommands.adb:425, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__T79b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T80b" defined at calculatorcommands.adb:431, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__B_10__T80b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T81b" defined at calculatorcommands.adb:436, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__B_10__T81b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T82b" defined at calculatorcommands.adb:444, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_remove__B_10__B_11__T82b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS83bP1" defined at calculatorcommands.adb:452, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__TS83bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S83b" defined at calculatorcommands.adb:452, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__S83b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_loadfrom__t as Calculatorcommands__handle_loadfrom__t
 use        Calculatorcommands__handle_loadfrom__S83b as Calculatorcommands__handle_loadfrom__S83b

 predicate dynamic_invariant [@inline] 
   (temp___expr_481 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___is_init_477 : bool) (temp___skip_constant_478 : bool) (temp___do_toplevel_479 : bool) (temp___do_typ_inv_480 : bool) =
  (if (temp___skip_constant_478) then (
   true) else (
   ( (Calculatorcommands__handle_loadfrom__S83b.dynamic_property (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t) (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t) (Calculatorcommands__handle_loadfrom__S83b.first temp___expr_481) (Calculatorcommands__handle_loadfrom__S83b.last temp___expr_481)) /\ ( ((Calculatorcommands__handle_loadfrom__S83b.first temp___expr_481) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t)) /\ ((Calculatorcommands__handle_loadfrom__S83b.last temp___expr_481) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_481 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___is_init_477 : bool) (temp___skip_constant_478 : bool) (temp___do_toplevel_479 : bool) (temp___do_typ_inv_480 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_481 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___is_init_477 : bool) (temp___skip_constant_478 : bool) (temp___do_toplevel_479 : bool) (temp___do_typ_inv_480 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_483 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___skip_top_level_484 : bool) =
  ( ( true /\ ((Calculatorcommands__handle_loadfrom__S83b.first temp___expr_483) = (Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t)) )/\((Calculatorcommands__handle_loadfrom__S83b.last temp___expr_483) = (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t)) )
 val default_initial_assumption [@inline] 
   (temp___expr_483 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___skip_top_level_484 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_483 : Calculatorcommands__handle_loadfrom__S83b.s83b) (temp___skip_top_level_484 : bool) }

end

(* Module giving axioms for type "T84b" defined at calculatorcommands.adb:464, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__T84b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T85b" defined at calculatorcommands.adb:466, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__T85b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T86b" defined at calculatorcommands.adb:468, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__T86b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T87b" defined at calculatorcommands.adb:474, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__B_12__T87b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T88b" defined at calculatorcommands.adb:478, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__B_12__T88b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T89b" defined at calculatorcommands.adb:485, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__T89b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T90b" defined at calculatorcommands.adb:495, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__T90b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T91b" defined at calculatorcommands.adb:497, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__T91b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T93b" defined at calculatorcommands.adb:517, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__get_token_string__T93b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T95b" defined at calculatorcommands.adb:527, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculatorcommands__get_token_string__T95b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:464, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_492
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_492 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_492__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_492 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (4 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (8 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (9 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (10 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (11 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (12 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (13 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (14 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (16 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (17 : int))) = (60 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (18 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (19 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (20 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (21 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (22 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_492 __void_param) (23 : int))) = (62 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:474, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_493
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_493 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_493__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_493 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (10 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (11 : int))) = (100 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (13 : int))) = (120 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (14 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:478, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_494
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_494 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_494__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_494 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (3 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (5 : int))) = (120 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (7 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (8 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (9 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (11 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (12 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (13 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (14 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (15 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (16 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (17 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_494 __void_param) (19 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:485, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_495
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_495 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_495__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_495 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (6 : int))) = (58 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (8 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (9 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (10 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (11 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (12 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (13 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (14 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (16 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (17 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (18 : int))) = (116 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (20 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (21 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (22 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (23 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (24 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (25 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (26 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (27 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (28 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (29 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (30 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (31 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (32 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (33 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:497, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_496
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_496 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_496__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_496 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (2 : int))) = (102 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (5 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (7 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (8 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (9 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (10 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (11 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (12 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (13 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (15 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:495, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_497
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_497 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_497__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_497 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (4 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (7 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:468, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_505
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_505 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_505__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_505 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (6 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (9 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (10 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (11 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (12 : int))) = (107 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (14 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (15 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (16 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (17 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (18 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (19 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (20 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (21 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_505 __void_param) (22 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at calculatorcommands.adb:466, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_506
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_506 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_506__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_506 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (9 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (10 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (11 : int))) = (107 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (13 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (14 : int))) = (46 : int)) ) ) ) ))

end
(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:14 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__max_mystring_length as Calculatorcommands__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Calculatorcommands__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "rawpin" defined at calculatorcommands.adb:22, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_unlock__B_1__rawpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Calculatorcommands__handle_unlock__s as Calculatorcommands__handle_unlock__s
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_unlock__t as Calculatorcommands__handle_unlock__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_unlock__B_1__rawpin as Calculatorcommands__handle_unlock__B_1__rawpin
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawpin__def_axiom :
  ((Calculatorcommands__handle_unlock__B_1__rawpin.rawpin ) = (epsilon temp___result_167 : Standard__string.string.
   ( (temp___result_167 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_unlock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_unlock__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_167 Calculatorcommands__handle_unlock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_unlock__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawpin" defined at calculatorcommands.adb:49, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_lock__B_2__rawpin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_lock__s as Calculatorcommands__handle_lock__s
 use        Calculatorcommands__handle_lock__t as Calculatorcommands__handle_lock__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_lock__B_2__rawpin as Calculatorcommands__handle_lock__B_2__rawpin
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawpin__def_axiom :
  ((Calculatorcommands__handle_lock__B_2__rawpin.rawpin ) = (epsilon temp___result_169 : Standard__string.string.
   ( (temp___result_169 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_lock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_lock__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_169 Calculatorcommands__handle_lock__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_lock__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawval" defined at calculatorcommands.adb:79, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push1__B_3__rawval___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push1__s as Calculatorcommands__handle_push1__s
 use        Calculatorcommands__handle_push1__t as Calculatorcommands__handle_push1__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_push1__B_3__rawval as Calculatorcommands__handle_push1__B_3__rawval
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawval__def_axiom :
  ((Calculatorcommands__handle_push1__B_3__rawval.rawval ) = (epsilon temp___result_170 : Standard__string.string.
   ( (temp___result_170 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_push1__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push1__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_170 Calculatorcommands__handle_push1__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push1__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "val" defined at calculatorcommands.adb:85, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push1__B_3__B_4__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__handle_push1__B_3__rawval as Calculatorcommands__handle_push1__B_3__rawval
 use        Stringtointeger__from_string as Stringtointeger__from_string
 use        Calculatorcommands__handle_push1__B_3__B_4__val as Calculatorcommands__handle_push1__B_3__B_4__val

 axiom val____def_axiom :
  ((Calculatorcommands__handle_push1__B_3__B_4__val.val__ ) = (epsilon temp___result_172 : int.
   ( (temp___result_172 = (Stringtointeger__from_string.from_string Calculatorcommands__handle_push1__B_3__rawval.rawval)) /\ (Stringtointeger__from_string.from_string__function_guard temp___result_172 Calculatorcommands__handle_push1__B_3__rawval.rawval) )))

end

(* Module for defining the value of constant "rawval1" defined at calculatorcommands.adb:119, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push2__B_5__rawval1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push2__s as Calculatorcommands__handle_push2__s
 use        Calculatorcommands__handle_push2__t as Calculatorcommands__handle_push2__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_push2__B_5__rawval1 as Calculatorcommands__handle_push2__B_5__rawval1
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawval1__def_axiom :
  ((Calculatorcommands__handle_push2__B_5__rawval1.rawval1 ) = (epsilon temp___result_173 : Standard__string.string.
   ( (temp___result_173 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_push2__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push2__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_173 Calculatorcommands__handle_push2__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push2__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawval2" defined at calculatorcommands.adb:120, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push2__B_5__rawval2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_push2__s as Calculatorcommands__handle_push2__s
 use        Calculatorcommands__handle_push2__t as Calculatorcommands__handle_push2__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_push2__B_5__rawval2 as Calculatorcommands__handle_push2__B_5__rawval2
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawval2__def_axiom :
  ((Calculatorcommands__handle_push2__B_5__rawval2.rawval2 ) = (epsilon temp___result_174 : Standard__string.string.
   ( (temp___result_174 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_push2__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push2__t.t) (3 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_174 Calculatorcommands__handle_push2__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_push2__t.t) (3 : int))) )))

end

(* Module for defining the value of constant "val1" defined at calculatorcommands.adb:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push2__B_5__B_6__val1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stringtointeger__from_string as Stringtointeger__from_string
 use        Calculatorcommands__handle_push2__B_5__rawval1 as Calculatorcommands__handle_push2__B_5__rawval1
 use        Calculatorcommands__handle_push2__B_5__B_6__val1 as Calculatorcommands__handle_push2__B_5__B_6__val1

 axiom val1__def_axiom :
  ((Calculatorcommands__handle_push2__B_5__B_6__val1.val1 ) = (epsilon temp___result_175 : int.
   ( (temp___result_175 = (Stringtointeger__from_string.from_string Calculatorcommands__handle_push2__B_5__rawval1.rawval1)) /\ (Stringtointeger__from_string.from_string__function_guard temp___result_175 Calculatorcommands__handle_push2__B_5__rawval1.rawval1) )))

end

(* Module for defining the value of constant "val2" defined at calculatorcommands.adb:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_push2__B_5__B_6__val2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stringtointeger__from_string as Stringtointeger__from_string
 use        Calculatorcommands__handle_push2__B_5__rawval2 as Calculatorcommands__handle_push2__B_5__rawval2
 use        Calculatorcommands__handle_push2__B_5__B_6__val2 as Calculatorcommands__handle_push2__B_5__B_6__val2

 axiom val2__def_axiom :
  ((Calculatorcommands__handle_push2__B_5__B_6__val2.val2 ) = (epsilon temp___result_176 : int.
   ( (temp___result_176 = (Stringtointeger__from_string.from_string Calculatorcommands__handle_push2__B_5__rawval2.rawval2)) /\ (Stringtointeger__from_string.from_string__function_guard temp___result_176 Calculatorcommands__handle_push2__B_5__rawval2.rawval2) )))

end

(* Module for defining the value of constant "rawindex_str" defined at calculatorcommands.adb:371, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_storeto__B_8__rawindex_str___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_storeto__s as Calculatorcommands__handle_storeto__s
 use        Calculatorcommands__handle_storeto__t as Calculatorcommands__handle_storeto__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_storeto__B_8__rawindex_str as Calculatorcommands__handle_storeto__B_8__rawindex_str
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawindex_str__def_axiom :
  ((Calculatorcommands__handle_storeto__B_8__rawindex_str.rawindex_str ) = (epsilon temp___result_177 : Standard__string.string.
   ( (temp___result_177 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_storeto__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_storeto__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_177 Calculatorcommands__handle_storeto__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_storeto__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawindex_str" defined at calculatorcommands.adb:428, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_remove__B_10__rawindex_str___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_remove__s as Calculatorcommands__handle_remove__s
 use        Calculatorcommands__handle_remove__t as Calculatorcommands__handle_remove__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_remove__B_10__rawindex_str as Calculatorcommands__handle_remove__B_10__rawindex_str
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawindex_str__def_axiom :
  ((Calculatorcommands__handle_remove__B_10__rawindex_str.rawindex_str ) = (epsilon temp___result_178 : Standard__string.string.
   ( (temp___result_178 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_remove__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_remove__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_178 Calculatorcommands__handle_remove__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_remove__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "rawindex_str" defined at calculatorcommands.adb:471, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__handle_loadfrom__B_12__rawindex_str___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__handle_loadfrom__s as Calculatorcommands__handle_loadfrom__s
 use        Calculatorcommands__handle_loadfrom__t as Calculatorcommands__handle_loadfrom__t
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Calculatorcommands__handle_loadfrom__B_12__rawindex_str as Calculatorcommands__handle_loadfrom__B_12__rawindex_str
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom rawindex_str__def_axiom :
  ((Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str ) = (epsilon temp___result_179 : Standard__string.string.
   ( (temp___result_179 = (Calculatorcommands__get_token_string.get_token_string Calculatorcommands__handle_loadfrom__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_loadfrom__t.t) (2 : int)))) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard temp___result_179 Calculatorcommands__handle_loadfrom__s.s (Array__Int__Mystringtokeniser__tokenextent.get (Mystringtokeniser__tokenarray.to_array Calculatorcommands__handle_loadfrom__t.t) (2 : int))) )))

end

(* Module for defining the value of constant "start_pos" defined at calculatorcommands.adb:511, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__get_token_string__start_pos___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string__tok as Calculatorcommands__get_token_string__tok
 use        Calculatorcommands__get_token_string__start_pos as Calculatorcommands__get_token_string__start_pos

 axiom start_pos__def_axiom :
  ((Calculatorcommands__get_token_string__start_pos.start_pos ) = (Standard__positive__rep.to_rep Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))

end

(* Module for defining the value of constant "token_len" defined at calculatorcommands.adb:512, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Calculatorcommands__get_token_string__token_len___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string__tok as Calculatorcommands__get_token_string__tok
 use        Calculatorcommands__get_token_string__token_len as Calculatorcommands__get_token_string__token_len

 axiom token_len__def_axiom :
  ((Calculatorcommands__get_token_string__token_len.token_len ) = (Standard__natural__rep.to_rep Calculatorcommands__get_token_string__tok.tok.Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:35 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Calculatorcommands__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s as Calculatorcommands__lines__mystring__T13s
 use        Calculatorcommands__lines__mystring__T13s__rep as Calculatorcommands__lines__mystring__T13s__rep

 val length 
   (m : Calculatorcommands__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:29174] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__length.length m) in (
    (if ((Calculatorcommands__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:29174] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__length.length m)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Calculatorcommands__lines__length.length m) in (
    (Calculatorcommands__lines__length.length__function_guard result m)))
    ) -> ((Calculatorcommands__lines__length.length m) = (Calculatorcommands__lines__mystring__T13s__rep.to_rep m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:20 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__to_string as Calculatorcommands__lines__to_string
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val to_string 
   (m : Calculatorcommands__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__to_string.to_string m)) /\ (Calculatorcommands__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:28607] ((Standard__string.length result) = (epsilon temp___result_213 : int.
   ( (temp___result_213 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_213 m) ))) ) /\ ( [@GP_Pretty_Ada:28614] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:28619] ((Standard__string.last result) = (epsilon temp___result_214 : int.
   ( (temp___result_214 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_214 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring [(Calculatorcommands__lines__to_string.to_string m)].
   ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Calculatorcommands__lines__to_string.to_string m) in (
    (if ((Calculatorcommands__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:28607] ((Standard__string.length result) = (epsilon temp___result_217 : int.
      ( (temp___result_217 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_217 m) ))) ) /\ ( [@GP_Pretty_Ada:28614] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:28619] ((Standard__string.last result) = (epsilon temp___result_218 : int.
      ( (temp___result_218 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_218 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:24 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__from_string as Calculatorcommands__lines__from_string
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Calculatorcommands__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:29092] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__from_string.from_string s)) /\ (Calculatorcommands__lines__from_string.from_string__function_guard result s) )/\( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:29106] ((epsilon temp___result_221 : int.
   ( (temp___result_221 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_221 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Calculatorcommands__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:29092] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Calculatorcommands__lines__from_string.from_string s) in (
    (if ((Calculatorcommands__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:29106] ((epsilon temp___result_224 : int.
      ( (temp___result_224 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_224 result) )) = (Standard__string.length s)) ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:28 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__less as Calculatorcommands__lines__less

 val less 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__less.less m1 m2)) /\ (Calculatorcommands__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:42 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Calculatorcommands__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__get as Calculatorcommands__lines__get
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Calculatorcommands__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:29242] (index <= (epsilon temp___result_229 : int.
   ( (temp___result_229 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_229 m) ))) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__get.get m index)) /\ (Calculatorcommands__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___230 [@mlw:proxy_symbol] [@introduced] = m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___230 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall index   : int [(Calculatorcommands__lines__get.get m index)].
   ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:29242] (index <= (epsilon temp___result_232 : int.
    ( (temp___result_232 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_232 m) ))) ) ) -> (let result = (Calculatorcommands__lines__get.get m index) in (
    (if ((Calculatorcommands__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall index   : int [(Calculatorcommands__lines__get.get m index)].
   ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Calculatorcommands__lines__get.get m index) in (
    (Calculatorcommands__lines__get.get__function_guard result m index)))
    ) -> ((Calculatorcommands__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___234 [@mlw:proxy_symbol] [@introduced] = m.Calculatorcommands__lines__mystring.__split_fields.Calculatorcommands__lines__mystring.rec__calculatorcommands__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___234 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:30 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__get as Calculatorcommands__lines__get
 use        Calculatorcommands__lines__equal as Calculatorcommands__lines__equal

 val equal 
   (m1 : Calculatorcommands__lines__mystring.mystring) (m2 : Calculatorcommands__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__lines__equal.equal m1 m2)) /\ (Calculatorcommands__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:28713] ((epsilon temp___result_235 : int.
    ( (temp___result_235 = (Calculatorcommands__lines__length.length m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_235 m1) )) = (epsilon temp___result_236 : int.
    ( (temp___result_236 = (Calculatorcommands__lines__length.length m2)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_236 m2) ))) ) /\ (forall i   [@model_trace:28731] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_237 : int.
     ( (temp___result_237 = (Calculatorcommands__lines__length.length m1)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_237 m1) ))) ) -> ( [@GP_Pretty_Ada:28721] ((epsilon temp___result_238 : int.
     ( (temp___result_238 = (Calculatorcommands__lines__get.get m1 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_238 m1 i) )) = (epsilon temp___result_239 : int.
     ( (temp___result_239 = (Calculatorcommands__lines__get.get m2 i)) /\ (Calculatorcommands__lines__get.get__function_guard temp___result_239 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:29320] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:38 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__length as Calculatorcommands__lines__length
 use        Calculatorcommands__lines__substring as Calculatorcommands__lines__substring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom

 val substring 
   (m : Calculatorcommands__lines__mystring.mystring) (from : int) (to__ : int) : Calculatorcommands__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:28799] (from <= to__) ) /\ ( [@GP_Pretty_Ada:28802] (to__ <= (epsilon temp___result_242 : int.
   ( (temp___result_242 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_242 m) ))) ) ) }
  ensures {  ( ( (result = (Calculatorcommands__lines__substring.substring m from to__)) /\ (Calculatorcommands__lines__substring.substring__function_guard result m from to__) )/\( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:29215] ((epsilon temp___result_243 : int.
   ( (temp___result_243 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_243 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Calculatorcommands__lines__mystring.mystring.
  (forall from   to__   : int [(Calculatorcommands__lines__substring.substring m from to__)].
   ( ( ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:28799] (from <= to__) ) /\ ( [@GP_Pretty_Ada:28802] (to__ <= (epsilon temp___result_246 : int.
    ( (temp___result_246 = (Calculatorcommands__lines__length.length m)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_246 m) ))) ) ) ) -> (let result = (Calculatorcommands__lines__substring.substring m from to__) in (
    (if ((Calculatorcommands__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:29215] ((epsilon temp___result_247 : int.
      ( (temp___result_247 = (Calculatorcommands__lines__length.length result)) /\ (Calculatorcommands__lines__length.length__function_guard temp___result_247 result) )) = ((to__ - from) + (1 : int))) ) /\ (Calculatorcommands__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:45 instantiated at calculatorcommands.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val get_line 
   (m__split_fields : Calculatorcommands__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Calculatorcommands__lines__mystring___axiom.dynamic_invariant { Calculatorcommands__lines__mystring.__split_fields = m__split_fields.Calculatorcommands__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:12553] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:12559] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:12568] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:12579] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_unlock" defined at calculatorcommands.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_unlock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int) (unlocked : bool__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_lock" defined at calculatorcommands.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_lock 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (masterpin : int__ref) (unlocked : bool__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  (Pin__pin___axiom.dynamic_invariant masterpin.int__content True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, masterpin, unlocked}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_push1" defined at calculatorcommands.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_push1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_push1 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_push2" defined at calculatorcommands.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_push2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_push2 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_pop" defined at calculatorcommands.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_pop___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_pop 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (numtokens : int) : unit
  requires {  true }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_add" defined at calculatorcommands.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_add___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_add 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:29489] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_subtract" defined at calculatorcommands.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_subtract___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_subtract 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:29505] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_multiply" defined at calculatorcommands.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_multiply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_multiply 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:29521] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_divide" defined at calculatorcommands.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_divide___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_divide 
   (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) : unit
  requires {  ( [@GP_Pretty_Ada:29537] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_storeto" defined at calculatorcommands.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_storeto___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_storeto 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) (numtokens : int) (mem__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  ( [@GP_Pretty_Ada:29553] (unlocked = True) ) }
  ensures {  ( ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) /\ (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = mem__split_fields.Memorystore__database.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top, mem__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_list" defined at calculatorcommands.ads:82, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_list___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_list 
   (unlocked : bool) (numtokens : int) (mem : Memorystore__database.database) : unit
  requires {  ( [@GP_Pretty_Ada:29569] (unlocked = True) ) }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_remove" defined at calculatorcommands.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_remove 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (unlocked : bool) (numtokens : int) (mem__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  ( [@GP_Pretty_Ada:29585] (unlocked = True) ) }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = mem__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, mem__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "handle_loadfrom" defined at calculatorcommands.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__handle_loadfrom___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Memorystore__database as Memorystore__database
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val handle_loadfrom 
   (s : Calculatorcommands__lines__mystring.mystring) (t : Mystringtokeniser__tokenarray.tokenarray) (stack : Array__Int__Standard__integer.map__ref) (stack_top : int__ref) (unlocked : bool) (numtokens : int) (mem : Memorystore__database.database) : unit
  requires {  ( [@GP_Pretty_Ada:29601] (unlocked = True) ) }
  ensures {  ( (Calculatorcommands__operand_stack___axiom.dynamic_invariant stack.Array__Int__Standard__integer.map__content True True True True) /\ (Standard__natural___axiom.dynamic_invariant stack_top.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system, stack, stack_top}

end

(* Module for declaring a program function (and possibly an axiom) for "get_token_string" defined at calculatorcommands.ads:105, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculatorcommands__get_token_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring as Calculatorcommands__lines__mystring
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string as Calculatorcommands__get_token_string
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom

 val get_token_string 
   (s : Calculatorcommands__lines__mystring.mystring) (tok : Mystringtokeniser__tokenextent.tokenextent) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Calculatorcommands__get_token_string.get_token_string s tok)) /\ (Calculatorcommands__get_token_string.get_token_string__function_guard result s tok) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_token_string__post_axiom :
  (forall s   : Calculatorcommands__lines__mystring.mystring.
  (forall tok   : Mystringtokeniser__tokenextent.tokenextent [(Calculatorcommands__get_token_string.get_token_string s tok)].
   ( ( (Calculatorcommands__lines__mystring___axiom.dynamic_invariant s True True True True) /\ (Mystringtokeniser__tokenextent___axiom.dynamic_invariant tok True True True True) ) -> (let result = (Calculatorcommands__get_token_string.get_token_string s tok) in (
    (if ((Calculatorcommands__get_token_string.get_token_string__function_guard result s tok)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:12734] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:12740] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:5778] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:5781] [@name:I]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:5795] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:5801] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:5778] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@model_trace:5781] [@name:I]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:5795] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:5801] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringtointeger__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Stringtointeger__from_string as Stringtointeger__from_string

 val from_string 
   (s : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Stringtointeger__from_string.from_string s)) /\ (Stringtointeger__from_string.from_string__function_guard result s) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Stringtointeger__from_string.from_string s)].
   (let result = (Stringtointeger__from_string.from_string s) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at memorystore.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom

 val put 
   (d__split_fields : Memorystore__database.__split_fields__ref) (loc : int) (val__ : int) : unit
  requires {  true }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at memorystore.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__print___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val print 
   (d : Memorystore__database.database) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at memorystore.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom

 val remove 
   (d__split_fields : Memorystore__database.__split_fields__ref) (loc : int) : unit
  requires {  true }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "has" defined at memorystore.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__has___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__has as Memorystore__has

 val has 
   (d : Memorystore__database.database) (loc : int) : bool
  requires {  true }
  ensures {  ( ( (result = (Memorystore__has.has d loc)) /\ (Memorystore__has.has__function_guard result d loc) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at memorystore.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__has as Memorystore__has
 use        Memorystore__get as Memorystore__get
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32___axiom as Memorystore__int32___axiom

 val get 
   (d : Memorystore__database.database) (loc : int) : int
  requires {  ( [@GP_Pretty_Ada:27890] ((epsilon temp___result_490 : bool.
   ( (temp___result_490 = (Memorystore__has.has d loc)) /\ (Memorystore__has.has__function_guard temp___result_490 d loc) )) = True) ) }
  ensures {  ( ( (result = (Memorystore__get.get d loc)) /\ (Memorystore__get.get__function_guard result d loc) )/\(Memorystore__int32___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get__post_axiom :
  (forall d   : Memorystore__database.database.
  (forall loc   : int [(Memorystore__get.get d loc)].
   (let result = (Memorystore__get.get d loc) in (
    (Memorystore__int32.dynamic_property Memorystore__int32.first Memorystore__int32.last result)))
  ))

end

(* Module for checking contracts and absence of run-time errors in subprogram "handle_loadfrom" defined at calculatorcommands.ads:96, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculatorcommands__handle_loadfrom__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Calculatorcommands__handle_loadfrom__s as Calculatorcommands__handle_loadfrom__s
 use        Calculatorcommands__handle_loadfrom__t as Calculatorcommands__handle_loadfrom__t
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Calculatorcommands__handle_loadfrom__stack as Calculatorcommands__handle_loadfrom__stack
 use        Calculatorcommands__handle_loadfrom__stack_top as Calculatorcommands__handle_loadfrom__stack_top
 use        Calculatorcommands__handle_loadfrom__unlocked as Calculatorcommands__handle_loadfrom__unlocked
 use        Calculatorcommands__handle_loadfrom__numtokens as Calculatorcommands__handle_loadfrom__numtokens
 use        Calculatorcommands__handle_loadfrom__mem as Calculatorcommands__handle_loadfrom__mem
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Calculatorcommands__handle_loadfrom__rawindex_int as Calculatorcommands__handle_loadfrom__rawindex_int
 use        Calculatorcommands__handle_loadfrom__B_12__rawindex_str as Calculatorcommands__handle_loadfrom__B_12__rawindex_str
 use        Calculatorcommands__handle_loadfrom__B_12__B_13__loc as Calculatorcommands__handle_loadfrom__B_12__B_13__loc
 use        Memorystore__has___axiom as Memorystore__has___axiom
 use        Memorystore__get___axiom as Memorystore__get___axiom
 use        Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val as Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val
 use        Calculatorcommands__Toperand_stackD1 as Calculatorcommands__Toperand_stackD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__location_index___axiom as Memorystore__location_index___axiom
 use        Temp___String_Literal_492 as Temp___String_Literal_492
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_493 as Temp___String_Literal_493
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_494 as Temp___String_Literal_494
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_495 as Temp___String_Literal_495
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_496 as Temp___String_Literal_496
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_497 as Temp___String_Literal_497
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_505 as Temp___String_Literal_505
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_506 as Temp___String_Literal_506
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Calculatorcommands__handle_loadfrom__rawindex_int___axiom as Calculatorcommands__handle_loadfrom__rawindex_int___axiom
 use        Calculatorcommands__handle_loadfrom__B_12__rawindex_str___axiom as Calculatorcommands__handle_loadfrom__B_12__rawindex_str___axiom
 use        Calculatorcommands__handle_loadfrom__B_12__B_13__loc___axiom as Calculatorcommands__handle_loadfrom__B_12__B_13__loc___axiom
 use        Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val___axiom as Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val___axiom
 use        Calculatorcommands__operand_stack___axiom as Calculatorcommands__operand_stack___axiom
 use        Calculatorcommands__handle_loadfrom__s___axiom as Calculatorcommands__handle_loadfrom__s___axiom
 use        Calculatorcommands__handle_loadfrom__t___axiom as Calculatorcommands__handle_loadfrom__t___axiom
 use        Calculatorcommands__handle_loadfrom__stack___axiom as Calculatorcommands__handle_loadfrom__stack___axiom
 use        Calculatorcommands__handle_loadfrom__stack_top___axiom as Calculatorcommands__handle_loadfrom__stack_top___axiom
 use        Calculatorcommands__handle_loadfrom__unlocked___axiom as Calculatorcommands__handle_loadfrom__unlocked___axiom
 use        Calculatorcommands__handle_loadfrom__numtokens___axiom as Calculatorcommands__handle_loadfrom__numtokens___axiom
 use        Calculatorcommands__handle_loadfrom__mem___axiom as Calculatorcommands__handle_loadfrom__mem___axiom
 use        Calculatorcommands__get_token_string___axiom as Calculatorcommands__get_token_string___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Memorystore__location_index___axiom as Memorystore__location_index___axiom
 use        Memorystore__int32___axiom as Memorystore__int32___axiom
 use        Memorystore__has___axiom as Memorystore__has___axiom
 use        Memorystore__get___axiom as Memorystore__get___axiom
 use        Memorystore__cell_opt___axiom as Memorystore__cell_opt___axiom
 use        Memorystore__mem_array___axiom as Memorystore__mem_array___axiom
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Calculatorcommands__lines__mystringstr___axiom as Calculatorcommands__lines__mystringstr___axiom
 use        Calculatorcommands__lines__mystring___axiom as Calculatorcommands__lines__mystring___axiom
 use        Calculatorcommands__lines__mystring__T13s___axiom as Calculatorcommands__lines__mystring__T13s___axiom
 use        Calculatorcommands__Toperand_stackD1___axiom as Calculatorcommands__Toperand_stackD1___axiom

 let def [#"calculatorcommands.ads" 96 0 0][@GP_Subp:calculatorcommands.ads:96] 
   (__void_param : unit)
  requires { [#"calculatorcommands.ads" 96 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculatorcommands.ads:96 *)
  ;
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Calculatorcommands__lines__mystring___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__s.s True False True True) };
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Mystringtokeniser__tokenarray___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__t.t True False True True) };
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Calculatorcommands__operand_stack___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__stack.stack.Array__Int__Standard__integer.map__content True False True True) };
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Standard__natural___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content True False True True) };
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Standard__natural___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__numtokens.numtokens True False True True) };
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] (Memorystore__database___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__mem.mem True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculatorcommands.ads:96 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculatorcommands.ads:96 *)
  ;
  [#"calculatorcommands.ads" 96 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_loadfrom__unlocked.unlocked in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculatorcommands.ads:96 *)
  ;
  [#"calculatorcommands.ads" 96 0 0] assume { [#"calculatorcommands.ads" 96 0 0] ( [@GP_Pretty_Ada:29601] (Calculatorcommands__handle_loadfrom__unlocked.unlocked = True) ) };
  [#"calculatorcommands.ads" 96 0 0] try
   ( ();
   ([#"calculatorcommands.adb" 452 0 0] ());
   ([#"calculatorcommands.adb" 461 0 0] ( [#"calculatorcommands.adb" 461 0 0] assume { [#"calculatorcommands.adb" 461 0 0] (Standard__integer___axiom.default_initial_assumption Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content False) };
   [#"calculatorcommands.adb" 461 0 0] assume { [#"calculatorcommands.adb" 461 0 0] (Standard__integer___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content False False True True) } ));
   ([#"calculatorcommands.adb" 470 0 0] ());
   ();
   ( [@GP_Sloc:calculatorcommands.adb:463:7] ([#"calculatorcommands.adb" 463 0 0] (if (( ([#"calculatorcommands.adb" 463 0 0] [#"calculatorcommands.adb" 463 0 0] (([@branch_id=4470] Main.spark__branch).bool__content <- ( ( ( (Calculatorcommands__handle_loadfrom__numtokens.numtokens <> (2 : int)) || (( [#"calculatorcommands.adb" 463 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_loadfrom__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.first(Calculatorcommands__handle_loadfrom__t.t)) ) > (2 : int)) ) || (( [#"calculatorcommands.adb" 463 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_loadfrom__t.t in (
    ()))
    in () end ;
   (Mystringtokeniser__tokenarray.last(Calculatorcommands__handle_loadfrom__t.t)) ) < (2 : int)) ) )));
   ( [@branch_id=4470] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculatorcommands.adb:464:10] ([#"calculatorcommands.adb" 464 0 0] ()) );
    ( [@GP_Sloc:calculatorcommands.adb:464:10] ([#"calculatorcommands.adb" 464 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_492.temp___String_Literal_492(()))) ((1 : int)) ((23 : int))))) )) ) )) else (
    ( [@GP_Sloc:calculatorcommands.adb:465:7] (if (( ([#"calculatorcommands.adb" 465 0 0] [#"calculatorcommands.adb" 465 0 0] (([@branch_id=4490] Main.spark__branch).bool__content <- ( ( ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_loadfrom__t.t))) ((let temp___507 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
     ( [#"calculatorcommands.adb" 465 0 0] assert { [#"calculatorcommands.adb" 465 0 0] ([#"calculatorcommands.adb" 465 0 0] ( [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:calculatorcommands.adb:465:16] [@comment:      elsif T (2).Start < 1 or else T (2).Length < 1 then                ^ calculatorcommands.adb:465:16:VC_INDEX_CHECK] [@GP_Id:8] [@GP_Shape:if__orelse__cmp__selectcomp__ixdcomp] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t) <= temp___507) /\ (temp___507 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t)) ) )) };
     temp___507 )))
    )).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) < (1 : int)) || ((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_loadfrom__t.t))) ((let temp___508 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
     (  assert {  ([#"calculatorcommands.adb" 465 0 0] ( [@comment:      elsif T (2).Start < 1 or else T (2).Length < 1 then                                        ^ calculatorcommands.adb:465:40:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:calculatorcommands.adb:465:40] [@GP_Id:9] [@GP_Shape:if__orelse__cmp__selectcomp__ixdcomp] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t) <= temp___508) /\ (temp___508 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t)) ) )) };
     temp___508 )))
    )).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) < (1 : int)) ) )));
    ( [@branch_id=4490] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:calculatorcommands.adb:466:10] ([#"calculatorcommands.adb" 466 0 0] ()) );
     ( [@GP_Sloc:calculatorcommands.adb:466:10] ([#"calculatorcommands.adb" 466 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_506.temp___String_Literal_506(()))) ((1 : int)) ((14 : int))))) )) ) )) else (
     ( [@GP_Sloc:calculatorcommands.adb:467:7] (if (( ([#"calculatorcommands.adb" 467 0 0] [#"calculatorcommands.adb" 467 0 0] (([@branch_id=4509] Main.spark__branch).bool__content <- ( (Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content >= (512 : int)) )));
     ( [@branch_id=4509] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:468:10] ([#"calculatorcommands.adb" 468 0 0] ()) );
      ( [@GP_Sloc:calculatorcommands.adb:468:10] ([#"calculatorcommands.adb" 468 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_505.temp___String_Literal_505(()))) ((1 : int)) ((22 : int))))) )) ) )) else (
      ( ();
      ( [@GP_Sloc:calculatorcommands.adb:470:10] ([#"calculatorcommands.adb" 470 0 0] ( ();
      ([#"calculatorcommands.adb" 471 0 0] ());
      ([#"calculatorcommands.adb" 471 0 0] ( (let calculatorcommands__handle_loadfrom__B_12__rawindex_str__assume = (Calculatorcommands__get_token_string___axiom.get_token_string(Calculatorcommands__handle_loadfrom__s.s) ((Array__Int__Mystringtokeniser__tokenextent.get((Mystringtokeniser__tokenarray.to_array(Calculatorcommands__handle_loadfrom__t.t))) ((let temp___504 [@mlw:proxy_symbol] [@introduced] = (2 : int) in (
       ( [#"calculatorcommands.adb" 471 0 0] assert { [#"calculatorcommands.adb" 471 0 0] ([#"calculatorcommands.adb" 471 0 0] ( [@GP_Shape:if__B_12_declblk__rawindex_str_decl__call_get_token_string__ixdcomp] [@vc:annotation] [@comment:            RawIndex_Str : constant String := Get_Token_String (S, T (2));                                                                       ^ calculatorcommands.adb:471:71:VC_INDEX_CHECK] [@GP_Sloc:calculatorcommands.adb:471:71] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:7] ( ((Mystringtokeniser__tokenarray.first Calculatorcommands__handle_loadfrom__t.t) <= temp___504) /\ (temp___504 <= (Mystringtokeniser__tokenarray.last Calculatorcommands__handle_loadfrom__t.t)) ) )) };
       temp___504 )))
      )))) in (
        assume {  (calculatorcommands__handle_loadfrom__B_12__rawindex_str__assume = Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str) }))
      ;
       assume {  (Standard__string___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str True False True True) } ));
      ([#"calculatorcommands.adb" 480 0 0] ());
      ();
      ( [@GP_Sloc:calculatorcommands.adb:473:13] ([#"calculatorcommands.adb" 473 0 0] (if (( ([#"calculatorcommands.adb" 473 0 0] [#"calculatorcommands.adb" 473 0 0] (([@branch_id=4534] Main.spark__branch).bool__content <- ( (( [#"calculatorcommands.adb" 473 0 0] begin ensures {true} let _ = (let _ = Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str in (
       ()))
       in () end ;
      (Standard__string.length(Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str)) ) = (0 : int)) )));
      ( [@branch_id=4534] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:474:16] ([#"calculatorcommands.adb" 474 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:474:16] ([#"calculatorcommands.adb" 474 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_493.temp___String_Literal_493(()))) ((1 : int)) ((14 : int))))) )) ) )) else (
       ( ();
       ( [@GP_Sloc:calculatorcommands.adb:476:16] ([#"calculatorcommands.adb" 476 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:476:47] ([#"calculatorcommands.adb" 476 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:476:29] ([#"calculatorcommands.adb" 476 0 0] [#"calculatorcommands.adb" 476 0 0] (Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content <- ( (Stringtointeger__from_string___axiom.from_string(Calculatorcommands__handle_loadfrom__B_12__rawindex_str.rawindex_str)) ))) );
       ( [@GP_Sloc:calculatorcommands.adb:477:19] ([#"calculatorcommands.adb" 477 0 0] ()) );
       ( [@GP_Sloc:calculatorcommands.adb:477:16] ([#"calculatorcommands.adb" 477 0 0] (if (( ([#"calculatorcommands.adb" 477 0 0] [#"calculatorcommands.adb" 477 0 0] (([@branch_id=4550] Main.spark__branch).bool__content <- ( ( (Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content < (1 : int)) || (Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content > (255 : int)) ) )));
       ( [@branch_id=4550] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:calculatorcommands.adb:478:19] ([#"calculatorcommands.adb" 478 0 0] ()) );
        ( [@GP_Sloc:calculatorcommands.adb:478:19] ([#"calculatorcommands.adb" 478 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_494.temp___String_Literal_494(()))) ((1 : int)) ((19 : int))))) )) ) )) else (
        ( ();
        ( [@GP_Sloc:calculatorcommands.adb:480:19] ([#"calculatorcommands.adb" 480 0 0] ( ();
        ([#"calculatorcommands.adb" 482 0 0] ());
        ([#"calculatorcommands.adb" 481 0 0] ( [#"calculatorcommands.adb" 481 0 0] (Calculatorcommands__handle_loadfrom__B_12__B_13__loc.loc.int__content <- ( ([#"calculatorcommands.adb" 482 0 0] ( [@comment:                       MemoryStore.Location_Index (RawIndex_Int);                                                    ^ calculatorcommands.adb:482:52:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:482:52] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:6] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__loc_decl__typeconv] (Memorystore__location_index.range_check_(Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content)) )) ));
         assume {  (Memorystore__location_index___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__B_12__B_13__loc.loc.int__content True False True True) } ));
        ([#"calculatorcommands.adb" 487 0 0] ());
        ();
        ( [@GP_Sloc:calculatorcommands.adb:484:51] ([#"calculatorcommands.adb" 484 0 0] ()) );
        ( [@GP_Sloc:calculatorcommands.adb:484:40] ([#"calculatorcommands.adb" 484 0 0] ()) );
        ( [@GP_Sloc:calculatorcommands.adb:484:22] ([#"calculatorcommands.adb" 484 0 0] (if (( ([#"calculatorcommands.adb" 484 0 0] [#"calculatorcommands.adb" 484 0 0] (([@branch_id=4581] Main.spark__branch).bool__content <- ( not ( (Memorystore__has___axiom.has(Calculatorcommands__handle_loadfrom__mem.mem) (Calculatorcommands__handle_loadfrom__B_12__B_13__loc.loc.int__content)) ) )));
        ( [@branch_id=4581] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:calculatorcommands.adb:485:25] ([#"calculatorcommands.adb" 485 0 0] ()) );
         ( [@GP_Sloc:calculatorcommands.adb:485:25] ([#"calculatorcommands.adb" 485 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_495.temp___String_Literal_495(()))) ((1 : int)) ((33 : int))))) )) ) )) else (
         ( ();
         ( [@GP_Sloc:calculatorcommands.adb:487:25] ([#"calculatorcommands.adb" 487 0 0] ( ();
         ([#"calculatorcommands.adb" 489 0 0] ());
         ([#"calculatorcommands.adb" 489 0 0] ());
         ([#"calculatorcommands.adb" 488 0 0] ( [#"calculatorcommands.adb" 488 0 0] (Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val.val__.int__content <- ( ([#"calculatorcommands.adb" 489 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:calculatorcommands.adb:489:50] [@vc:annotation] [@comment:                             Integer (MemoryStore.Get (Mem, Loc));                                                  ^ calculatorcommands.adb:489:50:VC_PRECONDITION] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__val_decl__typeconv__call_get] [@GP_Id:5] (Memorystore__get___axiom.get(Calculatorcommands__handle_loadfrom__mem.mem) (Calculatorcommands__handle_loadfrom__B_12__B_13__loc.loc.int__content)) )) ));
          assume {  (Standard__integer___axiom.dynamic_invariant Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val.val__.int__content True False True True) } ));
         ();
         ( [@GP_Sloc:calculatorcommands.adb:491:38] ([#"calculatorcommands.adb" 491 0 0] [#"calculatorcommands.adb" 491 0 0] (Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content <- ( ([#"calculatorcommands.adb" 491 0 0] ( [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__stack_top_assign__add] [@GP_Sloc:calculatorcommands.adb:491:51] [@vc:annotation] [@comment:                           Stack_Top := Stack_Top + 1;                                                   ^ calculatorcommands.adb:491:51:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:0] (Standard__integer.range_check_((Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content + (1 : int)))) )) ))) );
         ( [@GP_Sloc:calculatorcommands.adb:492:49] ([#"calculatorcommands.adb" 492 0 0] ()) );
         ( [@GP_Sloc:calculatorcommands.adb:492:46] ([#"calculatorcommands.adb" 492 0 0] [#"calculatorcommands.adb" 492 0 0] (Calculatorcommands__handle_loadfrom__stack.stack.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Calculatorcommands__handle_loadfrom__stack.stack.Array__Int__Standard__integer.map__content) (( [#"calculatorcommands.adb" 492 0 0] assert { [#"calculatorcommands.adb" 492 0 0] ([#"calculatorcommands.adb" 492 0 0] ( [@GP_Sloc:calculatorcommands.adb:492:35] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__stack_assign__ixdcomp] [@comment:                           Stack (Stack_Top) := Val;                                   ^ calculatorcommands.adb:492:35:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:1] ( (Calculatorcommands__Toperand_stackD1.first <= Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content) /\ (Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content <= Calculatorcommands__Toperand_stackD1.last) ) )) };
         Calculatorcommands__handle_loadfrom__stack_top.stack_top.int__content )) ((Standard__integer__rep.of_rep(Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val.val__.int__content)))) ))) );
         ( [@GP_Sloc:calculatorcommands.adb:494:28] ([#"calculatorcommands.adb" 494 0 0] ()) );
         ( [@GP_Sloc:calculatorcommands.adb:494:28] ([#"calculatorcommands.adb" 494 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___503 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Calculatorcommands__handle_loadfrom__rawindex_int.rawindex_int.int__content))) ((12 : int))) in (
         (let temp___502 [@mlw:proxy_symbol] [@introduced] = (let temp___501 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_496.temp___String_Literal_496(())) in (
         (let temp___500 [@mlw:proxy_symbol] [@introduced] = (let temp___499 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Calculatorcommands__handle_loadfrom__B_12__B_13__B_14__val.val__.int__content))) ((12 : int))) in (
         (let temp___498 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_497.temp___String_Literal_497(())) in (
          (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___498) ((1 : int)) ((7 : int)) ((Standard__string.to_array(temp___499))) ((Standard__string.first(temp___499))) ((Standard__string.last(temp___499))))) ((1 : int)) (([#"calculatorcommands.adb" 495 0 0] ( [@vc:annotation] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__call_put_line__2__concat__concat__concat] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:calculatorcommands.adb:496:31] [@comment:                              & Integer'Image (Val)                               ^ calculatorcommands.adb:496:31:VC_RANGE_CHECK] [@GP_Id:2] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((7 : int))) + (Integer.length((Standard__string.first(temp___499))) ((Standard__string.last(temp___499)))))) - (1 : int)))) ))))))
         ))
          in (
          (if (((Standard__string.length(temp___500)) = (0 : int))) then (
           (Standard__string.of_array(temp___501) ((1 : int)) ((15 : int)))) else (
           (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___500))) ((Standard__string.first(temp___500))) ((Standard__string.last(temp___500))) (temp___501) ((1 : int)) ((15 : int)))) ((Standard__string.first(temp___500))) (([#"calculatorcommands.adb" 495 0 0] ( [@GP_Sloc:calculatorcommands.adb:497:31] [@comment:                              & " from location "                               ^ calculatorcommands.adb:497:31:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__call_put_line__2__concat__concat] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:3] (Standard__positive.range_check_((((Standard__string.first(temp___500)) + ((Integer.length((Standard__string.first(temp___500))) ((Standard__string.last(temp___500)))) + (Integer.length((1 : int)) ((15 : int))))) - (1 : int)))) ))))))))
         ))
          in (
          (if (((Standard__string.length(temp___502)) = (0 : int))) then (
           (Standard__string.of_array((Standard__string.to_array(temp___503))) ((Standard__string.first(temp___503))) ((Standard__string.last(temp___503))))) else (
           (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___502))) ((Standard__string.first(temp___502))) ((Standard__string.last(temp___502))) ((Standard__string.to_array(temp___503))) ((Standard__string.first(temp___503))) ((Standard__string.last(temp___503))))) ((Standard__string.first(temp___502))) (([#"calculatorcommands.adb" 495 0 0] ( [@comment:                              & Integer'Image (RawIndex_Int));                               ^ calculatorcommands.adb:498:31:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:calculatorcommands.adb:498:31] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:4] [@GP_Shape:if__B_12_declblk__if__if__B_13_declblk__if__B_14_declblk__call_put_line__2__concat] (Standard__positive.range_check_((((Standard__string.first(temp___502)) + ((Integer.length((Standard__string.first(temp___502))) ((Standard__string.last(temp___502)))) + (Integer.length((Standard__string.first(temp___503))) ((Standard__string.last(temp___503)))))) - (1 : int)))) ))))))))
         ))
         )) )) ) )) ) )))) ) )) ) )))) ) )))) ) )) ) ))) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
